
==== ./client/src/index.css ====

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Definindo as vari√°veis CSS */
:root {
  --background: 0 0% 100%;
  --foreground: 20 14.3% 4.1%;
  --muted: 60 4.8% 95.9%;
  --muted-foreground: 25 5.3% 44.7%;
  --popover: 0 0% 100%;
  --popover-foreground: 20 14.3% 4.1%;
  --card: 0 0% 100%;
  --card-foreground: 20 14.3% 4.1%;
  --border: 20 5.9% 90%;
  --input: 20 5.9% 90%;
  --primary: 225 83% 60%;
  --primary-foreground: 211 100% 99%;
  --secondary: 258 87% 33%;
  --secondary-foreground: 0 0% 98%;
  --accent: 331 91% 56%;
  --accent-foreground: 0 0% 98%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 60 9.1% 97.8%;
  --ring: 225 83% 60%;
  --radius: 0.5rem;
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground font-sans antialiased;
  }
}

@layer components {
  .container {
    @apply mx-auto px-4;
  }
}

@layer utilities {
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
}

==== ./client/src/lib/apiClient.ts ====

// client/src/lib/apiClient.ts

/**
 * Realiza uma requisi√ß√£o fetch adicionando automaticamente o token JWT apropriado
 * (aluno ou personal/admin) do localStorage e tratando erros comuns.
 *
 * @param url O caminho da API (ex: '/api/alunos' ou '/api/aluno/meus-treinos').
 * @param options Op√ß√µes adicionais do fetch (method, body, etc.).
 * @returns Uma Promise com os dados da resposta em JSON.
 * @throws Lan√ßa um erro se a requisi√ß√£o falhar ou a resposta n√£o for OK.
 */
export const fetchWithAuth = async <T = any>(
    url: string, // Espera-se um caminho relativo, ex: /api/alunos
    options: RequestInit = {}
  ): Promise<T> => {
    // Obt√©m a URL base da API das vari√°veis de ambiente ou usa um padr√£o.
    const apiUrlBase = import.meta.env.VITE_API_URL || 'http://localhost:5000';
    const fullUrl = url.startsWith('/') ? `${apiUrlBase}${url}` : `${apiUrlBase}/${url}`; // Garante que a URL sempre comece com / se for relativa
    
    let token: string | null = null;
    let tokenTypeUsed: string = "Nenhum";
  
    // Determina qual token usar com base na URL da requisi√ß√£o
    if (url.startsWith('/api/aluno/')) {
      token = localStorage.getItem('alunoAuthToken');
      tokenTypeUsed = "alunoAuthToken";
      console.log('[fetchWithAuth] Rota de Aluno detectada. Tentando usar alunoAuthToken.');
    } else {
      // Para todas as outras rotas /api/* (que n√£o s√£o /api/aluno/) ou rotas p√∫blicas que podem tentar usar auth
      token = localStorage.getItem('authToken'); // Token de Personal/Admin
      tokenTypeUsed = "authToken";
      console.log('[fetchWithAuth] Rota de Personal/Admin ou P√∫blica. Tentando usar authToken.');
    }
  
    const headers = new Headers(options.headers || {});
    headers.set('Accept', 'application/json');
  
    if (token) {
      headers.set('Authorization', `Bearer ${token}`);
      console.log(`[fetchWithAuth] Token ${tokenTypeUsed} ('${token.substring(0,10)}...') adicionado ao header para ${url}.`);
    } else {
      console.log(`[fetchWithAuth] Nenhum token ${tokenTypeUsed} encontrado no localStorage para a rota: ${url}`);
    }
  
    // Garante Content-Type para POST/PUT/PATCH com body JSON
    if (options.body && typeof options.body === 'string') { // Verifica se o body √© uma string JSON
      if (!headers.has('Content-Type')) {
        headers.set('Content-Type', 'application/json');
      }
    }
  
    console.log(`[fetchWithAuth] Making ${options.method || 'GET'} request to: ${fullUrl}`);
  
    try {
      const response = await fetch(fullUrl, {
        ...options,
        headers,
      });
  
      if (response.status === 204) { // No Content
        console.log(`[fetchWithAuth] Received 204 No Content for ${fullUrl}`);
        return null as T; 
      }
  
      const responseText = await response.text();
      let data;
      try {
        data = responseText ? JSON.parse(responseText) : null; // Trata corpo vazio
      } catch (parseError) {
        console.error(`[fetchWithAuth] Failed to parse JSON response from ${fullUrl}. Status: ${response.status}. Response text:`, responseText);
        throw new Error(`Erro ${response.status}: Resposta inv√°lida do servidor (n√£o √© JSON).`);
      }
      
      // Log da resposta completa para depura√ß√£o, mesmo que seja um erro
      console.log(`[fetchWithAuth] Response from ${fullUrl} (Status: ${response.status}):`, data);
  
      if (!response.ok) {
        console.error(`[fetchWithAuth] API Error [${response.status} - ${response.statusText}] for ${fullUrl}:`, data);
  
        if (response.status === 401) {
          console.warn('[fetchWithAuth] Token expirado ou inv√°lido detectado (status 401).');
          // Dispara evento para que os contextos de autentica√ß√£o possam reagir (ex: fazer logout)
          window.dispatchEvent(new CustomEvent('auth-failed', { 
            detail: { 
              status: 401, 
              forAluno: url.startsWith('/api/aluno/'),
              forPersonalAdmin: !url.startsWith('/api/aluno/') // Indica se o token falhou para personal/admin
            } 
          }));
        }
        
        // Prioriza a mensagem de erro da API, se dispon√≠vel
        const errorMessage = data?.message || data?.mensagem || data?.erro || `Erro ${response.status}: ${response.statusText || 'Ocorreu um erro na comunica√ß√£o com o servidor.'}`;
        throw new Error(errorMessage);
      }
      return data as T;
  
    } catch (error) {
      // Log do erro j√° formatado ou erro de rede
      console.error(`[fetchWithAuth] Network or other error for ${fullUrl}:`, error);
      if (error instanceof Error) {
        throw error; 
      } else {
        // Captura qualquer outro tipo de erro e o converte para Error
        throw new Error('Erro desconhecido durante a requisi√ß√£o.');
      }
    }
  };
  
==== ./client/src/lib/handleApiError.ts ====

// client/src/lib/handleApiError.ts
// üëá REMOVIDO 'Toast' ou 'ShowToastProps' do import, pois n√£o √© usado aqui üëá
import { showToast } from '@/lib/toastUtils';

// Interface interna para tentar parsear a resposta de erro
interface ApiErrorResponse {
    message?: string;
    erro?: string;
    errors?: string[] | Record<string, { message: string }>;
}

/**
 * Processa um erro capturado de uma chamada API (fetch, axios, react-query).
 * Exibe um toast com uma mensagem de erro √∫til.
 *
 * @param error O objeto de erro capturado.
 * @param fallbackTitle T√≠tulo padr√£o para o toast se o erro n√£o fornecer um.
 */
export function handleApiError(error: unknown, fallbackTitle: string = "Erro Inesperado"): void {
    let title = fallbackTitle;
    let description = "Ocorreu um problema. Tente novamente mais tarde.";

    console.error("API Error:", error); // Loga o erro completo

    if (error instanceof Error) {
        try {
            // Tenta parsear como JSON apenas se parecer um JSON
             if (typeof error.message === 'string' && error.message.trim().startsWith('{')) {
                const errorJson = JSON.parse(error.message) as ApiErrorResponse;
                description = errorJson.message || errorJson.erro || description;
            } else if (typeof error.message === 'string') {
                 description = error.message; // Usa a mensagem direta se n√£o for JSON
            }
        } catch (parseError) {
            // Se n√£o for JSON, usa a mensagem de erro direta
           if (typeof error.message === 'string') {
               description = error.message;
           }
        }

        // Tenta extrair status da mensagem (se existir)
        const statusMatch = typeof error.message === 'string' ? error.message.match(/Erro (\d+):?/) : null;
        if (statusMatch?.[1]) { // Usa optional chaining
            title = `Erro ${statusMatch[1]}`;
            if (statusMatch[1] === '401') title = "N√£o Autorizado";
            else if (statusMatch[1] === '403') title = "Acesso Proibido";
            else if (statusMatch[1] === '404') title = "N√£o Encontrado";
            // Adicionar outros c√≥digos de status se necess√°rio
        }

    } else if (typeof error === 'string') {
        description = error;
    }

    // Chama a fun√ß√£o showToast importada
    showToast({
        title: title,
        description: description,
        variant: "destructive",
    });
}
==== ./client/src/lib/queryClient.ts ====

// client/src/lib/queryClient.ts
import { QueryClient, QueryFunction, QueryFunctionContext, QueryKey } from "@tanstack/react-query";
import { fetchWithAuth } from './apiClient'; // <<< IMPORTAR fetchWithAuth

// ... (fun√ß√£o throwIfResponseNotOk pode continuar como est√° ou ser simplificada se fetchWithAuth j√° tratar) ...
// Vamos assumir que fetchWithAuth j√° trata erros de resposta n√£o OK, ent√£o podemos simplificar.

// --- FUN√á√ÉO apiRequest MODIFICADA PARA USAR fetchWithAuth ---
export async function apiRequest<T = unknown>(
  method: string,
  url: string, // Espera-se um caminho relativo, ex: "/api/exercicios" ou "/api/exercicios/123"
  data?: unknown | undefined,
): Promise<T> {
  // Garante que a URL relativa comece com / (boa pr√°tica)
  const relativeUrl = url.startsWith('/') ? url : `/${url}`;
  console.log(`[apiRequest using fetchWithAuth] Usando caminho relativo: ${method} ${relativeUrl}`);

  const options: RequestInit = { method };

  if (data !== undefined) {
    // fetchWithAuth j√° adiciona Content-Type: application/json se houver body
    options.body = JSON.stringify(data);
  }

  try {
    // USA fetchWithAuth AQUI!
    // fetchWithAuth j√° lida com a URL base, token, Content-Type e erros de resposta.
    const responseData = await fetchWithAuth<T>(relativeUrl, options);
    return responseData;
  } catch (error) {
    console.error(`[apiRequest using fetchWithAuth] Erro na requisi√ß√£o: ${method} ${relativeUrl}`, error);
    throw error; // Re-lan√ßa para React Query ou chamador tratar
  }
}

export type FetchFnContext = QueryFunctionContext<QueryKey>;
type UnauthorizedBehavior = "returnNull" | "throw"; // Manter se quiser essa l√≥gica no getQueryFn

// --- FUN√á√ÉO getQueryFn MODIFICADA PARA USAR fetchWithAuth ---
export const getQueryFn = <T>(options?: { on401?: UnauthorizedBehavior }): QueryFunction<T | null> => {
  const unauthorizedBehavior = options?.on401 ?? "throw"; // Se quiser manter essa l√≥gica espec√≠fica de 401

  return async ({ queryKey, signal }: FetchFnContext): Promise<T | null> => {
    const relativeUrl = queryKey[0] as string;
    const finalUrl = relativeUrl.startsWith('/') ? relativeUrl : `/${relativeUrl}`;
    console.log(`[getQueryFn using fetchWithAuth] Usando caminho relativo: GET ${finalUrl}`);

    const requestOptions: RequestInit = {
      signal, // Para cancelamento
      method: 'GET', // getQueryFn √© geralmente para GET
    };

    try {
      // USA fetchWithAuth AQUI!
      const responseData = await fetchWithAuth<T>(finalUrl, requestOptions);
      return responseData;
    } catch (error: any) {
      // fetchWithAuth j√° lan√ßa erro. Se o token expirou, ele redireciona.
      // Podemos verificar se queremos a l√≥gica de unauthorizedBehavior aqui
      if (error.message?.includes('Sess√£o expirada') || (error.response && error.response.status === 401)) {
         if (unauthorizedBehavior === "returnNull") {
           console.warn(`[getQueryFn using fetchWithAuth] Resposta 401 (Unauthorized), retornando null para ${finalUrl}`);
           return null;
         }
      }
      console.error(`[getQueryFn using fetchWithAuth] Erro na requisi√ß√£o: GET ${finalUrl}`, error);
      throw error;
    }
  };
};

// Configura√ß√£o do React Query Client (permanece igual)
export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: 1000 * 60 * 5,
      retry: 1,
    },
    mutations: {
      retry: false,
    },
  },
});

// Definir a queryFn padr√£o (permanece igual, mas agora getQueryFn usa fetchWithAuth)
queryClient.setDefaultOptions({
    queries: {
        queryFn: getQueryFn({ on401: "throw" }),
    },
});
==== ./client/src/lib/toastUtils.ts ====

// client/src/lib/toastUtils.ts
import { toast as toastInternal } from "@/hooks/use-toast"; // Importa a fun√ß√£o interna do hook

// üëá Definindo o tipo aqui baseado nas props esperadas pela fun√ß√£o toast interna üëá
type ToastProps = Parameters<typeof toastInternal>[0];

// Fun√ß√£o para disparar toasts de fora de componentes React
export function showToast(props: ToastProps) { // Usa o tipo definido acima
  // Chama a fun√ß√£o toast interna exportada pelo hook
  toastInternal(props);
}

// Exporta o tipo para quem precisar usar showToast
export type { ToastProps as ShowToastProps }; // Exporta com um alias para evitar conflito se necess√°rio

// Exemplo de uso em handleApiError.ts:
// import { showToast, ShowToastProps } from '@/lib/toastUtils';
// const toastOptions: ShowToastProps = { title: "Erro", description: "Falha", variant: "destructive"};
// showToast(toastOptions);
==== ./client/src/lib/utils.ts ====

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

==== ./client/src/lib/validators/exerciseSchema.ts ====

import { z } from 'zod';

// Schema Zod para valida√ß√£o do formul√°rio de exerc√≠cios
export const exerciseFormSchema = z.object({
  nome: z.string()
    .min(3, { message: "O nome deve ter pelo menos 3 caracteres." })
    .max(100, { message: "O nome n√£o pode exceder 100 caracteres." })
    .trim(),
  grupoMuscular: z.string()
    .min(1, { message: "Selecione ou digite um grupo muscular." })
    .trim(),
  descricao: z.string()
    .max(1000, { message: "A descri√ß√£o n√£o pode exceder 1000 caracteres." })
    .trim()
    .optional(),
  categoria: z.string()
    .trim()
    .optional(),
  videoUrl: z.string()
    .url({ message: "Por favor, insira uma URL de v√≠deo v√°lida." })
    .trim()
    .optional()
    .or(z.literal('')),
  isCustom: z.boolean().default(false),
});

export type ExerciseFormData = z.infer<typeof exerciseFormSchema>;

export const gruposMuscularesOptions = [
  "Peito", "Costas", "Pernas", "Ombros", "B√≠ceps", "Tr√≠ceps", "Antebra√ßo", "Abd√¥men", "Lombar", "Gl√∫teos", "Panturrilha", "Cardio", "Corpo Inteiro", "Outro"
];

export const categoriasOptions = [
  "For√ßa", "Resist√™ncia", "Hipertrofia", "Pot√™ncia", "Cardiovascular", "Flexibilidade", "Mobilidade", "Funcional", "Calistenia", "Outro"
];

==== ./client/src/main.tsx ====

import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

// Disable React.StrictMode for now to avoid duplicate renders during development
createRoot(document.getElementById("root")!).render(<App />);
==== ./client/src/pages/admin/CriarPersonalPage.tsx ====

// client/src/pages/admin/CriarPersonalPage.tsx
import React from 'react';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { Loader2, UserPlus } from 'lucide-react';

// Schema de valida√ß√£o com Zod
const criarPersonalSchema = z.object({
  nome: z.string().min(3, { message: "O nome completo √© obrigat√≥rio (m√≠nimo 3 caracteres)." }),
  email: z.string().email({ message: "Por favor, insira um e-mail v√°lido." }),
  password: z.string().min(6, { message: "A senha deve ter pelo menos 6 caracteres." }),
  role: z.enum(["Personal Trainer", "Admin"], { required_error: "A fun√ß√£o √© obrigat√≥ria." }),
});

type CriarPersonalFormData = z.infer<typeof criarPersonalSchema>;

// Certifique-se de que esta linha existe e est√° correta
export default function CriarPersonalPage() {
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const {
    control,
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<CriarPersonalFormData>({
    resolver: zodResolver(criarPersonalSchema),
    defaultValues: {
      nome: "",
      email: "",
      password: "",
      role: "Personal Trainer",
    },
  });

  const onSubmit = async (data: CriarPersonalFormData) => {
    setIsSubmitting(true);
    console.log("Dados do formul√°rio para criar personal:", data);
    try {
      const novoPersonal = await apiRequest<any>("POST", "/api/admin/personal-trainers", data);
      toast({
        title: "Sucesso!",
        description: `Usu√°rio "${novoPersonal.nome}" (${novoPersonal.email}) criado com a fun√ß√£o de ${novoPersonal.role}.`,
      });
      reset(); 
    } catch (error: any) {
      console.error("Erro ao criar Personal Trainer:", error);
      toast({
        variant: "destructive",
        title: "Erro ao Criar Usu√°rio",
        description: error.response?.data?.mensagem || error.message || "Ocorreu um problema ao tentar criar o usu√°rio.",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container mx-auto py-10 px-4 flex flex-col items-center">
      <Card className="w-full max-w-2xl shadow-xl">
        <CardHeader className="text-center">
          <div className="flex justify-center items-center mb-3">
            <UserPlus className="h-10 w-10 text-primary" />
          </div>
          <CardTitle className="text-3xl font-bold">Criar Novo Usu√°rio</CardTitle>
          <CardDescription className="text-md text-muted-foreground">
            Preencha os dados abaixo para adicionar um novo Personal Trainer ou Administrador ao sistema.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="nome" className="font-semibold">Nome Completo</Label>
              <Input id="nome" placeholder="Ex: Jo√£o da Silva Pereira" {...register("nome")} />
              {errors.nome && <p className="text-sm font-medium text-destructive">{errors.nome.message}</p>}
            </div>

            <div className="space-y-2">
              <Label htmlFor="email" className="font-semibold">Endere√ßo de E-mail</Label>
              <Input id="email" type="email" placeholder="Ex: joao.silva@example.com" {...register("email")} />
              {errors.email && <p className="text-sm font-medium text-destructive">{errors.email.message}</p>}
            </div>

            <div className="space-y-2">
              <Label htmlFor="password">Senha Inicial</Label>
              <Input id="password" type="password" placeholder="M√≠nimo 6 caracteres" {...register("password")} />
              {errors.password && <p className="text-sm font-medium text-destructive">{errors.password.message}</p>}
            </div>

            <div className="space-y-2">
              <Label htmlFor="role" className="font-semibold">Fun√ß√£o (Role)</Label>
              <Controller
                name="role"
                control={control}
                render={({ field }) => (
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <SelectTrigger id="role" className="w-full">
                      <SelectValue placeholder="Selecione uma fun√ß√£o" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Personal Trainer">Personal Trainer</SelectItem>
                      <SelectItem value="Admin">Administrador</SelectItem>
                    </SelectContent>
                  </Select>
                )}
              />
              {errors.role && <p className="text-sm font-medium text-destructive">{errors.role.message}</p>}
            </div>

            <CardFooter className="px-0 pt-8">
              <Button type="submit" className="w-full text-lg py-6" disabled={isSubmitting}>
                {isSubmitting && <Loader2 className="mr-2 h-5 w-5 animate-spin" />}
                {isSubmitting ? "Criando Usu√°rio..." : "Criar Usu√°rio"}
              </Button>
            </CardFooter>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

==== ./client/src/pages/admin/GerenciarConvitesPage.tsx ====

/// <reference types="vite/client" /> 
// Localiza√ß√£o: client/src/pages/admin/GerenciarConvitesPage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  TableCaption,
} from "@/components/ui/table";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"; // Importar Tooltip
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from '@/lib/queryClient';
import { Copy, Check, Trash2, RefreshCw, Loader2 } from 'lucide-react';
import { format } from 'date-fns';
import { ptBR } from 'date-fns/locale';

interface ConviteCriadoResponse {
  mensagem: string;
  convite: ConviteDetalhes;
  linkConvite: string;
}

interface ConviteFormData {
  emailConvidado?: string;
  diasParaExpirar?: number;
  roleConvidado?: 'Personal Trainer' | 'Admin';
}

interface ConviteDetalhes {
  _id: string;
  token: string;
  emailConvidado?: string;
  roleConvidado: 'Personal Trainer' | 'Admin';
  status: 'pendente' | 'utilizado' | 'expirado';
  dataExpiracao?: string;
  criadoPor: string;
  usadoPor?: {
    _id: string;
    nome?: string;
    email?: string;
  } | null;
  dataUtilizacao?: string;
  createdAt: string;
  updatedAt: string;
}

const GerenciarConvitesPage: React.FC = () => {
  const [formData, setFormData] = useState<ConviteFormData>({
    emailConvidado: '',
    diasParaExpirar: 7,
    roleConvidado: 'Personal Trainer',
  });
  const [linkGerado, setLinkGerado] = useState<string | null>(null);
  const [isLoadingGeracao, setIsLoadingGeracao] = useState<boolean>(false);
  const [isCopiedForm, setIsCopiedForm] = useState<boolean>(false); 
  
  const [convites, setConvites] = useState<ConviteDetalhes[]>([]);
  const [isLoadingLista, setIsLoadingLista] = useState<boolean>(false);
  const [conviteParaRevogar, setConviteParaRevogar] = useState<ConviteDetalhes | null>(null);

  const { toast } = useToast();
  // Acessando vari√°veis de ambiente do Vite
  const frontendBaseUrl = import.meta.env.VITE_APP_BASE_URL || window.location.origin;

  const fetchConvites = useCallback(async () => {
    setIsLoadingLista(true);
    try {
      const data = await apiRequest<ConviteDetalhes[]>('GET', '/api/admin/convites/personal');
      setConvites(data);
    } catch (error: any) {
      toast({
        title: "Erro ao Buscar Convites",
        description: error.message || "N√£o foi poss√≠vel carregar a lista de convites.",
        variant: "destructive",
      });
    } finally {
      setIsLoadingLista(false);
    }
  }, [toast]);

  useEffect(() => {
    fetchConvites();
  }, [fetchConvites]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: name === 'diasParaExpirar' ? (value === '' ? undefined : Number(value)) : value,
    }));
  };

  const handleSubmitGerarConvite = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoadingGeracao(true);
    setLinkGerado(null);
    setIsCopiedForm(false);

    try {
      const payload: any = {
        roleConvidado: formData.roleConvidado || 'Personal Trainer',
      };
      if (formData.emailConvidado && formData.emailConvidado.trim() !== '') {
        payload.emailConvidado = formData.emailConvidado.trim();
      }
      if (formData.diasParaExpirar !== undefined && formData.diasParaExpirar > 0) {
        payload.diasParaExpirar = formData.diasParaExpirar;
      }

      const response = await apiRequest<ConviteCriadoResponse>('POST', '/api/admin/convites/personal', payload);
      
      setLinkGerado(response.linkConvite);
      toast({
        title: "Sucesso!",
        description: response.mensagem || "Convite criado e link gerado.",
      });
      fetchConvites(); 
    } catch (error: any) {
      const errorMessage = error.message || "Falha ao criar convite. Tente novamente.";
      toast({
        title: "Erro ao Criar Convite",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoadingGeracao(false);
    }
  };

  const handleCopyToClipboardForm = () => {
    if (linkGerado) {
      navigator.clipboard.writeText(linkGerado)
        .then(() => {
          setIsCopiedForm(true);
          toast({ description: "Link copiado para a √°rea de transfer√™ncia!" });
          setTimeout(() => setIsCopiedForm(false), 2000);
        })
        .catch(err => {
          toast({ description: "Erro ao copiar o link.", variant: "destructive" });
        });
    }
  };

  const handleRevogarConvite = async () => {
    if (!conviteParaRevogar) return;
    setIsLoadingGeracao(true); 
    try {
      await apiRequest('DELETE', `/api/admin/convites/personal/${conviteParaRevogar._id}`);
      toast({
        title: "Convite Revogado",
        description: `O convite para ${conviteParaRevogar.emailConvidado || 'convidado gen√©rico'} foi revogado.`,
      });
      fetchConvites(); 
    } catch (error: any) {
      toast({
        title: "Erro ao Revogar Convite",
        description: error.message || "N√£o foi poss√≠vel revogar o convite.",
        variant: "destructive",
      });
    } finally {
      setIsLoadingGeracao(false);
      setConviteParaRevogar(null); 
    }
  };

  const formatarData = (dataISO?: string) => {
    if (!dataISO) return 'N/A';
    try {
      return format(new Date(dataISO), "dd/MM/yyyy '√†s' HH:mm", { locale: ptBR });
    } catch (e) {
      return 'Data inv√°lida';
    }
  };

  const getStatusBadge = (status: ConviteDetalhes['status']) => {
    switch (status) {
      case 'pendente':
        return <span className="px-2 py-1 text-xs font-semibold text-yellow-800 bg-yellow-100 rounded-full dark:bg-yellow-700 dark:text-yellow-100">Pendente</span>;
      case 'utilizado':
        return <span className="px-2 py-1 text-xs font-semibold text-green-800 bg-green-100 rounded-full dark:bg-green-700 dark:text-green-100">Utilizado</span>;
      case 'expirado':
        return <span className="px-2 py-1 text-xs font-semibold text-red-800 bg-red-100 rounded-full dark:bg-red-700 dark:text-red-100">Expirado</span>;
      default:
        return <span className="px-2 py-1 text-xs font-semibold text-gray-800 bg-gray-100 rounded-full dark:bg-gray-700 dark:text-gray-100">{status}</span>;
    }
  };

  return (
    <TooltipProvider> 
      <div className="container mx-auto p-4 md:p-6 lg:p-8 space-y-8">
        <h1 className="text-3xl font-bold text-center text-gray-800 dark:text-gray-100 mb-8">
          Gerenciamento de Convites para Personais
        </h1>

        <Card className="max-w-2xl mx-auto shadow-xl border dark:border-gray-700">
          <CardHeader>
            <CardTitle className="text-xl font-semibold text-center">Gerar Novo Convite</CardTitle>
            <CardDescription className="text-center text-sm text-muted-foreground">
              Crie um link de convite para novos personais se cadastrarem.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmitGerarConvite} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="emailConvidado">Email do Convidado (Opcional)</Label>
                <Input id="emailConvidado" name="emailConvidado" type="email" placeholder="exemplo@email.com" value={formData.emailConvidado || ''} onChange={handleChange} className="bg-background" />
                <p className="text-xs text-muted-foreground">Se preenchido, o convite ser√° espec√≠fico para este email.</p>
              </div>
              <div className="space-y-2">
                <Label htmlFor="diasParaExpirar">Validade do Convite (em dias)</Label>
                <Input id="diasParaExpirar" name="diasParaExpirar" type="number" min="1" placeholder="7" value={formData.diasParaExpirar || ''} onChange={handleChange} className="bg-background" />
                <p className="text-xs text-muted-foreground">Padr√£o: 7 dias. Deixe em branco para usar o padr√£o do servidor.</p>
              </div>
              <div className="space-y-2">
                <Label htmlFor="roleConvidado">Tipo de Usu√°rio</Label>
                <select id="roleConvidado" name="roleConvidado" value={formData.roleConvidado || 'Personal Trainer'} onChange={handleChange} className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
                  <option value="Personal Trainer">Personal Trainer</option>
                  <option value="Admin">Administrador</option>
                </select>
              </div>
              <Button type="submit" className="w-full font-semibold" disabled={isLoadingGeracao}>
                {isLoadingGeracao ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                {isLoadingGeracao ? 'Gerando...' : 'Gerar Convite'}
              </Button>
            </form>
          </CardContent>
          {linkGerado && (
            <CardFooter className="flex flex-col items-center space-y-3 pt-5 border-t dark:border-gray-700">
              <p className="text-sm font-medium text-center">Link de Convite Gerado:</p>
              <div className="flex w-full max-w-md items-center space-x-2 p-2 border rounded-md bg-muted dark:bg-gray-800">
                <Input type="text" value={linkGerado} readOnly className="flex-grow bg-transparent border-none focus:ring-0 text-sm" />
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button variant="ghost" size="icon" onClick={handleCopyToClipboardForm} aria-label="Copiar link gerado">
                      {isCopiedForm ? <Check className="h-5 w-5 text-green-500" /> : <Copy className="h-5 w-5" />}
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Copiar link</p>
                  </TooltipContent>
                </Tooltip>
              </div>
              <p className="text-xs text-muted-foreground text-center">Envie este link para o personal.</p>
            </CardFooter>
          )}
        </Card>

        <Card className="shadow-xl border dark:border-gray-700">
          <CardHeader className="flex flex-row items-center justify-between pb-4">
            <div>
              <CardTitle className="text-xl font-semibold">Convites Enviados</CardTitle>
              <CardDescription className="text-sm text-muted-foreground">Lista de todos os convites gerados.</CardDescription>
            </div>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="outline" size="icon" onClick={fetchConvites} disabled={isLoadingLista} aria-label="Atualizar lista de convites">
                  {isLoadingLista ? <Loader2 className="h-4 w-4 animate-spin" /> : <RefreshCw className="h-4 w-4" />}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Atualizar lista</p>
              </TooltipContent>
            </Tooltip>
          </CardHeader>
          <CardContent>
            {isLoadingLista && convites.length === 0 && (
              <div className="flex justify-center items-center py-10 text-muted-foreground">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <p className="ml-3 text-sm">Carregando convites...</p>
              </div>
            )}
            {!isLoadingLista && convites.length === 0 && (
              <p className="text-center text-muted-foreground py-10 text-sm">Nenhum convite encontrado.</p>
            )}
            {convites.length > 0 && (
              <div className="overflow-x-auto">
                <Table>
                  <TableCaption className="mt-4">Um total de {convites.length} convite(s) encontrado(s).</TableCaption>
                  <TableHeader>
                    <TableRow>
                      <TableHead className="min-w-[200px]">Email Convidado</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead className="min-w-[150px]">Expira Em</TableHead>
                      <TableHead className="min-w-[200px]">Utilizado Por</TableHead>
                      <TableHead className="min-w-[200px]">Link</TableHead>
                      <TableHead className="text-right">A√ß√µes</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {convites.map((convite) => (
                      <TableRow key={convite._id}>
                        <TableCell className="font-medium text-sm">{convite.emailConvidado || <span className="italic text-gray-500 dark:text-gray-400">Qualquer email</span>}</TableCell>
                        <TableCell>{getStatusBadge(convite.status)}</TableCell>
                        <TableCell className="text-sm">{formatarData(convite.dataExpiracao)}</TableCell>
                        <TableCell className="text-sm">
                          {convite.usadoPor ? 
                            `${convite.usadoPor.nome || 'Nome n√£o disp.'} (${convite.usadoPor.email || 'Email n√£o disp.'})` : 
                            <span className="italic text-gray-500 dark:text-gray-400">Ningu√©m</span>
                          }
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center">
                            <Input 
                              type="text" 
                              value={`${frontendBaseUrl}/cadastrar-personal/convite/${convite.token}`} 
                              readOnly 
                              className="text-xs p-1 h-8 bg-transparent border-none focus:ring-0 mr-1 truncate flex-grow"
                              title={`${frontendBaseUrl}/cadastrar-personal/convite/${convite.token}`}
                            />
                            <Tooltip>
                              <TooltipTrigger asChild>
                                <Button 
                                  variant="ghost" 
                                  size="icon" 
                                  className="h-8 w-8"
                                  onClick={() => navigator.clipboard.writeText(`${frontendBaseUrl}/cadastrar-personal/convite/${convite.token}`).then(() => toast({description: "Link do convite copiado!"}))}
                                  aria-label="Copiar link do convite"
                                >
                                  <Copy className="h-4 w-4" />
                                </Button>
                              </TooltipTrigger>
                              <TooltipContent><p>Copiar link</p></TooltipContent>
                            </Tooltip>
                          </div>
                        </TableCell>
                        <TableCell className="text-right">
                          {convite.status === 'pendente' && (
                            <AlertDialog>
                              <AlertDialogTrigger asChild>
                                <Button variant="destructive" size="sm" onClick={() => setConviteParaRevogar(convite)}>
                                  <Trash2 className="h-4 w-4 mr-1" />
                                  Revogar
                                </Button>
                              </AlertDialogTrigger>
                              <AlertDialogContent>
                                <AlertDialogHeader>
                                  <AlertDialogTitle>Confirmar Revoga√ß√£o</AlertDialogTitle>
                                  <AlertDialogDescription>
                                    Tem certeza que deseja revogar este convite? Esta a√ß√£o n√£o poder√° ser desfeita.
                                    {conviteParaRevogar?.emailConvidado && ` O convite para ${conviteParaRevogar.emailConvidado} ser√° invalidado.`}
                                  </AlertDialogDescription>
                                </AlertDialogHeader>
                                <AlertDialogFooter>
                                  <AlertDialogCancel onClick={() => setConviteParaRevogar(null)}>Cancelar</AlertDialogCancel>
                                  <AlertDialogAction onClick={handleRevogarConvite} disabled={isLoadingGeracao} className="bg-destructive hover:bg-destructive/90">
                                    {isLoadingGeracao ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                                    Revogar
                                  </AlertDialogAction>
                                </AlertDialogFooter>
                              </AlertDialogContent>
                            </AlertDialog>
                          )}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </TooltipProvider>
  );
};

export default GerenciarConvitesPage;

==== ./client/src/pages/admin/ListarPersonaisPage.tsx ====

// client/src/pages/admin/ListarPersonaisPage.tsx
import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { Button } from '@/components/ui/button';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { MoreHorizontal, Trash2, Edit, Eye, Loader2, ShieldCheck, UserCog, UserPlus } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import LoadingSpinner from '@/components/LoadingSpinner';
import ErrorMessage from '@/components/ErrorMessage';
import { Link } from 'wouter';
import VisualizarPersonalModal from '@/components/dialogs/admin/VisualizarPersonalModal';
// ***** CAMINHO DO IMPORT CORRIGIDO *****
import { PersonalListadoItem, PersonalDetalhes } from '@shared/types/personal'; 

export default function ListarPersonaisPage() {
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [personalParaExcluir, setPersonalParaExcluir] = useState<PersonalListadoItem | null>(null);
  const [isConfirmDeleteOpen, setIsConfirmDeleteOpen] = useState(false);

  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [personalParaVisualizar, setPersonalParaVisualizar] = useState<PersonalDetalhes | null>(null);
  const [isLoadingPersonalDetails, setIsLoadingPersonalDetails] = useState(false);

  const { data: personais, isLoading, isError, error: queryError } = useQuery<PersonalListadoItem[], Error>({
    queryKey: ['adminPersonalTrainersList'],
    queryFn: () => apiRequest<PersonalListadoItem[]>("GET", "/api/admin/personal-trainers"),
    retry: 1,
  });

  const deletePersonalMutation = useMutation<any, Error, string>({
    mutationFn: (personalId: string) => apiRequest("DELETE", `/api/admin/personal-trainers/${personalId}`),
    onSuccess: (data) => {
      toast({ title: "Sucesso!", description: data.mensagem || "Personal trainer exclu√≠do." });
      queryClient.invalidateQueries({ queryKey: ['adminPersonalTrainersList'] });
    },
    onError: (err) => {
      toast({ variant: "destructive", title: "Erro ao Excluir", description: err.message || "N√£o foi poss√≠vel excluir o personal trainer." });
    },
    onSettled: () => {
      setPersonalParaExcluir(null);
      setIsConfirmDeleteOpen(false);
    }
  });

  const handleExcluirClick = (personal: PersonalListadoItem) => {
    setPersonalParaExcluir(personal);
    setIsConfirmDeleteOpen(true);
  };

  const confirmarExclusao = () => {
    if (personalParaExcluir) {
      deletePersonalMutation.mutate(personalParaExcluir._id);
    }
  };

  const handleVisualizarClick = async (personalId: string) => {
    setIsLoadingPersonalDetails(true);
    setPersonalParaVisualizar(null); 
    setIsViewModalOpen(true);
    try {
      const data = await apiRequest<PersonalDetalhes>("GET", `/api/admin/personal-trainers/${personalId}`);
      setPersonalParaVisualizar(data);
    } catch (err: any) {
      toast({ variant: "destructive", title: "Erro ao buscar detalhes", description: err.message || "N√£o foi poss√≠vel carregar os dados do personal." });
      setIsViewModalOpen(false);
    } finally {
      setIsLoadingPersonalDetails(false);
    }
  };

  if (isLoading) return <div className="flex h-[calc(100vh-150px)] items-center justify-center"><LoadingSpinner text="Carregando lista de personais..." /></div>;
  if (queryError) return <ErrorMessage title="Erro ao Carregar Personais" message={queryError?.message || "N√£o foi poss√≠vel buscar a lista de personais."} />;

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-800 dark:text-gray-100 flex items-center">
          <UserCog className="mr-3 h-8 w-8 text-primary" />
          Gerenciar Personais
        </h1>
        <Link href="/admin/criar-personal">
          <Button>
            <UserPlus className="mr-2 h-4 w-4" />
            Criar Novo Personal
          </Button>
        </Link>
      </div>

      {personais && personais.length > 0 ? (
        <div className="border rounded-lg shadow-sm overflow-hidden dark:border-gray-700">
          <Table>
            <TableHeader className="bg-gray-50 dark:bg-gray-800">
              <TableRow>
                <TableHead className="w-[250px] font-semibold text-gray-700 dark:text-gray-300">Nome</TableHead>
                <TableHead className="font-semibold text-gray-700 dark:text-gray-300">Email</TableHead>
                <TableHead className="font-semibold text-gray-700 dark:text-gray-300">Fun√ß√£o (Role)</TableHead>
                <TableHead className="font-semibold text-gray-700 dark:text-gray-300">Data de Cria√ß√£o</TableHead>
                <TableHead className="text-right font-semibold text-gray-700 dark:text-gray-300">A√ß√µes</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {personais.map((personal) => (
                <TableRow key={personal._id} className="dark:border-gray-700 hover:bg-gray-50/50 dark:hover:bg-gray-700/30">
                  <TableCell className="font-medium text-gray-900 dark:text-gray-100">{personal.nome}</TableCell>
                  <TableCell className="text-gray-600 dark:text-gray-300">{personal.email}</TableCell>
                  <TableCell>
                    <Badge variant={personal.role === 'Admin' ? 'destructive' : 'outline'}
                           className={`font-medium ${personal.role === 'Admin' ? 
                                      'border-red-500 text-red-600 bg-red-100 dark:bg-red-900/60 dark:text-red-300 dark:border-red-700' : 
                                      'border-blue-500 text-blue-600 bg-blue-100 dark:bg-sky-900/60 dark:text-sky-300 dark:border-sky-700'}`}>
                        {personal.role === 'Admin' && <ShieldCheck className="mr-1.5 h-3.5 w-3.5" />}
                        {personal.role}
                    </Badge>
                  </TableCell>
                  <TableCell className="text-gray-600 dark:text-gray-300">
                    {new Date(personal.createdAt).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' })}
                  </TableCell>
                  <TableCell className="text-right">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0">
                          <span className="sr-only">Abrir menu</span>
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuLabel>A√ß√µes</DropdownMenuLabel>
                        <DropdownMenuItem onClick={() => handleVisualizarClick(personal._id)}>
                          <Eye className="mr-2 h-4 w-4" /> Visualizar
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => alert(`Funcionalidade Editar para: ${personal.nome} (n√£o implementada)`)} >
                           <Edit className="mr-2 h-4 w-4" /> Editar
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem
                          onClick={() => handleExcluirClick(personal)}
                          className="text-red-600 focus:text-red-600 focus:bg-red-50 dark:text-red-500 dark:focus:text-red-400 dark:focus:bg-red-900/50"
                          disabled={deletePersonalMutation.isPending && personalParaExcluir?._id === personal._id}
                        >
                          {deletePersonalMutation.isPending && personalParaExcluir?._id === personal._id ? (
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          ) : (
                            <Trash2 className="mr-2 h-4 w-4" />
                          )}
                          Excluir
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      ) : (
        <p className="text-center py-10 text-gray-500 dark:text-gray-400">Nenhum personal trainer encontrado.</p>
      )}

      <AlertDialog open={isConfirmDeleteOpen} onOpenChange={setIsConfirmDeleteOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Confirmar Exclus√£o</AlertDialogTitle>
            <AlertDialogDescription>
              Tem certeza que deseja excluir o personal trainer "{personalParaExcluir?.nome}" ({personalParaExcluir?.email})? Esta a√ß√£o n√£o pode ser desfeita.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setIsConfirmDeleteOpen(false)} disabled={deletePersonalMutation.isPending}>
              Cancelar
            </AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmarExclusao}
              disabled={deletePersonalMutation.isPending}
              className="bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-800"
            >
              {deletePersonalMutation.isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              Confirmar Exclus√£o
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      <VisualizarPersonalModal
        isOpen={isViewModalOpen}
        onClose={() => {
          setIsViewModalOpen(false);
          setPersonalParaVisualizar(null);
        }}
        personal={personalParaVisualizar}
        isLoading={isLoadingPersonalDetails}
      />
    </div>
  );
}

==== ./client/src/pages/alunos/AlunoDashboardPage.tsx ====

// client/src/pages/alunos/AlunoDashboardPage.tsx
import React from 'react';
import { useAluno } from '@/context/AlunoContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { Loader2, ListChecks, Eye, AlertTriangle, CalendarClock, PlayCircle, ChevronRight } from 'lucide-react'; // Removido Dumbbell se n√£o usado diretamente no JSX desta p√°gina
import { Link as WouterLink, useLocation } from 'wouter';
import { format, parseISO, isToday, isTomorrow, formatRelative } from 'date-fns';
import { ptBR } from 'date-fns/locale';

import FrequenciaSemanal from '@/components/alunos/FrequenciaSemanal';

// --- Interfaces ATUALIZADAS para refletir a estrutura da ROTINA ---
interface ExercicioDetalhePopulado {
  _id: string;
  nome: string;
  grupoMuscular?: string;
  urlVideo?: string;
  descricao?: string;
  categoria?: string;
  tipo?: string;
}

interface ExercicioEmDiaDeTreinoPopulado {
  _id: string;
  exercicioId: ExercicioDetalhePopulado | string; 
  series?: string;
  repeticoes?: string;
  carga?: string;
  descanso?: string;
  observacoes?: string;
  ordemNoDia: number;
  concluido?: boolean;
}

interface DiaDeTreinoPopulado {
  _id: string;
  identificadorDia: string;
  nomeSubFicha?: string;
  ordemNaRotina: number;
  exerciciosDoDia: ExercicioEmDiaDeTreinoPopulado[];
}

interface RotinaDeTreinoAluno {
  _id: string;
  titulo: string;
  descricao?: string;
  tipo: "modelo" | "individual"; 
  alunoId?: { _id: string; nome: string; email?: string; } | string | null;
  criadorId?: { _id: string; nome: string; email?: string; } | string;
  tipoOrganizacaoRotina: 'diasDaSemana' | 'numerico' | 'livre';
  diasDeTreino: DiaDeTreinoPopulado[]; 
  pastaId?: { _id: string; nome: string; } | string | null;
  statusModelo?: "ativo" | "rascunho" | "arquivado";
  ordemNaPasta?: number;
  dataValidade?: string | null; 
  totalSessoesRotinaPlanejadas?: number | null;
  sessoesRotinaConcluidas: number;
  criadoEm: string; 
  atualizadoEm?: string; 
  isExpirada?: boolean; 
  progressoRotina?: string; 
}

interface SessaoConcluidaParaFrequencia {
  _id: string;
  sessionDate: string | Date;
  tipoCompromisso?: string;
}

interface SessaoAgendada {
  _id: string;
  sessionDate: string;
  status: 'pending' | 'confirmed';
  tipoCompromisso: string;
  notes?: string;
  rotinaId?: { _id: string; titulo: string; } | null; 
  diaDeTreinoId?: string | null; 
  diaDeTreinoIdentificador?: string | null; 
  personalId?: { _id: string; nome: string; } | null; 
}

const AlunoDashboardPage: React.FC = () => {
  const { aluno, logoutAluno, tokenAluno } = useAluno();
  const [, navigate] = useLocation();

  const {
    data: minhasRotinas, 
    isLoading: isLoadingRotinas, 
    error: errorRotinas, 
  } = useQuery<RotinaDeTreinoAluno[], Error>({ 
    queryKey: ['minhasRotinasAluno', aluno?.id], 
    queryFn: async () => {
      if (!aluno?.id) throw new Error("Aluno n√£o autenticado para buscar rotinas.");
      return apiRequest<RotinaDeTreinoAluno[]>('GET', '/api/aluno/meus-treinos');
    },
    enabled: !!aluno && !!tokenAluno,
    staleTime: 1000 * 60 * 5,
  });

  const {
    data: sessoesConcluidasNaSemana,
    isLoading: isLoadingFrequencia,
    error: errorFrequencia,
  } = useQuery<SessaoConcluidaParaFrequencia[], Error>({
    queryKey: ['frequenciaSemanalAluno', aluno?.id],
    queryFn: async () => {
      if (!aluno?.id) throw new Error("Aluno n√£o autenticado para buscar frequ√™ncia.");
      return apiRequest<SessaoConcluidaParaFrequencia[]>('GET', '/api/aluno/minhas-sessoes-concluidas-na-semana');
    },
    enabled: !!aluno && !!tokenAluno,
    staleTime: 1000 * 60 * 1,
  });

  const {
    data: sessoesAgendadas,
    isLoading: isLoadingSessoesAgendadas,
    error: errorSessoesAgendadas,
  } = useQuery<SessaoAgendada[], Error>({
    queryKey: ['sessoesAgendadasAluno', aluno?.id],
    queryFn: async () => {
      if (!aluno?.id) throw new Error("Aluno n√£o autenticado para buscar sess√µes agendadas.");
      return apiRequest<SessaoAgendada[]>('GET', '/api/aluno/minhas-sessoes-agendadas');
    },
    enabled: !!aluno && !!tokenAluno,
    staleTime: 1000 * 60 * 2,
  });

  const formatarDataSimples = (dataISO?: string): string => {
    if (!dataISO) return 'N/A';
    try { return format(parseISO(dataISO), "dd/MM/yyyy", { locale: ptBR }); }
    catch (e) { return 'Data inv√°lida'; }
  };
  
  const formatarDataHoraSessao = (dataISO?: string): string => {
    if (!dataISO) return 'N/A';
    try {
      const data = parseISO(dataISO);
      if (isToday(data)) return `Hoje √†s ${format(data, 'HH:mm')}`;
      if (isTomorrow(data)) return `Amanh√£ √†s ${format(data, 'HH:mm')}`;
      const relativo = formatRelative(data, new Date(), { locale: ptBR });
      return relativo.charAt(0).toUpperCase() + relativo.slice(1) + ` (${format(data, 'HH:mm')})`;
    } catch (e) { return 'Data/hora inv√°lida'; }
  };

  if (isLoadingRotinas || isLoadingFrequencia || (isLoadingSessoesAgendadas && !sessoesAgendadas && !aluno)) {
    return (
      <div className="flex h-screen w-full items-center justify-center">
        <Loader2 className="h-10 w-10 animate-spin text-primary" />
        <span className="ml-3">A carregar dados do aluno...</span>
      </div>
    );
  }
  
  if (!aluno && !tokenAluno) {
      return (
          <div className="flex h-screen w-full items-center justify-center">
              <p>Sess√£o inv√°lida ou expirada. Por favor, <WouterLink href="/aluno/login" className="text-primary hover:underline">fa√ßa login</WouterLink> novamente.</p>
          </div>
      );
  }

  return (
    <div className="container mx-auto p-4 md:p-6 lg:p-8 space-y-8">
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-800 dark:text-gray-100">Painel do Aluno</h1>
          {aluno && (<p className="text-lg text-muted-foreground">Bem-vindo(a) de volta, {aluno.nome || aluno.email}!</p>)}
        </div>
        <Button variant="outline" onClick={logoutAluno} className="w-full sm:w-auto">Sair</Button>
      </div>

      <FrequenciaSemanal 
        sessoesConcluidasNaSemana={sessoesConcluidasNaSemana || []}
        isLoading={isLoadingFrequencia}
        error={errorFrequencia}
      />

      <Card className="shadow-md">
        <CardHeader>
          <CardTitle className="flex items-center text-lg">
            <CalendarClock className="w-5 h-5 mr-2 text-primary" />
            Meus Pr√≥ximos Treinos
          </CardTitle>
          <CardDescription>Seus treinos e compromissos agendados.</CardDescription>
        </CardHeader>
        <CardContent>
          {isLoadingSessoesAgendadas && ( 
            <div className="flex justify-center items-center py-6">
              <Loader2 className="h-6 w-6 animate-spin text-primary" />
              <p className="ml-2 text-sm text-muted-foreground">Carregando treinos agendados...</p>
            </div>
          )}
          {errorSessoesAgendadas && ( 
            <div className="text-red-500 p-3 bg-red-50 dark:bg-red-900/20 rounded-md text-sm flex items-center">
              <AlertTriangle className="inline w-4 h-4 mr-2 shrink-0" /> 
              <span>Erro ao carregar treinos agendados: {errorSessoesAgendadas.message}</span>
            </div>
          )}
          {!isLoadingSessoesAgendadas && !errorSessoesAgendadas && (!sessoesAgendadas || sessoesAgendadas.length === 0) && (
            <p className="text-sm text-muted-foreground text-center py-6">Voc√™ n√£o tem nenhum treino ou compromisso programado.</p>
          )}
          {!isLoadingSessoesAgendadas && !errorSessoesAgendadas && sessoesAgendadas && sessoesAgendadas.length > 0 && (
            <div className="space-y-4">
              {sessoesAgendadas.map((sessao) => (
                <Card key={sessao._id} className="bg-slate-50 dark:bg-slate-800/60 hover:shadow-lg transition-shadow">
                  <CardContent className="pt-4 space-y-2">
                    <div className="flex justify-between items-start">
                      <div>
                        <p className="font-semibold text-md">
                          {sessao.rotinaId?.titulo ? `Rotina: ${sessao.rotinaId.titulo}` : sessao.tipoCompromisso.replace('_', ' ')}
                          {sessao.diaDeTreinoIdentificador && ` - Dia: ${sessao.diaDeTreinoIdentificador}`}
                        </p>
                        <p className="text-xs text-muted-foreground">
                          {formatarDataHoraSessao(sessao.sessionDate)}
                        </p>
                      </div>
                      {sessao.rotinaId && sessao.diaDeTreinoId && (
                        <WouterLink href={`/aluno/rotina/${sessao.rotinaId._id}/dia/${sessao.diaDeTreinoId}?sessaoId=${sessao._id}`}>
                          <Button size="sm" variant="default">
                            <PlayCircle className="w-4 h-4 mr-2" />
                            Iniciar Treino
                          </Button>
                        </WouterLink>
                      )}
                    </div>
                    {sessao.notes && <p className="text-xs text-muted-foreground italic">Nota: {sessao.notes}</p>}
                     <p className="text-xs">
                      <span className={`capitalize px-2 py-0.5 rounded-full text-xs font-medium ${
                        sessao.status === 'confirmed' ? 'bg-green-100 text-green-700 dark:bg-green-800/50 dark:text-green-300' : 
                        sessao.status === 'pending' ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-800/50 dark:text-yellow-300' :
                        'bg-gray-100 text-gray-700 dark:bg-gray-700/50 dark:text-gray-300'
                      }`}>
                        {sessao.status === 'pending' ? 'Pendente' : sessao.status === 'confirmed' ? 'Confirmado' : sessao.status}
                      </span>
                      {sessao.personalId?.nome && (
                        <span className="text-muted-foreground"> por {sessao.personalId.nome}</span>
                      )}
                    </p>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* SE√á√ÉO MINHAS ROTINAS DE TREINO */}
      <Card className="shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center"><ListChecks className="w-6 h-6 mr-3 text-primary" />Minhas Rotinas de Treino</CardTitle>
          <CardDescription>Seus programas de treino ativos e recentes.</CardDescription>
        </CardHeader>
        <CardContent>
          {isLoadingRotinas && ( 
            <div className="flex justify-center items-center py-10">
              <Loader2 className="h-8 w-8 animate-spin text-primary" />
              <p className="ml-3 text-sm text-muted-foreground">A carregar suas rotinas...</p>
            </div>
          )}
          {errorRotinas && ( 
            <div className="text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 p-4 rounded-md flex items-center">
              <AlertTriangle className="w-5 h-5 mr-2" />
              <span>Erro ao carregar rotinas: {errorRotinas.message}</span>
            </div>
          )}
          {!isLoadingRotinas && !errorRotinas && (!minhasRotinas || minhasRotinas.length === 0) && (
            <p className="text-sm text-muted-foreground text-center py-10">Voc√™ ainda n√£o tem nenhuma rotina de treino atribu√≠da.</p>
          )}
          {!isLoadingRotinas && !errorRotinas && minhasRotinas && minhasRotinas.length > 0 && (
            <div className="space-y-6">
              {minhasRotinas.map((rotina) => (
                <Card key={rotina._id} className="bg-slate-50 dark:bg-slate-800/50">
                  <CardHeader>
                    <CardTitle className="text-xl">{rotina.titulo}</CardTitle>
                    {rotina.descricao && <CardDescription>{rotina.descricao}</CardDescription>}
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <div className="flex justify-between items-center text-xs text-muted-foreground">
                        <span>Criada por: {typeof rotina.criadorId === 'object' && rotina.criadorId?.nome ? rotina.criadorId.nome : 'Personal'}</span>
                        <span>Atualizada: {formatarDataSimples(rotina.atualizadoEm || rotina.criadoEm)}</span>
                      </div>
                      {rotina.totalSessoesRotinaPlanejadas !== undefined && rotina.totalSessoesRotinaPlanejadas !== null ? (
                        <div>
                          <div className="flex justify-between items-center mb-1">
                            <p className="text-sm">
                              Progresso: <strong>{rotina.sessoesRotinaConcluidas}</strong> de <strong>{rotina.totalSessoesRotinaPlanejadas}</strong> sess√µes
                            </p>
                            {/* CORRE√á√ÉO: Removido ¬† e garantido que calculo √© feito ou usa 0 */}
                            <span className="text-sm font-semibold text-primary">
                              {rotina.progressoRotina && rotina.progressoRotina.includes('/') ? 
                                `${(parseFloat(rotina.progressoRotina.split('/')[0]) / parseFloat(rotina.progressoRotina.split('/')[1]) * 100).toFixed(0)}%` 
                                : (rotina.totalSessoesRotinaPlanejadas === 0 && rotina.sessoesRotinaConcluidas === 0 ? 'N/A' : '0%')
                              }
                            </span>
                          </div>
                          <Progress 
                            value={rotina.totalSessoesRotinaPlanejadas && rotina.totalSessoesRotinaPlanejadas > 0 ? (rotina.sessoesRotinaConcluidas / rotina.totalSessoesRotinaPlanejadas) * 100 : 0} 
                            className="h-2" 
                          />
                        </div>
                      ) : rotina.dataValidade ? (
                        <p className="text-sm text-muted-foreground">
                          V√°lida at√©: {formatarDataSimples(rotina.dataValidade)}
                          {rotina.isExpirada && <span className="ml-2 text-red-500">(Expirada)</span>}
                        </p>
                      ) : (
                        <p className="text-sm text-muted-foreground italic">Esta rotina n√£o tem validade definida.</p>
                      )}

                      {rotina.diasDeTreino && rotina.diasDeTreino.length > 0 && (
                        <div className="mt-4 pt-3 border-t dark:border-gray-700">
                          <h4 className="text-md font-semibold mb-2 text-gray-700 dark:text-gray-300">Dias de Treino:</h4>
                          <Accordion type="multiple" className="w-full space-y-2">
                            {rotina.diasDeTreino.sort((a,b) => a.ordemNaRotina - b.ordemNaRotina).map((dia, index) => (
                              <AccordionItem key={dia._id || `dia-${index}`} value={dia._id || `dia-item-${index}`} className="border dark:border-gray-600 rounded-md">
                                <AccordionTrigger className="px-4 py-3 hover:no-underline text-sm">
                                  <div className="flex items-center justify-between w-full">
                                    <span className="font-medium text-gray-800 dark:text-gray-200">
                                      {dia.identificadorDia}{dia.nomeSubFicha ? `: ${dia.nomeSubFicha}` : ''}
                                    </span>
                                    <ChevronRight className="h-4 w-4 text-muted-foreground transition-transform duration-200 group-data-[state=open]:rotate-90" />
                                  </div>
                                </AccordionTrigger>
                                <AccordionContent className="px-4 pb-3 pt-0">
                                  <div className="text-xs text-muted-foreground space-y-1 pt-2 border-t dark:border-gray-700">
                                    {dia.exerciciosDoDia.length > 0 ?
                                      dia.exerciciosDoDia.sort((a,b) => a.ordemNoDia - b.ordemNoDia).map(ex => (
                                        <p key={ex._id || (typeof ex.exercicioId === 'object' && ex.exercicioId?._id) || (ex.exercicioId as string) || `ex-${Math.random()}`}>
                                          {/* CORRE√á√ÉO: Removido ¬† */}
                                          - {typeof ex.exercicioId === 'object' && ex.exercicioId !== null ? ex.exercicioId.nome : 'Exerc√≠cio n√£o carregado'}
                                          {(ex.series || ex.repeticoes) && ` (${ex.series || '?'}/${ex.repeticoes || '?'})`}
                                        </p>
                                      ))
                                      : <p className="italic">Nenhum exerc√≠cio neste dia.</p>
                                    }
                                  </div>
                                  <Button 
                                      size="sm" 
                                      className="mt-3 w-full sm:w-auto"
                                      onClick={() => navigate(`/aluno/rotina/${rotina._id}/dia/${dia._id}`)}
                                  >
                                    <PlayCircle className="w-4 h-4 mr-2" />
                                    Iniciar Treino do Dia
                                  </Button>
                                </AccordionContent>
                              </AccordionItem>
                            ))}
                          </Accordion>
                        </div>
                      )}
                    </div>
                  </CardContent>
                  <CardFooter className="flex justify-end">
                    <WouterLink href={`/aluno/rotina/${rotina._id}`}>
                      <Button className="w-full sm:w-auto"><Eye className="w-4 h-4 mr-2" />Ver Detalhes da Rotina</Button>
                    </WouterLink>
                  </CardFooter>
                </Card>
              ))}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default AlunoDashboardPage;
==== ./client/src/pages/alunos/AlunoFichaDetalhePage.tsx ====

// Caminho: ./client/src/pages/alunos/AlunoFichaDetalhePage.tsx
import React, { useState, useEffect, useMemo } from 'react';
import { useParams, Link as WouterLink, useLocation } from 'wouter';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { useAluno } from '@/context/AlunoContext';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea"; // IMPORTADO
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"; // IMPORTADO
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from "@/components/ui/dialog"; // IMPORTADO
import { Loader2, ArrowLeft, ListChecks, Dumbbell, CheckSquare, Square, AlertTriangle, PlayCircle, VideoOff, RefreshCw, Zap, MessageSquare, Smile } from 'lucide-react'; // IMPORTADO MessageSquare, Smile
import { format, parseISO } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import VideoPlayerModal from '@/components/dialogs/VideoPlayerModal';
import { useToast } from '@/hooks/use-toast';

// Defini√ß√£o das op√ß√µes de PSE para o frontend
const OPCOES_PSE_FRONTEND = [
    'Muito Leve', 
    'Leve', 
    'Moderado', 
    'Intenso', 
    'Muito Intenso', 
    'M√°ximo Esfor√ßo'
] as const;
type OpcaoPSEFrontend = typeof OPCOES_PSE_FRONTEND[number];

interface ExercicioPopulado {
  _id: string;
  nome: string;
  grupoMuscular?: string;
  urlVideo?: string;
  descricao?: string;
  categoria?: string;
  tipo?: string;
}

interface ExercicioDetalhado {
  _id?: string;
  exercicioId: ExercicioPopulado | string | null;
  series?: string;
  repeticoes?: string;
  carga?: string;
  descanso?: string;
  observacoes?: string;
  ordem?: number;
  concluido?: boolean;
}

interface FichaTreinoDetalhada {
  _id: string;
  titulo: string;
  descricao?: string;
  criadorId?: { _id: string; nome?: string; } | null;
  exercicios: ExercicioDetalhado[];
  criadoEm: string;
  atualizadoEm?: string;
  status?: "ativo" | "rascunho" | "arquivado";
}

type ExercicioRenderizavel = Omit<ExercicioDetalhado, 'exercicioId' | '_id'> & { 
  _id: string; 
  exercicioId: ExercicioPopulado; 
  concluido: boolean;
};

interface ToggleExercicioPayload {
  fichaId: string;
  exercicioFichaId: string;
}

// Interface para a resposta da API de concluir sess√£o, incluindo feedback opcional
interface ConcluirSessaoResponse {
  _id: string;
  status: string;
  concluidaEm: string;
  pseAluno?: OpcaoPSEFrontend | null;
  comentarioAluno?: string | null;
  message?: string; // Para mensagens como "Feedback atualizado"
  sessao?: ConcluirSessaoResponse; // Para quando a sess√£o j√° estava conclu√≠da
}

// Payload para a muta√ß√£o de concluir sess√£o, agora com campos de feedback opcionais
interface ConcluirSessaoPayload {
  sessaoId: string;
  pseAluno?: OpcaoPSEFrontend | null;
  comentarioAluno?: string | null;
}


const AlunoFichaDetalhePage: React.FC = () => {
  const params = useParams<{ fichaId?: string }>();
  const fichaIdUrl = params.fichaId;
  const { aluno, tokenAluno } = useAluno();
  const { toast } = useToast();
  const queryClientHook = useQueryClient();
  const [location, navigate] = useLocation();

  const [videoModalUrl, setVideoModalUrl] = useState<string | null>(null);
  const [exerciciosParaRenderizar, setExerciciosParaRenderizar] = useState<ExercicioRenderizavel[]>([]);
  
  // Estados para o modal de feedback
  const [mostrarModalFeedback, setMostrarModalFeedback] = useState(false);
  const [sessaoConcluidaIdParaFeedback, setSessaoConcluidaIdParaFeedback] = useState<string | null>(null);
  const [pseSelecionado, setPseSelecionado] = useState<OpcaoPSEFrontend | ''>('');
  const [comentarioAlunoModal, setComentarioAlunoModal] = useState('');


  const sessaoId = useMemo(() => {
    const searchParams = new URLSearchParams(window.location.search);
    return searchParams.get('sessaoId');
  }, [location]);

  const queryEnabled = !!fichaIdUrl && !!aluno && !!tokenAluno;

  const {
    data: fichaDetalhes,
    isLoading: isLoadingFicha,
    error: errorFicha,
    refetch: refetchFicha
  } = useQuery<FichaTreinoDetalhada, Error, FichaTreinoDetalhada, readonly ['minhaFichaDetalhe', string | undefined, string | undefined]>({
    queryKey: ['minhaFichaDetalhe', fichaIdUrl, aluno?.id],
    queryFn: async () => {
      if (!fichaIdUrl || !aluno?.id) {
        throw new Error("ID da ficha ou do aluno n√£o dispon√≠vel para a query.");
      }
      return apiRequest<FichaTreinoDetalhada>('GET', `/api/aluno/minha-ficha/${fichaIdUrl}`);
    },
    enabled: queryEnabled,
    staleTime: 1000 * 60 * 1,
  });

  const toggleExercicioMutation = useMutation<
    { message: string; exercicioAtualizado: ExercicioRenderizavel },
    Error,
    ToggleExercicioPayload
  >({
    mutationFn: async (payload) => {
      return apiRequest<{ message: string; exercicioAtualizado: ExercicioRenderizavel }>(
        'PATCH',
        `/api/aluno/ficha/${payload.fichaId}/exercicio/${payload.exercicioFichaId}/toggle-concluido`
      );
    },
    onSuccess: (data, variables) => {
      toast({ title: "Sucesso!", description: data.message });
      setExerciciosParaRenderizar(prevExercicios =>
        prevExercicios.map(ex =>
          ex._id === variables.exercicioFichaId
            ? { ...ex, concluido: data.exercicioAtualizado.concluido }
            : ex
        )
      );
      queryClientHook.invalidateQueries({ queryKey: ['meusTreinosAluno', aluno?.id] });
    },
    onError: (error) => {
      toast({
        title: "Erro ao atualizar exerc√≠cio",
        description: error.message || "N√£o foi poss√≠vel atualizar o status do exerc√≠cio.",
        variant: "destructive",
      });
    },
  });
  
  const concluirSessaoMutation = useMutation<ConcluirSessaoResponse, Error, ConcluirSessaoPayload>({
    mutationFn: async (payload) => {
      if (!payload.sessaoId) throw new Error("ID da sess√£o n√£o fornecido.");
      const body: Partial<ConcluirSessaoPayload> = {}; // Enviar apenas os campos de feedback se existirem
      if (payload.pseAluno !== undefined) body.pseAluno = payload.pseAluno;
      if (payload.comentarioAluno !== undefined) body.comentarioAluno = payload.comentarioAluno;
      
      return apiRequest<ConcluirSessaoResponse>('PATCH', `/api/aluno/sessoes/${payload.sessaoId}/concluir`, body);
    },
    onSuccess: (data, variables) => {
      // Se foi a primeira chamada (payload n√£o continha feedback), ent√£o abre o modal
      if (variables.pseAluno === undefined && variables.comentarioAluno === undefined) {
        if (data.message === 'Sess√£o j√° estava conclu√≠da.' && data.sessao) { // Se j√° estava conclu√≠da, mas queremos dar feedback
             toast({ title: "Sess√£o j√° conclu√≠da", description: "Voc√™ pode adicionar ou atualizar seu feedback."});
             setSessaoConcluidaIdParaFeedback(variables.sessaoId);
             setPseSelecionado(data.sessao.pseAluno || '');
             setComentarioAlunoModal(data.sessao.comentarioAluno || '');
             setMostrarModalFeedback(true);
        } else if (data.status === 'completed') {
            toast({ title: "Treino Marcado como Conclu√≠do!", description: "Agora, conte-nos como foi." });
            setSessaoConcluidaIdParaFeedback(variables.sessaoId);
            setPseSelecionado(''); // Limpa campos para novo feedback
            setComentarioAlunoModal('');
            setMostrarModalFeedback(true);
        }
      } else { // Se foi a chamada COM feedback (do modal)
        toast({
          title: "Feedback Enviado!",
          description: data.message || "Seu feedback foi registrado com sucesso.",
        });
        setMostrarModalFeedback(false);
        queryClientHook.invalidateQueries({ queryKey: ['sessoesAgendadasAluno', aluno?.id] });
        queryClientHook.invalidateQueries({ queryKey: ['frequenciaSemanalAluno', aluno?.id] });
        setTimeout(() => { navigate('/aluno/dashboard'); }, 1500);
      }
    },
    onError: (error) => {
      toast({
        title: "Erro",
        description: error.message || "N√£o foi poss√≠vel atualizar a sess√£o.",
        variant: "destructive",
      });
      setMostrarModalFeedback(false);
    },
  });

  useEffect(() => {
    if (fichaDetalhes && fichaDetalhes.exercicios) {
      const exerciciosValidos = fichaDetalhes.exercicios
        .filter((ex): ex is Omit<ExercicioDetalhado, 'exercicioId' | '_id'> & { _id: string; exercicioId: ExercicioPopulado; } => {
          return !!ex._id && ex.exercicioId !== null && typeof ex.exercicioId === 'object' && '_id' in ex.exercicioId && 'nome' in ex.exercicioId;
        })
        .map((ex): ExercicioRenderizavel => ({
          ...ex,
          exercicioId: ex.exercicioId as ExercicioPopulado,
          concluido: ex.concluido ?? false,
        }));
      setExerciciosParaRenderizar(exerciciosValidos);
    } else if (fichaDetalhes && (!fichaDetalhes.exercicios || fichaDetalhes.exercicios.length === 0)) {
      setExerciciosParaRenderizar([]);
    }
  }, [fichaDetalhes]);

  const handleToggleExercicioConcluido = (exercicioFichaItemId?: string) => {
    if (!exercicioFichaItemId || !fichaIdUrl) return;
    toggleExercicioMutation.mutate({ fichaId: fichaIdUrl, exercicioFichaId: exercicioFichaItemId });
  };

  const totalExercicios = exerciciosParaRenderizar.length;
  const exerciciosConcluidosCount = exerciciosParaRenderizar.filter(ex => ex.concluido).length;

  const handleFinalizarTreino = () => {
    if (!sessaoId) {
      toast({ title: "A√ß√£o n√£o dispon√≠vel", description: "N√£o h√° uma sess√£o ativa associada a este treino para finalizar."});
      return;
    }
    if (totalExercicios > 0 && exerciciosConcluidosCount < totalExercicios) {
        const confirmar = window.confirm(`Voc√™ ainda n√£o marcou todos os exerc√≠cios como conclu√≠dos (${exerciciosConcluidosCount}/${totalExercicios}). Deseja finalizar o treino mesmo assim?`);
        if (!confirmar) return;
    }
    // Primeira chamada: apenas para marcar como conclu√≠do, sem enviar dados de feedback no payload inicial
    concluirSessaoMutation.mutate({ sessaoId });
  };

  const handleEnviarFeedback = () => {
    if (!sessaoConcluidaIdParaFeedback) return;
    concluirSessaoMutation.mutate({
      sessaoId: sessaoConcluidaIdParaFeedback,
      pseAluno: pseSelecionado || null,
      comentarioAluno: comentarioAlunoModal.trim() || null,
    });
  };

  const formatarDataSimples = (dataISO?: string): string => {
    if (!dataISO) return 'N/A';
    try { return format(parseISO(dataISO), "dd/MM/yyyy", { locale: ptBR }); }
    catch (e) { return 'Data inv√°lida'; }
  };

  const abrirVideo = (url?: string) => {
    if (url) {
      let videoUrlParaModal = url;
      if (url.includes("youtube.com/watch?v=")) {
        videoUrlParaModal = url.replace("watch?v=", "embed/");
      } else if (url.includes("youtu.be/")) {
         const videoId = url.split("youtu.be/")[1]?.split("?")[0];
         if (videoId) videoUrlParaModal = `https://www.youtube.com/embed/${videoId}`;
      } else if (url.includes("drive.google.com/file/d/")) {
        const id = url.split("/d/")[1]?.split("/")[0];
        if (id) videoUrlParaModal = `https://drive.google.com/file/d/${id}/preview`;
      }
      setVideoModalUrl(videoUrlParaModal);
    } else {
      toast({ title: "V√≠deo n√£o dispon√≠vel", description: "N√£o h√° URL de v√≠deo para este exerc√≠cio." });
    }
  };

  if (isLoadingFicha) { /* ... JSX do Loading ... */ 
    return ( <div className="flex flex-col items-center justify-center min-h-[calc(100vh-200px)] p-4"> <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" /> <p className="text-lg text-gray-700 dark:text-gray-300">A carregar detalhes da ficha...</p> </div> );
  }
  if (errorFicha) { /* ... JSX do Erro ... */ 
    return ( <div className="container mx-auto p-4 md:p-6 lg:p-8 text-center"> <WouterLink href="/aluno/dashboard"> <Button variant="outline" className="mb-6"> <ArrowLeft className="w-4 h-4 mr-2" /> Voltar para o Painel </Button> </WouterLink> <Card className="max-w-2xl mx-auto border-red-200 dark:border-red-700 bg-red-50 dark:bg-red-900/30"> <CardHeader> <CardTitle className="text-xl text-red-700 dark:text-red-400 flex items-center justify-center"> <AlertTriangle className="w-6 h-6 mr-2"/> Erro ao Carregar Ficha </CardTitle> </CardHeader> <CardContent> <p>{errorFicha.message || "N√£o foi poss√≠vel carregar os detalhes desta ficha de treino."}</p> <Button onClick={() => refetchFicha()} className="mt-4"> <RefreshCw className="w-4 h-4 mr-2"/> Tentar Novamente </Button> </CardContent> </Card> </div> );
  }
  if (!fichaDetalhes) { /* ... JSX Ficha n√£o encontrada ... */ 
    return ( <div className="container mx-auto p-4 md:p-6 lg:p-8 text-center"> <WouterLink href="/aluno/dashboard"> <Button variant="outline" className="mb-6"> <ArrowLeft className="w-4 h-4 mr-2" /> Voltar para o Painel </Button> </WouterLink> <p className="text-lg text-muted-foreground py-10"> {queryEnabled ? "Ficha de treino n√£o encontrada ou dados ainda a carregar." : "N√£o foi poss√≠vel iniciar o carregamento da ficha."} </p> </div> );
  }

  const progressoPercentual = totalExercicios > 0 ? Math.round((exerciciosConcluidosCount / totalExercicios) * 100) : 0;
  const podeFinalizarTreino = !!sessaoId && !concluirSessaoMutation.isPending;

  return (
    <div className="container mx-auto py-6 px-2 sm:px-4 md:px-6 lg:px-8">
      <div className="mb-6 flex justify-between items-center">
        <WouterLink href="/aluno/dashboard">
          <Button variant="outline" size="sm" className="text-sm"> <ArrowLeft className="w-4 h-4 mr-2" /> Voltar </Button>
        </WouterLink>
        <Button variant="outline" size="sm" onClick={() => refetchFicha()} disabled={isLoadingFicha || toggleExercicioMutation.isPending} title="Atualizar dados da ficha">
            <RefreshCw className={`w-4 h-4 mr-2 ${isLoadingFicha || toggleExercicioMutation.isPending ? 'animate-spin' : ''}`} /> Atualizar Ficha
        </Button>
      </div>

      <Card className="shadow-xl border dark:border-gray-700">
        <CardHeader className="pb-4">
          <CardTitle className="text-2xl sm:text-3xl font-bold text-primary flex items-center gap-3"> <ListChecks className="w-8 h-8" /> {fichaDetalhes.titulo} </CardTitle>
          {fichaDetalhes.descricao && (<CardDescription className="pt-1 text-base"> {fichaDetalhes.descricao} </CardDescription>)}
          <div className="text-xs text-muted-foreground pt-2 space-y-1">
            <p>Criada por: {fichaDetalhes.criadorId && typeof fichaDetalhes.criadorId === 'object' ? fichaDetalhes.criadorId.nome : 'Personal Trainer'}</p>
            <p>√öltima atualiza√ß√£o: {formatarDataSimples(fichaDetalhes.atualizadoEm || fichaDetalhes.criadoEm)}</p>
          </div>
          {totalExercicios > 0 && (
            <div className="mt-3">
                <Label className="text-sm font-medium">Progresso da Ficha: {progressoPercentual}% ({exerciciosConcluidosCount}/{totalExercicios})</Label>
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5 mt-1">
                    <div className="bg-green-500 h-2.5 rounded-full transition-all duration-300 ease-out" style={{ width: `${progressoPercentual}%` }}></div>
                </div>
            </div>
          )}
        </CardHeader>

        <CardContent className="pt-2">
          <h3 className="text-xl font-semibold mb-4 mt-2 text-gray-700 dark:text-gray-300 flex items-center"> <Dumbbell className="w-5 h-5 mr-2" /> Exerc√≠cios </h3>
          {exerciciosParaRenderizar.length > 0 ? (
            <Accordion type="multiple" className="w-full space-y-3">
              {exerciciosParaRenderizar.sort((a, b) => (a.ordem ?? Infinity) - (b.ordem ?? Infinity)).map((ex) => {
                  // ... (JSX do AccordionItem para cada exerc√≠cio - sem altera√ß√µes)
                  const nomeEx = ex.exercicioId.nome;
                  const grupoMuscular = ex.exercicioId.grupoMuscular;
                  const urlVideo = ex.exercicioId.urlVideo;
                  const descricaoGeralExercicio = ex.exercicioId.descricao;
                  return ( <AccordionItem key={ex._id} value={ex._id} className={`border rounded-lg shadow-sm transition-all overflow-hidden ${ ex.concluido ? 'opacity-90 dark:opacity-80 border-green-500 dark:border-green-600 bg-green-50 dark:bg-green-900/30' : 'bg-white dark:bg-gray-800/60 dark:border-gray-700' }`}> <AccordionTrigger className={`px-4 py-3 hover:no-underline text-sm w-full ${ ex.concluido ? 'hover:bg-green-100/70 dark:hover:bg-green-800/50' : 'hover:bg-slate-50 dark:hover:bg-gray-700/70' } rounded-none`}> <div className="flex items-center justify-between w-full"> <div className="flex items-center flex-1 min-w-0"> <Button variant="ghost" size="icon" className={`h-8 w-8 mr-3 shrink-0 ${ ex.concluido ? 'text-green-700 dark:text-green-400 hover:text-green-800 dark:hover:text-green-300' : 'text-gray-400 hover:text-primary dark:hover:text-sky-400' } ${toggleExercicioMutation.isPending && toggleExercicioMutation.variables?.exercicioFichaId === ex._id ? 'animate-pulse' : ''}`} onClick={(e) => { e.stopPropagation(); handleToggleExercicioConcluido(ex._id);}} title={ex.concluido ? "Desmarcar como feito" : "Marcar como feito"} disabled={toggleExercicioMutation.isPending && toggleExercicioMutation.variables?.exercicioFichaId === ex._id} > {toggleExercicioMutation.isPending && toggleExercicioMutation.variables?.exercicioFichaId === ex._id ? <Loader2 className="w-5 h-5 animate-spin"/> : (ex.concluido ? <CheckSquare className="w-5 h-5" /> : <Square className="w-5 h-5" /> )} </Button> <div className="flex-1 truncate"> <span className={`font-medium ${ ex.concluido ? 'line-through text-gray-600 dark:text-gray-400' : 'text-gray-800 dark:text-gray-100' }`}> {nomeEx} </span> {(ex.series || ex.repeticoes) && ( <span className={`ml-2 text-xs ${ ex.concluido ? 'text-gray-500 dark:text-gray-500' : 'text-blue-600 dark:text-blue-400' }`}> ({ex.series || '?'}{ex.series && ex.repeticoes ? 'x' : ''}{ex.repeticoes || '?'}) </span> )} </div> </div> {urlVideo ? ( <Button variant="ghost" size="icon" className="h-8 w-8 text-red-500 hover:text-red-600 mx-2 shrink-0" onClick={(e) => { e.stopPropagation(); abrirVideo(urlVideo); }} title="Ver v√≠deo"> <PlayCircle className="w-5 h-5" /> </Button> ) : ( <Button variant="ghost" size="icon" className="h-8 w-8 text-gray-400 cursor-not-allowed mx-2 shrink-0" title="V√≠deo n√£o dispon√≠vel" disabled> <VideoOff className="w-5 h-5" /> </Button> )} </div> </AccordionTrigger> <AccordionContent className={`px-4 pt-0 pb-4 ${ex.concluido ? 'bg-green-50/50 dark:bg-green-900/10' : 'bg-transparent'}`}> <div className="pt-3 border-t dark:border-gray-600 space-y-1.5 text-xs text-muted-foreground dark:text-gray-400"> {grupoMuscular && <p><strong>Grupo Muscular:</strong> {grupoMuscular}</p>} {descricaoGeralExercicio && <p><strong>Descri√ß√£o do Exerc√≠cio:</strong> {descricaoGeralExercicio}</p>} {ex.series && <p><strong>S√©ries:</strong> {ex.series}</p>} {ex.repeticoes && <p><strong>Repeti√ß√µes:</strong> {ex.repeticoes}</p>} {ex.carga && <p><strong>Carga:</strong> {ex.carga}</p>} {ex.descanso && <p><strong>Descanso:</strong> {ex.descanso}</p>} {ex.observacoes && <p className="mt-1 pt-1 border-t dark:border-gray-700"><strong>Obs. para esta ficha:</strong> {ex.observacoes}</p>} {(!grupoMuscular && !descricaoGeralExercicio && !ex.series && !ex.repeticoes && !ex.carga && !ex.descanso && !ex.observacoes) && ( <p className="italic">Nenhum detalhe adicional para este exerc√≠cio.</p> )} </div> </AccordionContent> </AccordionItem> );
              })}
            </Accordion>
          ) : ( <p className="text-sm text-muted-foreground text-center py-6"> {isLoadingFicha ? "A carregar exerc√≠cios..." : "Nenhum exerc√≠cio encontrado nesta ficha."} </p> )}
        </CardContent>

        {sessaoId && (
            <CardFooter className="pt-6 border-t dark:border-gray-700 flex flex-col sm:flex-row justify-center items-center gap-2">
                <Button 
                    onClick={handleFinalizarTreino} 
                    disabled={!podeFinalizarTreino}
                    className="w-full sm:w-auto bg-green-600 hover:bg-green-700 text-white"
                    size="lg"
                >
                    {concluirSessaoMutation.isPending && 
                     (!concluirSessaoMutation.variables?.pseAluno && !concluirSessaoMutation.variables?.comentarioAluno) 
                        ? <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                        : <Zap className="w-5 h-5 mr-2" />
                    }
                    Finalizar Treino
                </Button>
            </CardFooter>
        )}
      </Card>
      <VideoPlayerModal videoUrl={videoModalUrl} onClose={() => setVideoModalUrl(null)} />

      <Dialog open={mostrarModalFeedback} onOpenChange={(isOpen) => {
        if (!isOpen && !concluirSessaoMutation.isSuccess) { // Se fechar sem ter enviado o feedback com sucesso
            setMostrarModalFeedback(false);
            setPseSelecionado('');
            setComentarioAlunoModal('');
            // Considerar se deve invalidar queries ou redirecionar aqui caso o usu√°rio pule o feedback mas o treino j√° foi conclu√≠do
             queryClientHook.invalidateQueries({ queryKey: ['sessoesAgendadasAluno', aluno?.id] });
             queryClientHook.invalidateQueries({ queryKey: ['frequenciaSemanalAluno', aluno?.id] });
            setTimeout(() => { navigate('/aluno/dashboard'); }, 300);
        } else {
            // Se a muta√ß√£o de feedback foi sucesso, o onSuccess dela j√° cuida do redirecionamento
            // e de fechar o modal. S√≥ precisa controlar o estado de abertura aqui.
            setMostrarModalFeedback(isOpen); 
            if (!isOpen) { // Limpar campos se fechar ap√≥s um envio bem sucedido
                setPseSelecionado('');
                setComentarioAlunoModal('');
            }
        }
      }}>
        <DialogContent className="sm:max-w-[480px]">
          <DialogHeader>
            <DialogTitle className="flex items-center"> <Smile className="w-6 h-6 mr-2 text-primary" /> Feedback do Treino </DialogTitle>
            <DialogDescription> Parab√©ns por concluir seu treino! Como voc√™ se sentiu? Seu feedback √© importante. </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="pse" className="text-right col-span-1">PSE</Label>
              <Select value={pseSelecionado} onValueChange={(value) => setPseSelecionado(value as OpcaoPSEFrontend)}>
                <SelectTrigger className="col-span-3" id="pse"> <SelectValue placeholder="Como se sentiu?" /> </SelectTrigger>
                <SelectContent> {OPCOES_PSE_FRONTEND.map(opcao => ( <SelectItem key={opcao} value={opcao}>{opcao}</SelectItem> ))} </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="comentario" className="text-right col-span-1 self-start pt-2">Coment√°rios</Label>
              <Textarea id="comentario" placeholder="Deixe aqui suas observa√ß√µes..." className="col-span-3 min-h-[100px]" value={comentarioAlunoModal} onChange={(e) => setComentarioAlunoModal(e.target.value)} />
            </div>
          </div>
          <DialogFooter className="gap-2 sm:gap-0">
            <DialogClose asChild>
                <Button type="button" variant="outline">
                    {/* Se a muta√ß√£o estiver carregando devido ao envio de feedback, n√£o mostrar "Pular" */}
                    {!(concluirSessaoMutation.isPending && (concluirSessaoMutation.variables?.pseAluno || concluirSessaoMutation.variables?.comentarioAluno)) 
                        ? "Pular" 
                        : "Fechar"}
                </Button>
            </DialogClose>
            <Button type="button" onClick={handleEnviarFeedback} disabled={concluirSessaoMutation.isPending}>
              {concluirSessaoMutation.isPending && (concluirSessaoMutation.variables?.pseAluno || concluirSessaoMutation.variables?.comentarioAluno) 
                ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <MessageSquare className="w-4 h-4 mr-2" />
              }
              Enviar Feedback
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default AlunoFichaDetalhePage;
==== ./client/src/pages/alunos/AlunoHistoricoPage.tsx ====

// Caminho: ./client/src/pages/alunos/AlunoHistoricoPage.tsx
import React, { useState } from 'react'; // Adicionado useState para pagina√ß√£o
import { useAluno } from '@/context/AlunoContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card'; // Adicionado CardFooter para pagina√ß√£o
import { useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { Loader2, ArrowLeft, ListChecks, MessageSquareText, Star, CalendarDays, AlertTriangle, ChevronLeft, ChevronRight, ExternalLink } from 'lucide-react'; // Adicionado ChevronLeft, ChevronRight, ExternalLink
import { Link as WouterLink } from 'wouter';
import { format, parseISO } from 'date-fns';
import { ptBR } from 'date-fns/locale';

// Mantendo a defini√ß√£o de OPCOES_PSE_FRONTEND aqui por enquanto
const OPCOES_PSE_FRONTEND = ['Muito Leve', 'Leve', 'Moderado', 'Intenso', 'Muito Intenso', 'M√°ximo Esfor√ßo'] as const;
type OpcaoPSEFrontend = typeof OPCOES_PSE_FRONTEND[number];

interface SessaoHistorico {
  _id: string;
  sessionDate: string;
  concluidaEm: string;
  tipoCompromisso: string;
  status: string;
  workoutPlanId?: {
    _id: string;
    titulo: string;
  } | null;
  trainerId?: {
    _id: string;
    nome: string;
  } | null;
  pseAluno?: OpcaoPSEFrontend | null;
  comentarioAluno?: string | null;
  notes?: string;
}

interface HistoricoSessoesResponse {
  sessoes: SessaoHistorico[];
  currentPage: number;
  totalPages: number;
  totalSessoes: number;
}

const AlunoHistoricoPage: React.FC = () => {
  const { aluno, tokenAluno } = useAluno();
  const [currentPage, setCurrentPage] = useState(1);
  const SESSIONS_PER_PAGE = 5; // Quantas sess√µes mostrar por p√°gina

  const queryEnabled = !!aluno && !!tokenAluno;

  const { 
    data: historicoData, 
    isLoading: isLoadingHistorico, 
    error: errorHistorico,
    isFetching: isFetchingHistorico, // Para feedback de loading em mudan√ßas de p√°gina
    refetch: refetchHistorico // Para um bot√£o de atualizar, se desejado
  } = useQuery<HistoricoSessoesResponse, Error>({
    queryKey: ['alunoHistoricoSessoes', aluno?.id, currentPage, SESSIONS_PER_PAGE], // Incluir p√°gina e limite na chave
    queryFn: async () => {
      if (!aluno?.id) {
        throw new Error("Aluno n√£o autenticado para buscar hist√≥rico.");
      }
      return apiRequest<HistoricoSessoesResponse>(
        'GET', 
        `/api/aluno/meu-historico-sessoes?page=${currentPage}&limit=${SESSIONS_PER_PAGE}`
      );
    },
    enabled: queryEnabled,
    placeholderData: (previousData) => previousData, // Mant√©m dados antigos enquanto busca novos
    // staleTime: 1000 * 60 * 2, // Cache de 2 minutos
  });

  if (!aluno && queryEnabled && (isLoadingHistorico || isFetchingHistorico)) { 
    return (
        <div className="flex flex-col items-center justify-center min-h-[calc(100vh-200px)] p-4">
            <Loader2 className="h-10 w-10 animate-spin text-primary mb-3" />
            <p className="text-muted-foreground">Carregando dados do aluno...</p>
        </div>
    );
  }
  if (!aluno && !tokenAluno && !queryEnabled) {
      return ( <div className="flex h-screen w-full items-center justify-center"> <p>Sess√£o inv√°lida ou expirada. Por favor, <WouterLink href="/aluno/login" className="text-primary hover:underline">fa√ßa login</WouterLink> novamente.</p> </div> );
  }
  

  const formatarDataHora = (dataISO?: string): string => {
    if (!dataISO) return 'N/A';
    try { return format(parseISO(dataISO), "dd/MM/yy '√†s' HH:mm", { locale: ptBR }); }
    catch (e) { return 'Data inv√°lida'; }
  };

  return (
    <div className="container mx-auto py-6 px-2 sm:px-4 md:px-6 lg:px-8">
      <div className="mb-6 flex items-center">
        <WouterLink href="/aluno/dashboard">
          <Button variant="outline" size="sm" className="text-sm">
            <ArrowLeft className="w-4 h-4 mr-2" />
            Voltar ao Painel
          </Button>
        </WouterLink>
      </div>

      <Card className="shadow-xl">
        <CardHeader>
          <CardTitle className="text-2xl sm:text-3xl font-bold text-primary flex items-center gap-3">
            <ListChecks className="w-8 h-8" />
            Meu Hist√≥rico de Treinos
          </CardTitle>
          <CardDescription>Revise seus treinos conclu√≠dos e seu feedback.</CardDescription>
        </CardHeader>
        <CardContent>
          {isLoadingHistorico && !historicoData && ( // Mostrar loading inicial apenas se n√£o houver dados pr√©vios
            <div className="flex flex-col items-center justify-center py-10">
              <Loader2 className="h-10 w-10 animate-spin text-primary mb-3" />
              <p className="text-muted-foreground">Carregando seu hist√≥rico...</p>
            </div>
          )}
          {errorHistorico && (
            <div className="text-red-500 p-4 bg-red-50 dark:bg-red-900/20 rounded-md text-sm flex items-center">
              <AlertTriangle className="inline w-5 h-5 mr-2 shrink-0" />
              <span>Erro ao carregar hist√≥rico: {errorHistorico.message}</span>
            </div>
          )}
          {!isLoadingHistorico && !errorHistorico && (!historicoData || historicoData.sessoes.length === 0) && (
            <p className="text-center text-muted-foreground py-10">
              Voc√™ ainda n√£o concluiu nenhum treino. Assim que concluir, eles aparecer√£o aqui!
            </p>
          )}

          {historicoData && historicoData.sessoes.length > 0 && (
            <div className="space-y-4 mt-4">
              {historicoData.sessoes.map(sessao => (
                <Card key={sessao._id} className="bg-slate-50 dark:bg-slate-800/60">
                  <CardHeader className="pb-3">
                    <div className="flex justify-between items-start">
                        <div>
                            <CardTitle className="text-lg">
                                {sessao.workoutPlanId ? sessao.workoutPlanId.titulo : `Sess√£o de ${sessao.tipoCompromisso.replace('_', ' ')}`}
                            </CardTitle>
                            <CardDescription className="text-xs">
                                Conclu√≠do em: {formatarDataHora(sessao.concluidaEm)} <br />
                                (Sess√£o originalmente para: {formatarDataHora(sessao.sessionDate)})
                            </CardDescription>
                        </div>
                        {sessao.workoutPlanId && (
                             <WouterLink href={`/aluno/ficha/${sessao.workoutPlanId._id}`}>
                                <Button variant="outline" size="sm" className="text-xs">
                                    Ver Ficha <ExternalLink className="w-3 h-3 ml-1.5"/>
                                </Button>
                            </WouterLink>
                        )}
                    </div>
                  </CardHeader>
                  <CardContent className="text-sm space-y-2">
                    {sessao.pseAluno && (
                      <div className="flex items-center gap-2">
                        <Star className="w-4 h-4 text-yellow-500" /> 
                        <strong>PSE:</strong> {sessao.pseAluno}
                      </div>
                    )}
                    {sessao.comentarioAluno && (
                      <div className="flex items-start gap-2">
                        <MessageSquareText className="w-4 h-4 text-blue-500 mt-0.5 shrink-0" />
                        <div>
                            <strong>Seu Coment√°rio:</strong>
                            <p className="text-muted-foreground text-xs italic pl-1 whitespace-pre-wrap">{sessao.comentarioAluno}</p>
                        </div>
                      </div>
                    )}
                    {(!sessao.pseAluno && !sessao.comentarioAluno) && (
                        <p className="text-xs text-muted-foreground italic">Nenhum feedback fornecido para esta sess√£o.</p>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {/* Controles de Pagina√ß√£o */}
          {historicoData && historicoData.totalPages > 1 && (
            <CardFooter className="pt-6 flex items-center justify-between border-t mt-6">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
                disabled={currentPage === 1 || isFetchingHistorico}
              >
                <ChevronLeft className="w-4 h-4 mr-1" /> Anterior
              </Button>
              <span className="text-sm text-muted-foreground">
                P√°gina {historicoData.currentPage} de {historicoData.totalPages}
              </span>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setCurrentPage(prev => Math.min(historicoData.totalPages, prev + 1))}
                disabled={currentPage === historicoData.totalPages || isFetchingHistorico}
              >
                Pr√≥xima <ChevronRight className="w-4 h-4 ml-1" />
              </Button>
            </CardFooter>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default AlunoHistoricoPage;
==== ./client/src/pages/alunos/[id].tsx ====

import React, { useEffect, useState } from 'react';
import { useLocation, Link } from "wouter";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ArrowLeft, Dumbbell, Edit, Trash2, Calendar, Weight, Ruler, Target, Phone, UserCircle, Info, StickyNote, Loader2, Eye } from "lucide-react";
import LoadingSpinner from "@/components/LoadingSpinner";
import ErrorMessage from "@/components/ErrorMessage";
import { Aluno } from '@/types/aluno';
import { useConfirmDialog } from '@/hooks/useConfirmDialog';
import { ModalConfirmacao } from '@/components/ui/modal-confirmacao';
import { useToast } from '@/hooks/use-toast';
import { apiRequest } from '@/lib/queryClient';
import TreinoFormModal from '@/components/dialogs/TreinoFormModal';
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import FichaViewModal, { FichaTreinoView } from "@/components/dialogs/FichaViewModal"; // Ser√° renomeado para RotinaViewModal depois
import AssociarModeloAlunoModal from "@/components/dialogs/AssociarModeloAlunoModal";
import { RotinaListagemItem, DiaDeTreinoDetalhado, ExercicioEmDiaDeTreinoDetalhado } from '@/types/treinoOuRotinaTypes';

interface StudentDetailProps {
  id?: string;
}

const StudentDetail: React.FC<StudentDetailProps> = ({ id }) => {
  const studentId = id;
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const { isOpen: isConfirmOpen, options: confirmOptions, openConfirmDialog, closeConfirmDialog, confirm: confirmDeleteAction } = useConfirmDialog();
  const [, navigate] = useLocation();

  const [isTreinoFormModalOpen, setIsTreinoFormModalOpen] = useState(false);
  const [fichaParaEditarOuCriar, setFichaParaEditarOuCriar] = useState<RotinaListagemItem | null>(null);
  const [isViewFichaModalOpen, setIsViewFichaModalOpen] = useState(false);
  const [fichaParaVisualizar, setFichaParaVisualizar] = useState<FichaTreinoView | null>(null);
  const [isAssociarModalOpen, setIsAssociarModalOpen] = useState(false);
  const [fichaOriginalParaAssociar, setFichaOriginalParaAssociar] = useState<{id: string; titulo: string} | null>(null);

  const isEditing = !!(fichaParaEditarOuCriar && fichaParaEditarOuCriar._id); // [cite: 82] Esta vari√°vel 'isEditing' √© local de StudentDetail, n√£o a do modal.

  const { data: student, isLoading: isLoadingStudent, error: errorLoadingStudent } = useQuery<Aluno | null, Error>({
    queryKey: ["aluno", studentId],
    queryFn: async (): Promise<Aluno | null> => {
      if (!studentId) return null;
      try {
        const data = await apiRequest<Aluno>("GET", `/api/alunos/${studentId}`);
        return data;
      } catch (err: any) {
        if (err.response?.status === 404 || err.message?.includes("404")) return null;
        throw err;
      }
    },
    enabled: !!studentId,
    retry: 1,
  });

  const { data: studentWorkouts = [], isLoading: isLoadingWorkouts, error: errorLoadingWorkouts, refetch: refetchFichasAluno } = useQuery<RotinaListagemItem[], Error>({
    queryKey: ["fichasAluno", studentId],
    queryFn: async (): Promise<RotinaListagemItem[]> => {
      if (!studentId) return [];
      try {
        const dataFromApi = await apiRequest<any[]>("GET", `/api/treinos/aluno/${studentId}`);
        
        if (!Array.isArray(dataFromApi)) {
            console.warn(`API /api/treinos/aluno/${studentId} n√£o retornou um array. Retornado:`, dataFromApi);
            return [];
        }

        return dataFromApi.map((fichaApi: any): RotinaListagemItem => {
          const diasDeTreinoProcessados = (fichaApi.diasDeTreino || []).map((diaApi: any): DiaDeTreinoDetalhado => {
            const exerciciosDoDiaProcessados = (diaApi.exerciciosDoDia || []).map((exApi: any): ExercicioEmDiaDeTreinoDetalhado => ({
              ...exApi,
              _id: exApi._id, // [cite: 19]
              exercicioId: exApi.exercicioId, // [cite: 19]
              series: exApi.series !== undefined ? String(exApi.series) : undefined, // [cite: 19, 20]
              repeticoes: exApi.repeticoes !== undefined ? String(exApi.repeticoes) : undefined, // [cite: 20, 21]
              carga: exApi.carga !== undefined ? String(exApi.carga) : undefined, // [cite: 21, 22]
              descanso: exApi.descanso !== undefined ? String(exApi.descanso) : undefined, // [cite: 22, 23]
              ordemNoDia: exApi.ordemNoDia ?? 0, // [cite: 23, 24]
              concluido: exApi.concluido ?? false, // [cite: 24, 25]
            }));
            return {
              ...diaApi,
              _id: diaApi._id, // [cite: 26]
              identificadorDia: diaApi.identificadorDia, // [cite: 26]
              ordemNaRotina: diaApi.ordemNaRotina ?? 0, // [cite: 26, 27]
              exerciciosDoDia: exerciciosDoDiaProcessados, // [cite: 27]
            };
          });

          return {
            _id: fichaApi._id, // [cite: 28]
            titulo: fichaApi.titulo, // [cite: 28]
            descricao: fichaApi.descricao, // [cite: 28]
            tipo: fichaApi.tipo, // [cite: 28]
            alunoId: fichaApi.alunoId, // [cite: 28]
            criadorId: fichaApi.criadorId, // [cite: 28]
            tipoOrganizacaoRotina: fichaApi.tipoOrganizacaoRotina || 'numerico', // [cite: 28, 29]
            diasDeTreino: diasDeTreinoProcessados, // [cite: 29]
            pastaId: fichaApi.pastaId, // [cite: 29]
            statusModelo: fichaApi.statusModelo, // [cite: 29]
            ordemNaPasta: fichaApi.ordemNaPasta, // [cite: 29]
            dataValidade: fichaApi.dataValidade, // [cite: 29]
            totalSessoesRotinaPlanejadas: fichaApi.totalSessoesRotinaPlanejadas, // [cite: 29]
            sessoesRotinaConcluidas: fichaApi.sessoesRotinaConcluidas ?? 0, // [cite: 29, 30]
            criadoEm: fichaApi.criadoEm, // [cite: 30]
            atualizadoEm: fichaApi.atualizadoEm, // [cite: 30]
          };
        });
      } catch (err: any) {
        if (err.message?.includes("404") || (typeof err === 'object' && err !== null && 'response' in err && (err as any).response?.status === 404) ) {
            console.warn(`Nenhuma rotina encontrada para o aluno ${studentId} ou erro 404 na API (queryFn).`);
            return []; // [cite: 32]
        }
        console.error("Erro ao buscar rotinas do aluno (queryFn):", err);
        throw err;
      }
    },
    enabled: !!studentId, // [cite: 33]
    retry: 1, // [cite: 33]
    initialData: [], // [cite: 33]
  });

  const deleteMutation = useMutation<any, Error, string>({
    mutationFn: (rotinaId) => apiRequest("DELETE", `/api/treinos/${rotinaId}`), // [cite: 34]
    onSuccess: () => {
      toast({ title: "Sucesso", description: "Rotina de treino exclu√≠da." }); // [cite: 34]
      refetchFichasAluno(); // [cite: 34]
    },
    onError: (error) => {
      toast({ variant: "destructive", title: "Erro ao Excluir", description: error.message || "N√£o foi poss√≠vel excluir a rotina." }); // [cite: 34]
    },
    onSettled: () => closeConfirmDialog(), // [cite: 34]
  });

  const handleEditFichaClick = (rotina: RotinaListagemItem) => {
    setFichaParaEditarOuCriar(rotina); // [cite: 35]
    setIsTreinoFormModalOpen(true); // [cite: 35]
  };

  const handleCreateFichaClick = () => {
    setFichaParaEditarOuCriar(null); // [cite: 36]
    setIsTreinoFormModalOpen(true); // [cite: 36]
  };

  const handleDeleteClick = (rotina: RotinaListagemItem) => {
    openConfirmDialog({
        titulo: "Excluir Rotina de Treino", // [cite: 37]
        mensagem: `Tem certeza que deseja excluir a rotina "${rotina.titulo}"?`, // [cite: 37]
        textoConfirmar: "Excluir Rotina", // [cite: 37]
        textoCancelar: "Cancelar", // [cite: 37]
        onConfirm: () => deleteMutation.mutate(rotina._id), // [cite: 37]
    });
  };

  const handleViewFichaClick = (rotina: RotinaListagemItem) => {
    const todosExerciciosPlanos: ExercicioEmDiaDeTreinoDetalhado[] = (rotina.diasDeTreino || []).flatMap(
      (dia: DiaDeTreinoDetalhado) => (dia.exerciciosDoDia || []).map(
        (ex: ExercicioEmDiaDeTreinoDetalhado): ExercicioEmDiaDeTreinoDetalhado => ({ ...ex })
      )
    );
    const fichaViewData: FichaTreinoView = {
        _id: rotina._id, // [cite: 39]
        titulo: rotina.titulo, // [cite: 39]
        descricao: rotina.descricao, // [cite: 39]
        tipo: rotina.tipo, // [cite: 39]
        alunoId: rotina.alunoId, // [cite: 39]
        criadorId: rotina.criadorId, // [cite: 39]
        diasDeTreino: rotina.diasDeTreino || [], // [cite: 39, 40]
        exercicios: todosExerciciosPlanos,  // [cite: 40]
        criadoEm: rotina.criadoEm, // [cite: 40]
        atualizadoEm: rotina.atualizadoEm, // [cite: 40]
        statusModelo: rotina.statusModelo, // [cite: 40]
        tipoOrganizacaoRotina: rotina.tipoOrganizacaoRotina, // [cite: 40]
    };
    setFichaParaVisualizar(fichaViewData); // [cite: 41]
    setIsViewFichaModalOpen(true); // [cite: 41]
  };

  const handleTriggerEditFichaFromView = (fichaFromView: FichaTreinoView) => {
      setIsViewFichaModalOpen(false); // [cite: 41]
      const fichaOriginal = studentWorkouts.find(f => f._id === fichaFromView._id); // [cite: 42]
      if (fichaOriginal) {
        handleEditFichaClick(fichaOriginal); // [cite: 42]
      } else {
        toast({ title: "Erro", description: "N√£o foi poss√≠vel encontrar a rotina original para edi√ß√£o.", variant: "destructive"}); // [cite: 43]
      }
  };

  const handleTriggerCopyFichaFromView = (fichaId: string, fichaTitulo: string, tipoFichaOriginal?: "modelo" | "individual") => {
    setIsViewFichaModalOpen(false); // [cite: 44]
    setFichaOriginalParaAssociar({ id: fichaId, titulo: fichaTitulo }); // [cite: 45]
    setIsAssociarModalOpen(true); // [cite: 45]
  };

  const handleTreinoFormSuccess = () => {
      refetchFichasAluno(); // [cite: 45]
      setIsTreinoFormModalOpen(false); // [cite: 46]
      setFichaParaEditarOuCriar(null); // [cite: 46]
  };

  if (isLoadingStudent) return <LoadingSpinner text="Carregando dados do aluno..." />; // [cite: 46]
  if (!studentId) return <ErrorMessage title="Erro" message="ID do aluno n√£o fornecido na URL."/>; // [cite: 47]
  if (!isLoadingStudent && !errorLoadingStudent && !student) { return <ErrorMessage title="N√£o Encontrado" message={`Aluno com ID "${studentId}" n√£o encontrado.`} />; // [cite: 48]
  }
  if (errorLoadingStudent) { return <ErrorMessage title="Erro ao Carregar Aluno" message={errorLoadingStudent.message} />; // [cite: 49]
  }

  const formatDate = (dateString?: string): string => {
      if (!dateString) return 'N√£o informado'; // [cite: 50]
      try {
          const date = new Date(dateString); // [cite: 51]
          if (isNaN(date.getTime())) return dateString; // [cite: 51]
          return date.toLocaleDateString('pt-BR', { timeZone: 'UTC' }); // [cite: 52]
      } catch (e) {
          return dateString; // [cite: 52]
      }
  };

  const renderFichasContent = () => {
    if (isLoadingWorkouts) {
      return <LoadingSpinner text="Carregando rotinas..." />; // [cite: 53]
    }
    if (errorLoadingWorkouts) {
      return <ErrorMessage title="Erro ao Carregar Rotinas" message={errorLoadingWorkouts.message} />; // [cite: 54]
    }
    if (Array.isArray(studentWorkouts) && studentWorkouts.length > 0) { // [cite: 55]
      return (
        <div className="space-y-4">
          {studentWorkouts.map((rotina) => ( 
            <div key={rotina._id} className="border rounded-lg p-4 shadow-sm dark:border-gray-700 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3">
              <div className="flex-grow">
                <h3 className="font-semibold text-lg text-gray-900 dark:text-gray-100 mb-1">{rotina.titulo}</h3> {/* [cite: 56] */}
                {rotina.descricao && <p className="text-sm text-muted-foreground mb-2">{rotina.descricao}</p>} {/* [cite: 56] */}
                <p className="text-xs text-muted-foreground">
                  Criada em: {formatDate(rotina.criadoEm)}
                </p>
              </div>
       
              <div className="flex-shrink-0 flex gap-2 self-start sm:self-center"> {/* [cite: 57] */}
                <Button variant="outline" size="icon" className="h-8 w-8" title="Visualizar Rotina" onClick={() => handleViewFichaClick(rotina)}> <Eye className="w-4 h-4" /> </Button> {/* [cite: 57] */}
                <Button variant="outline" size="icon" className="h-8 w-8" title="Editar Rotina" onClick={() => handleEditFichaClick(rotina)} disabled={deleteMutation.isPending} > <Edit className="w-4 h-4" /> </Button> {/* [cite: 57] */}
                <Button variant="destructive" size="icon" className="h-8 w-8" title="Excluir Rotina" onClick={() => handleDeleteClick(rotina)} 
                  disabled={deleteMutation.isPending && deleteMutation.variables === rotina._id} > {/* [cite: 58] */}
                  {deleteMutation.isPending && deleteMutation.variables === rotina._id ? ( <Loader2 className="w-4 h-4 animate-spin" /> ) : ( <Trash2 className="w-4 h-4" /> )} {/* [cite: 59] */}
                </Button>
              </div>
            </div>
          ))}
        </div>
      );
    }
    return <p className="text-center py-6 text-gray-600 dark:text-gray-400">Este aluno ainda n√£o possui rotinas de treino atribu√≠das.</p>; // [cite: 60]
  };

  return (
    <div className="container mx-auto py-8 px-4"> {/* [cite: 61] */}
      <div className="mb-6">
        <Button variant="outline" onClick={() => navigate("/alunos")} >
          <ArrowLeft className="w-4 h-4 mr-2" />
           Voltar para Lista de Alunos
        </Button>
      </div>

      <Card className="mb-8">
        <CardHeader>
          <CardTitle className="flex items-center justify-between"> {/* [cite: 62] */}
             <span>Detalhes de {student?.nome}</span>
             <Link href={`/alunos/editar/${studentId}`}>
               <Button variant="outline" size="sm">
                 <Edit className="w-4 h-4 mr-2" /> Editar Aluno
               </Button>
             </Link>
          </CardTitle> {/* [cite: 63] */}
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-3 text-sm">
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                <UserCircle className="w-5 h-5 text-gray-500 dark:text-gray-400 flex-shrink-0" />
                <span><strong>Nome:</strong> {student?.nome ?? 'N√£o informado'}</span> {/* [cite: 64] */}
              </div>
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500 dark:text-gray-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}> <path strokeLinecap="round" strokeLinejoin="round" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.206" /> </svg>
                <span><strong>Email:</strong> {student?.email ?? 'N√£o informado'}</span> {/* [cite: 65, 66] */}
              </div>
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                <Phone className="w-5 h-5 text-gray-500 dark:text-gray-400 flex-shrink-0" />
                <span><strong>Telefone:</strong> {student?.phone ?? 'N√£o informado'}</span> {/* [cite: 66, 67] */}
              </div>
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                <Calendar className="w-5 h-5 text-gray-500 dark:text-gray-400 flex-shrink-0" />
                <span><strong>Data de Nasc.:</strong> {formatDate(student?.birthDate)}</span>
              </div>
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300"> {/* [cite: 68] */}
                <Info className="w-5 h-5 text-gray-500 dark:text-gray-400 flex-shrink-0" />
                <span><strong>G√™nero:</strong> {student?.gender ?? 'N√£o informado'}</span> {/* [cite: 68, 69] */}
              </div>
          </div>
           <Separator className="my-4" />
           <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-3 text-sm">
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                <Weight className="w-5 h-5 text-gray-500 dark:text-gray-400 flex-shrink-0" />
                <span><strong>Peso:</strong> {student?.weight ? `${student.weight} kg` : 'N√£o informado'}</span> {/* [cite: 70, 71] */}
              </div>
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                <Ruler className="w-5 h-5 text-gray-500 dark:text-gray-400 flex-shrink-0" />
                <span><strong>Altura:</strong> {student?.height ? `${student.height} cm` : 'N√£o informado'}</span> {/* [cite: 71, 72] */}
              </div>
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                <Target className="w-5 h-5 text-gray-500 dark:text-gray-400 flex-shrink-0" />
                <span><strong>Objetivo:</strong> {student?.goal ?? 'N√£o informado'}</span> {/* [cite: 72, 73] */}
              </div>
              <div className="flex items-center gap-2 text-gray-700 dark:text-gray-300">
                <Calendar className="w-5 h-5 text-gray-500 dark:text-gray-400 flex-shrink-0" />
                <span><strong>Data de In√≠cio:</strong> {formatDate(student?.startDate)}</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-gray-700 dark:text-gray-300"> {/* [cite: 74] */}
                 <Info className="w-5 h-5 text-gray-500 dark:text-gray-400 flex-shrink-0" />
                 <strong>Status:</strong>
                 <Badge variant={student?.status === 'active' ? 'success' : 'secondary'} className="ml-1"> {/* [cite: 75] */}
                     {student?.status === 'active' ? 'Ativo' : 'Inativo'} {/* [cite: 76] */}
                 </Badge>
              </div>
            </div>
           {student?.notes && (
               <>
                  <Separator className="my-4" />
                  <div className="flex items-start gap-2 text-sm text-gray-700 dark:text-gray-300"> {/* [cite: 77] */}
                      <StickyNote className="w-5 h-5 text-gray-500 dark:text-gray-400 mt-1 flex-shrink-0" />
                      <div>
                          <strong>Observa√ß√µes:</strong>
                          <p className="mt-1 whitespace-pre-wrap">{student.notes}</p> {/* [cite: 78] */}
                      </div>
                  </div>
               </>
           )}
        </CardContent>
      </Card> {/* [cite: 79] */}

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            Rotinas de Treino Atribu√≠das
            <Button size="sm" onClick={handleCreateFichaClick} disabled={!studentId || !student}> {/* [cite: 79] */}
              <Dumbbell className="w-4 h-4 mr-2" /> Nova Rotina para {student?.nome?.split(' ')[0]}
            </Button> {/* [cite: 80] */}
          </CardTitle>
        </CardHeader>
        <CardContent>
          {renderFichasContent()}
        </CardContent>
      </Card> {/* [cite: 81] */}

      {/* // Asegure que o nome da prop aqui seja o mesmo esperado pelo TreinoFormModal */}
      {isTreinoFormModalOpen && (
          <TreinoFormModal
              open={isTreinoFormModalOpen}
              onClose={() => {setIsTreinoFormModalOpen(false); setFichaParaEditarOuCriar(null);}}
              onSuccess={handleTreinoFormSuccess}
              alunos={student ? [student] : []}
              // ****** ALTERA√á√ÉO PRINCIPAL AQUI ******
              rotinaParaEditar={fichaParaEditarOuCriar} 
              // A prop no modal √© 'rotinaParaEditar', ent√£o passamos o valor com esse nome.
              // A l√≥gica de alunoId tamb√©m foi ajustada para refletir o estado de fichaParaEditarOuCriar
              alunoId={!(fichaParaEditarOuCriar && fichaParaEditarOuCriar._id) ? studentId : undefined}
          />
      )}
      {isViewFichaModalOpen && fichaParaVisualizar && (
          <FichaViewModal
              isOpen={isViewFichaModalOpen}
              onClose={() => setIsViewFichaModalOpen(false)}
              ficha={fichaParaVisualizar} // [cite: 83]
              onEditFicha={handleTriggerEditFichaFromView}
              onUseOuCopiarFicha={handleTriggerCopyFichaFromView}
          />
      )}
      {isAssociarModalOpen && fichaOriginalParaAssociar && (
        <AssociarModeloAlunoModal
            isOpen={isAssociarModalOpen}
            onClose={() => setIsAssociarModalOpen(false)} // [cite: 84]
            fichaModeloId={fichaOriginalParaAssociar.id} // [cite: 84]
            fichaModeloTitulo={fichaOriginalParaAssociar.titulo} // [cite: 84]
        />
      )}
      <ModalConfirmacao
        isOpen={isConfirmOpen}
        onClose={closeConfirmDialog}
        onConfirm={confirmDeleteAction}
        titulo={confirmOptions.titulo}
        mensagem={confirmOptions.mensagem}
        textoConfirmar={confirmOptions.textoConfirmar}
        textoCancelar={confirmOptions.textoCancelar} // [cite: 85]
        isLoadingConfirm={deleteMutation.isPending} // [cite: 85]
      />
    </div>
  );
}

export default StudentDetail; // [cite: 86]
==== ./client/src/pages/alunos/edit.tsx ====

    // client/src/pages/alunos/edit.tsx
    import React from 'react';
    import { useLocation, Link } from 'wouter'; // useParams n√£o √© mais necess√°rio aqui se id vem via prop
    import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
    import { StudentForm, StudentFormDataProcessed } from '@/forms/student-form';
    import { Loader2, ChevronLeft } from 'lucide-react';
    // import { Button } from '@/components/ui/button'; // N√£o usado diretamente aqui
    import { useToast } from '@/hooks/use-toast';
    import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
    import { fetchWithAuth } from '@/lib/apiClient';
    import { Aluno } from '@/types/aluno';
    import ErrorMessage from '@/components/ErrorMessage';

    // <<< NOVA INTERFACE PARA PROPS >>>
    interface EditStudentPageProps {
      id?: string; // O ID vir√° dos par√¢metros da rota, passado como prop pelo App.tsx
    }

    // <<< COMPONENTE AGORA ACEITA PROPS >>>
    const EditStudentPage: React.FC<EditStudentPageProps> = ({ id }) => {
        const [, setLocation] = useLocation();
        const queryClient = useQueryClient();
        const { toast } = useToast();
        const studentId = id; // Usa o ID da prop

        const { data: studentData, isLoading, isError, error } = useQuery<Aluno, Error>({
            queryKey: ['student', studentId],
            queryFn: async (): Promise<Aluno> => {
                if (!studentId) throw new Error("ID do aluno n√£o fornecido.");
                const data = await fetchWithAuth<Aluno>(`/api/alunos/${studentId}`);
                if (!data) throw new Error("Aluno n√£o encontrado ou resposta vazia.");
                return data;
            },
            enabled: !!studentId,
            retry: 1,
        });

        const mutation = useMutation<Aluno, Error, StudentFormDataProcessed>({
            mutationFn: async (updatedData: StudentFormDataProcessed): Promise<Aluno> => {
                if (!studentId) throw new Error("ID do aluno n√£o fornecido para atualiza√ß√£o.");
                return fetchWithAuth<Aluno>(`/api/alunos/${studentId}`, {
                    method: 'PUT',
                    body: JSON.stringify(updatedData),
                });
            },
            onSuccess: (updatedStudent) => {
                toast({ title: "Sucesso!", description: `${updatedStudent.nome} atualizado com sucesso.` });
                queryClient.invalidateQueries({ queryKey: ['alunos'] });
                queryClient.invalidateQueries({ queryKey: ['student', studentId] });
                setLocation('/alunos');
            },
            onError: (error) => {
                console.error("Erro na muta√ß√£o de atualiza√ß√£o:", error);
                toast({ variant: "destructive", title: "Erro ao atualizar", description: error.message || "N√£o foi poss√≠vel salvar as altera√ß√µes." });
            },
        });

        if (isLoading) {
            return <div className="flex justify-center items-center min-h-[calc(100vh-200px)]"><Loader2 className="h-10 w-10 animate-spin text-primary" /></div>;
        }

        if (isError || !studentData) {
            return (
                <div className="p-4 md:p-6 lg:p-8 text-center">
                    <Link href="/alunos" className="inline-flex items-center mb-4 text-sm text-primary hover:text-primary/90 dark:text-blue-400 dark:hover:text-blue-300">
                        <ChevronLeft className="w-4 h-4 mr-1" /> Voltar para Alunos
                    </Link>
                    <Card className="max-w-xl mx-auto mt-4 border-red-200 dark:border-red-800 bg-red-50 dark:bg-red-900/20">
                        <CardHeader>
                             <CardTitle className="text-xl text-red-700 dark:text-red-300">Erro ao Carregar Aluno</CardTitle>
                        </CardHeader>
                        <CardContent>
                             <ErrorMessage message={error?.message || `N√£o foi poss√≠vel buscar os dados do aluno com ID ${studentId || 'desconhecido'}. Verifique o ID ou tente novamente.`} />
                        </CardContent>
                    </Card>
                </div>
            );
        }

        return (
            <div className="p-4 md:p-6 lg:p-8">
                <Link href="/alunos" className="inline-flex items-center mb-4 text-sm text-primary hover:text-primary/90 dark:text-blue-400 dark:hover:text-blue-300">
                    <ChevronLeft className="w-4 h-4 mr-1" /> Voltar para Alunos
                </Link>

                 <Card className="max-w-3xl mx-auto border border-gray-200 dark:border-gray-700 shadow-sm bg-white dark:bg-gray-900">
                     <CardHeader className="px-6 pt-6 pb-4 border-b dark:border-gray-700">
                        <CardTitle className="text-xl font-semibold text-gray-900 dark:text-gray-100">Editar Aluno</CardTitle>
                        <CardDescription className="text-gray-500 dark:text-gray-400">Atualize os dados de {studentData.nome}.</CardDescription>
                    </CardHeader>
                     <CardContent className="px-6 py-6">
                        <StudentForm
                            initialData={studentData}
                            isEditing={true}
                            onSubmit={(processedFormData: StudentFormDataProcessed) => {
                                mutation.mutate(processedFormData);
                            }}
                            isLoading={mutation.isPending}
                        />
                     </CardContent>
                 </Card>
            </div>
        );
    }

    export default EditStudentPage;
    
==== ./client/src/pages/alunos/index.tsx ====

// client/src/pages/alunos/index.tsx
// ATUALIZADO: Adicionada invalida√ß√£o da query ["/api/alunos"] no onSuccess da exclus√£o de aluno

import React, { useState, useEffect } from "react"; // Adicionado useEffect
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useLocation, Link } from "wouter";

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { Eye, Pencil, Plus, Search, Trash, UserX } from "lucide-react"; // Adicionado UserX para √≠cone de exclus√£o
// import { queryClient as localQueryClient, apiRequest } from "@/lib/queryClient"; // Removido localQueryClient se estiver usando o hook
import { fetchWithAuth } from "@/lib/apiClient"; // Usar fetchWithAuth consistentemente
import { useToast } from "@/hooks/use-toast";
import { ModalConfirmacao } from "@/components/ui/modal-confirmacao";
import { useConfirmDialog } from "@/hooks/useConfirmDialog";
import ErrorMessage from "@/components/ErrorMessage";
import { Aluno } from "@/types/aluno"; // Supondo que esta interface existe e √© relevante

export default function StudentsIndex() {
    const [, setLocation] = useLocation();
    const { toast } = useToast();
    const queryClient = useQueryClient(); // Hook para acessar o query client
    const {
        isOpen: isConfirmOpen,
        options: confirmOptions,
        openConfirmDialog,
        closeConfirmDialog,
        confirm: confirmAction,
    } = useConfirmDialog();
    const [searchQuery, setSearchQuery] = useState("");
    const [alunoParaExcluir, setAlunoParaExcluir] = useState<Aluno | null>(null);


    const { data: students = [], isLoading, isError, error, refetch } = useQuery<Aluno[], Error>({
        queryKey: ['/api/alunos'], // Chave padronizada
        queryFn: async (): Promise<Aluno[]> => {
            const data = await fetchWithAuth<Aluno[]>("/api/alunos");
            return Array.isArray(data) ? data : [];
        },
        retry: 1,
    });

    // Muta√ß√£o para excluir aluno
    const deleteStudentMutation = useMutation<any, Error, string>({
        mutationFn: (alunoId: string) => {
            return fetchWithAuth(`/api/alunos/${alunoId}`, { method: 'DELETE' });
        },
        onSuccess: (data, alunoId) => {
            toast({ title: "Aluno Removido", description: `${alunoParaExcluir?.nome || 'O aluno'} foi removido com sucesso.` });
            // **INVALIDE A QUERY AQUI**
            queryClient.invalidateQueries({ queryKey: ['/api/alunos'] });
            // Se voc√™ tiver outras queries que dependem de um aluno espec√≠fico, invalide-as tamb√©m:
            // queryClient.invalidateQueries({ queryKey: ['aluno', alunoId] });
            // queryClient.invalidateQueries({ queryKey: ['fichasAluno', alunoId] }); // Se o aluno tinha fichas
            setAlunoParaExcluir(null);
            closeConfirmDialog(); // Fecha o modal de confirma√ß√£o
        },
        onError: (error) => {
            toast({ variant: "destructive", title: "Erro ao Remover", description: error.message || "N√£o foi poss√≠vel remover o aluno." });
            setAlunoParaExcluir(null);
            closeConfirmDialog();
        },
    });


    const filteredStudents = students.filter((student) => {
        const fullName = (student.nome || "").toLowerCase();
        const email = (student.email || "").toLowerCase();
        const query = searchQuery.toLowerCase();
        return fullName.includes(query) || email.includes(query);
    });

    const renderStudentSkeleton = () => {
      return [...Array(5)].map((_, i) => (
            <TableRow key={`skeleton-${i}`}>
                <TableCell className="pl-6 py-4">
                    <div className="flex items-center">
                        <Skeleton className="h-10 w-10 rounded-full mr-4" />
                        <Skeleton className="h-4 w-32 rounded" />
                    </div>
                </TableCell>
                <TableCell className="px-6 py-4"><Skeleton className="h-4 w-48 rounded" /></TableCell>
                <TableCell className="px-6 py-4"><Skeleton className="h-6 w-16 rounded-full" /></TableCell>
                <TableCell className="text-right pr-6 py-4">
                    <div className="flex justify-end items-center space-x-1">
                        <Skeleton className="h-8 w-8 rounded" />
                        <Skeleton className="h-8 w-8 rounded" />
                        <Skeleton className="h-8 w-8 rounded" />
                    </div>
                </TableCell>
            </TableRow>
        ));
     };

    const handleDeleteClick = (aluno: Aluno) => {
        if (!aluno._id || !aluno.nome) {
            toast({ variant: "destructive", title: "Erro", description: "ID ou nome do aluno inv√°lido para exclus√£o." });
            return;
        }
        setAlunoParaExcluir(aluno); // Guarda o aluno para usar o nome no toast de sucesso
        openConfirmDialog({
            titulo: "Remover Aluno",
            mensagem: `Tem certeza que deseja remover o aluno ${aluno.nome}? Esta a√ß√£o n√£o pode ser desfeita e remover√° tamb√©m suas fichas de treino.`,
            textoConfirmar: "Remover Aluno",
            textoCancelar: "Cancelar",
            onConfirm: () => {
                if (aluno._id) { // Seguran√ßa extra
                    deleteStudentMutation.mutate(aluno._id);
                }
            },
        });
    };

    return (
        <div className="p-4 md:p-6 lg:p-8">
            <Card className="border border-gray-100 dark:border-gray-800 shadow-sm overflow-hidden bg-white dark:bg-gray-900">
                <CardHeader className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-2 sm:space-y-0 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <CardTitle className="text-xl font-semibold text-gray-800 dark:text-gray-100">Alunos</CardTitle>
                    <div className="flex flex-col sm:flex-row gap-2 sm:gap-4">
                        <div className="relative">
                            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 h-4 w-4 pointer-events-none" />
                            <Input type="search" placeholder="Pesquisar por nome ou email..." className="pl-9 w-full sm:w-64 text-sm bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 rounded-md" value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} aria-label="Pesquisar alunos" />
                        </div>
                        <Link href="/alunos/novo">
                            <Button><Plus className="h-4 w-4 mr-2" /> Adicionar Aluno</Button>
                        </Link>
                    </div>
                </CardHeader>
                <CardContent className="p-0">
                    <div className="overflow-x-auto">
                        <Table>
                            <TableHeader className="bg-gray-50 dark:bg-gray-800/50">
                                <TableRow>
                                    <TableHead className="pl-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Aluno</TableHead>
                                    <TableHead className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Email</TableHead>
                                    <TableHead className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Status</TableHead>
                                    <TableHead className="pr-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">A√ß√µes</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                                {isLoading && renderStudentSkeleton()}
                                {isError && !isLoading && (
                                    <TableRow>
                                        <TableCell colSpan={4} className="px-6 py-16 text-center">
                                            <ErrorMessage title="Erro ao Carregar Alunos" message={error?.message || "N√£o foi poss√≠vel buscar os dados. Tente novamente."} />
                                        </TableCell>
                                    </TableRow>
                                )}
                                {!isLoading && !isError && filteredStudents.length === 0 && (
                                     <TableRow>
                                        <TableCell colSpan={4} className="px-6 py-16 text-center text-gray-500 dark:text-gray-400">
                                            {searchQuery ? `Nenhum aluno encontrado para "${searchQuery}".` : "Nenhum aluno cadastrado ainda."}
                                        </TableCell>
                                    </TableRow>
                                )}
                                {!isLoading && !isError && filteredStudents.length > 0 &&
                                    filteredStudents.map((student) => (
                                        <TableRow key={student._id} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                                            <TableCell className="pl-6 py-4 whitespace-nowrap">
                                                <div className="flex items-center">
                                                    <div className="flex-shrink-0 h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 flex items-center justify-center mr-4 font-semibold text-sm">
                                                        {student.nome?.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase() || '?'}
                                                    </div>
                                                    <div className="text-sm font-medium text-gray-900 dark:text-gray-100">{student.nome}</div>
                                                </div>
                                            </TableCell>
                                            <TableCell className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">{student.email || "-"}</TableCell>
                                            <TableCell className="px-6 py-4 whitespace-nowrap">
                                                <Badge variant={student.status === "active" ? "success" : "destructive"}>
                                                    {student.status === "active" ? "Ativo" : "Inativo"}
                                                </Badge>
                                            </TableCell>
                                            <TableCell className="pr-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                <div className="flex justify-end items-center space-x-1">
                                                    <Button variant="ghost" size="icon" className="text-gray-400 hover:text-blue-600 h-8 w-8" onClick={() => setLocation(`/alunos/${student._id}`)} title="Visualizar">
                                                        <Eye className="h-4 w-4" />
                                                    </Button>
                                                    <Link href={`/alunos/editar/${student._id}`}>
                                                        <Button variant="ghost" size="icon" asChild className="text-gray-400 hover:text-yellow-600 h-8 w-8" title="Editar">
                                                            <a><Pencil className="h-4 w-4" /></a>
                                                        </Button>
                                                    </Link>
                                                    <Button variant="ghost" size="icon" className="text-gray-400 hover:text-red-600 h-8 w-8" onClick={() => handleDeleteClick(student)} title="Remover">
                                                        <UserX className="h-4 w-4" /> {/* √çcone mais apropriado para excluir usu√°rio */}
                                                    </Button>
                                                </div>
                                            </TableCell>
                                        </TableRow>
                                    ))}
                            </TableBody>
                        </Table>
                    </div>
                </CardContent>
            </Card>

            <ModalConfirmacao
                isOpen={isConfirmOpen}
                onClose={closeConfirmDialog}
                onConfirm={confirmAction} // confirmAction j√° chama deleteStudentMutation.mutate
                titulo={confirmOptions.titulo}
                mensagem={confirmOptions.mensagem}
                textoConfirmar={confirmOptions.textoConfirmar}
                textoCancelar={confirmOptions.textoCancelar}
                isLoadingConfirm={deleteStudentMutation.isPending}
            />
        </div>
    );
}
