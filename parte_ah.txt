
==== ./client/src/pages/alunos/new.tsx ====

// client/src/pages/alunos/new.tsx
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
// Importa StudentForm e o tipo de dados processado que ele envia
import { StudentForm, StudentFormDataProcessed } from "@/forms/student-form";
import { Link, useLocation } from "wouter";
import { ChevronLeft } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { fetchWithAuth } from "@/lib/apiClient"; // <<< Substitui apiRequest
import { Aluno } from "@/types/aluno"; // <<< Usa o tipo Aluno importado
import { User } from "@/context/UserContext"; // <<< Usa o tipo User do contexto

export default function NewStudent() {
    const [, navigate] = useLocation();
    const queryClient = useQueryClient();
    const { toast } = useToast();

    // Fun√ß√£o para obter o ID do treinador logado (do localStorage)
    const getTrainerId = (): string | undefined => {
        const savedUserData = localStorage.getItem("userData"); // Usa a chave 'userData'
        if (savedUserData) {
            try {
                // Assume que 'userData' cont√©m um objeto User com id (string)
                const user: User = JSON.parse(savedUserData);
                // Retorna o ID como string, ou undefined se n√£o existir
                return user?.id ?? undefined;
            } catch (e) {
                console.error("Erro ao obter trainerId do localStorage:", e);
                return undefined;
            }
        }
        return undefined;
    }
    const trainerId = getTrainerId(); // Obt√©m o ID do treinador ao renderizar

    // Mutation para criar um novo aluno
    // Espera StudentFormDataProcessed (com n√∫meros) do formul√°rio
    const mutation = useMutation<Aluno, Error, StudentFormDataProcessed>({
        mutationFn: async (newStudentData: StudentFormDataProcessed): Promise<Aluno> => {
            // Pega o trainerId obtido anteriormente
            const currentTrainerId = getTrainerId(); // Re-verifica caso algo mude
            if (!currentTrainerId) {
                // Idealmente, o usu√°rio nem deveria estar nesta p√°gina sem estar logado
                // Mas √© bom ter uma verifica√ß√£o defensiva
                throw new Error("ID do treinador n√£o encontrado. Fa√ßa login novamente.");
            }

            // Monta o payload final para a API
            const dataToSend = {
                 ...newStudentData,
                 trainerId: currentTrainerId // Inclui o ID do treinador
                };

            console.log("Dados enviados para cria√ß√£o:", JSON.stringify(dataToSend, null, 2)); // Log para depura√ß√£o

            // Usa fetchWithAuth para enviar os dados via POST
            // Espera receber o objeto Aluno criado como resposta
            return fetchWithAuth<Aluno>("/api/alunos", {
                method: 'POST',
                body: JSON.stringify(dataToSend), // Envia os dados processados
            });
        },
        onSuccess: (createdStudent) => {
            toast({ title: "Aluno Cadastrado!", description: `${createdStudent?.nome || 'Aluno'} adicionado com sucesso.` });
            // Invalida a query 'alunos' para atualizar a lista na p√°gina principal
            queryClient.invalidateQueries({ queryKey: ['alunos'] });
            navigate("/alunos"); // Redireciona para a lista de alunos
        },
        onError: (error) => {
            console.error("Erro na muta√ß√£o de cria√ß√£o:", error);
            // Mostra a mensagem de erro vinda do fetchWithAuth (ou uma padr√£o)
            toast({ variant: "destructive", title: "Erro ao Cadastrar", description: error.message || "N√£o foi poss√≠vel adicionar o aluno." });
        },
    });

    // Fun√ß√£o chamada pelo onSubmit do StudentForm
    const handleCreateStudent = (formData: StudentFormDataProcessed) => {
        // Os dados j√° est√£o processados (com n√∫meros) pelo StudentForm
        mutation.mutate(formData); // Dispara a mutation
    };

    return (
        <div className="p-4 md:p-6 lg:p-8">
            {/* Link de Voltar */}
            <Link href="/alunos" className="inline-flex items-center mb-4 text-sm text-primary hover:text-primary/90 dark:text-blue-400 dark:hover:text-blue-300">
                <ChevronLeft className="w-4 h-4 mr-1" /> Voltar para Alunos
            </Link>

            {/* Card do Formul√°rio */}
            <Card className="max-w-3xl mx-auto border border-gray-200 dark:border-gray-700 shadow-sm bg-white dark:bg-gray-900">
                <CardHeader className="px-6 pt-6 pb-4 border-b dark:border-gray-700">
                    <CardTitle className="text-xl font-semibold text-gray-900 dark:text-gray-100">Adicionar Novo Aluno</CardTitle>
                    <CardDescription className="text-gray-500 dark:text-gray-400">Insira os dados do novo aluno para come√ßar.</CardDescription>
                </CardHeader>
                <CardContent className="px-6 py-6">
                    {/* Renderiza o formul√°rio, passando a fun√ß√£o de submit e o estado de loading */}
                    <StudentForm
                        onSubmit={handleCreateStudent}
                        isLoading={mutation.isPending} // Passa o estado de loading da mutation
                        isEditing={false} // Indica que √© modo de cria√ß√£o
                    />
                </CardContent>
            </Card>
        </div>
    );
}
==== ./client/src/pages/dashboard.tsx ====

// client/src/pages/dashboard.tsx
import { useQuery } from "@tanstack/react-query";
import { Link } from "wouter";
import { useUser } from "@/context/UserContext";
import { apiRequest } from "@/lib/queryClient"; 

import { StatsCard } from "@/components/ui/dashboard/stats-card";
import { SessionsCard } from "@/components/ui/dashboard/sessions-card";
// import { ActivityCard } from "@/components/ui/dashboard/activity-card"; // <<<< REMOVER IMPORTA√á√ÉO
import { WorkoutPlansGrid } from "@/components/ui/dashboard/workout-plans-grid";
import { StudentsTable } from "@/components/ui/dashboard/students-table"; 

import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import LoadingSpinner from "@/components/LoadingSpinner"; 
import ErrorMessage from "@/components/ErrorMessage"; 

interface DashboardStatsData {
  totalAlunos: number;
  treinosAtivos: number;
  sessoesHojeCount: number;
  taxaConclusaoGeral: number; 
}

export default function Dashboard() {
  const { user } = useUser();
  const trainerId = user?.id; 

  const saudacaoNome = user?.firstName || user?.username || "Personal";

  const { 
    data: dashboardStats, 
    isLoading: isLoadingStats, 
    error: errorStats 
  } = useQuery<DashboardStatsData, Error>({
    queryKey: ["/api/dashboard/geral", trainerId], 
    queryFn: async () => {
      if (!trainerId) throw new Error("Trainer ID n√£o encontrado para buscar estat√≠sticas.");
      return apiRequest<DashboardStatsData>("GET", `/api/dashboard/geral?trainerId=${trainerId}`);
    },
    enabled: !!trainerId, 
  });

  const sessoesHojeTexto = isLoadingStats 
    ? "Carregando informa√ß√µes de compromissos..." 
    : dashboardStats?.sessoesHojeCount !== undefined
      ? `Voc√™ tem ${dashboardStats.sessoesHojeCount} ${dashboardStats.sessoesHojeCount === 1 ? 'compromisso agendado' : 'compromissos agendados'} para hoje.`
      : "Verifique seus compromissos agendados para hoje.";

  if (!trainerId && !user) {
    return <LoadingSpinner text="Carregando dados do usu√°rio..." />;
  }
  if (!trainerId) {
    return <ErrorMessage title="Erro" message="N√£o foi poss√≠vel identificar o treinador. Tente fazer login novamente." />;
  }

  const taxaConclusaoFormatada = isLoadingStats || dashboardStats?.taxaConclusaoGeral === undefined
    ? "Calculando..." 
    : `${Math.round((dashboardStats.taxaConclusaoGeral) * 100)}%`;

  return (
    <div className="flex flex-col h-full overflow-y-auto p-4 md:p-6 lg:p-8 space-y-8">

      <header className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
        <div>
          <h1 className="text-2xl md:text-3xl font-bold text-gray-800 dark:text-gray-100">
            Bem-vindo(a) de volta, {saudacaoNome}! üëã
          </h1>
          <p className="text-gray-500 dark:text-gray-400 text-sm mt-1">
            {sessoesHojeTexto}
          </p>
        </div>
      </header>

      {errorStats && (
        <ErrorMessage title="Erro ao Carregar Estat√≠sticas" message={errorStats.message} />
      )}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6">
        <StatsCard
          title="Total de Alunos"
          value={isLoadingStats ? "..." : (dashboardStats?.totalAlunos ?? 0).toString()}
          icon="students"
          isLoading={isLoadingStats}
        />
        <StatsCard
          title="Treinos Ativos"
          value={isLoadingStats ? "..." : (dashboardStats?.treinosAtivos ?? 0).toString()}
          icon="workouts"
          isLoading={isLoadingStats}
        />
        <StatsCard
          title="Compromissos Hoje"
          value={isLoadingStats ? "..." : (dashboardStats?.sessoesHojeCount ?? 0).toString()}
          icon="sessions"
          isLoading={isLoadingStats}
        />
        <StatsCard
          title="Taxa de Conclus√£o"
          value={taxaConclusaoFormatada}
          icon="completion"
          isLoading={isLoadingStats}
        />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <WorkoutPlansGrid trainerId={trainerId} />
          <StudentsTable trainerId={trainerId} /> 
        </div>

        <div className="lg:col-span-1 space-y-6">
          <SessionsCard trainerId={trainerId} /> 
          {/* <ActivityCard trainerId={trainerId} /> */} {/* <<<< REMOVIDO ActivityCard DAQUI >>>> */}
        </div>
      </div>
      
      <div>
        <h2 className="text-xl font-semibold text-gray-700 dark:text-gray-300 mb-3">A√ß√µes R√°pidas</h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
          <Link href="/alunos/novo">
            <Button variant="secondary" className="w-full py-3 text-sm">
              <Plus className="mr-2 w-4 h-4" /> Adicionar Aluno
            </Button>
          </Link>
          <Link href="/treinos"> 
            <Button variant="secondary" className="w-full py-3 text-sm">
              <Plus className="mr-2 w-4 h-4" /> Criar Ficha Modelo
            </Button>
          </Link>
          <Link href="/exercises">
            <Button variant="secondary" className="w-full py-3 text-sm">
              <Plus className="mr-2 w-4 h-4" /> Novo Exerc√≠cio
            </Button>
          </Link>
          <Button variant="secondary" className="w-full py-3 text-sm" disabled>
            <Plus className="mr-2 w-4 h-4" /> Nova Avalia√ß√£o (Em breve)
          </Button>
        </div>
      </div>
    </div>
  );
}
==== ./client/src/pages/exercises/index.tsx ====

// client/src/pages/exercises/index.tsx
// ATUALIZADO: Adicionadas importa√ß√µes de FilterX e Badge

import { useEffect, useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Star, PlayCircle, FilterX } from "lucide-react"; // Adicionado FilterX
import ExerciseFormModal from "@/components/dialogs/ExerciseFormModal";
import ExerciseEditModal from "@/components/dialogs/ExerciseEditModal";
import ExerciseDeleteButton from "@/components/buttons/ExerciseDeleteButton";
import { useToast } from "@/hooks/use-toast";
import VideoPlayerModal from "@/components/dialogs/VideoPlayerModal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { fetchWithAuth } from "@/lib/apiClient";
import { useQueryClient } from "@tanstack/react-query";
import { Badge } from "@/components/ui/badge"; // Adicionada importa√ß√£o do Badge

interface Exercicio {
  _id: string;
  nome: string;
  descricao?: string;
  grupoMuscular?: string;
  categoria?: string; // Usado para o filtro de "Tipo" no backend
  urlVideo?: string;
  isCustom: boolean;
  favoritedBy?: string[];
  isFavoritedByCurrentUser?: boolean;
}

type AbaSelecionada = "meus" | "app" | "favoritos";
const ALL_FILTER_VALUE = "all";

export default function ExercisesPage() {
  const [exercicios, setExercicios] = useState<Exercicio[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [aba, setAba] = useState<AbaSelecionada>("app");
  const [videoModalUrl, setVideoModalUrl] = useState<string | null>(null);
  const [grupoSelecionado, setGrupoSelecionado] = useState<string>(ALL_FILTER_VALUE);
  const [categoriaSelecionada, setCategoriaSelecionada] = useState<string>(ALL_FILTER_VALUE);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const grupos = ["Peitoral", "Pernas", "Costas", "Ombros", "B√≠ceps", "Tr√≠ceps", "Abd√¥men", "Lombar", "Gl√∫teos", "Panturrilha", "Cardio", "Corpo Inteiro", "Outro"].sort((a,b) => a.localeCompare(b, 'pt-BR'));
  const categorias = ["For√ßa", "Resist√™ncia", "Hipertrofia", "Pot√™ncia", "Cardiovascular", "Flexibilidade", "Mobilidade", "Funcional", "Calistenia", "Outro"].sort((a,b) => a.localeCompare(b, 'pt-BR'));

  const fetchExercicios = async () => {
    setLoading(true);
    let rota = "/api/exercicios/app";
    if (aba === "meus") {
      rota = "/api/exercicios/meus";
    } else if (aba === "favoritos") {
      rota = "/api/exercicios/favoritos";
    }

    const params = new URLSearchParams();
    if (grupoSelecionado && grupoSelecionado !== ALL_FILTER_VALUE) {
        params.append('grupo', grupoSelecionado);
    }
    if (categoriaSelecionada && categoriaSelecionada !== ALL_FILTER_VALUE) {
        params.append('categoria', categoriaSelecionada);
    }
    const rotaComFiltros = `${rota}?${params.toString()}`;


    try {
      const data = await fetchWithAuth<Exercicio[]>(rotaComFiltros);
      setExercicios(Array.isArray(data) ? data : []);
    } catch (err: any) {
      toast({
        title: "Erro ao carregar exerc√≠cios",
        description: err.message || "N√£o foi poss√≠vel buscar os exerc√≠cios.",
        variant: "destructive",
      });
      setExercicios([]);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchExercicios();
  }, [aba, grupoSelecionado, categoriaSelecionada]);

  const filtrarPorNome = (lista: Exercicio[]) =>
    lista.filter((ex) =>
      ex.nome.toLowerCase().includes(searchTerm.toLowerCase())
    ).sort((a,b) => a.nome.localeCompare(b.nome, 'pt-BR'));


  const favoritar = async (id: string) => {
    try {
      await fetchWithAuth(`/api/exercicios/${id}/favorite`, { method: "POST" });
      toast({ title: "Sucesso", description: "Exerc√≠cio favoritado." });
      fetchExercicios();
      queryClient.invalidateQueries({ queryKey: ["/api/exercicios", aba, grupoSelecionado, categoriaSelecionada] });
    } catch (err: any) {
      toast({ title: "Erro ao favoritar", description: err.message, variant: "destructive" });
    }
  };

  const desfavoritar = async (id: string) => {
    try {
      await fetchWithAuth(`/api/exercicios/${id}/favorite`, { method: "DELETE" });
       toast({ title: "Sucesso", description: "Exerc√≠cio desfavoritado." });
      fetchExercicios();
      queryClient.invalidateQueries({ queryKey: ["/api/exercicios", aba, grupoSelecionado, categoriaSelecionada] });
    } catch (err: any) {
      toast({ title: "Erro ao desfavoritar", description: err.message, variant: "destructive" });
    }
  };
  
  const limparFiltros = () => {
    setSearchTerm("");
    setGrupoSelecionado(ALL_FILTER_VALUE);
    setCategoriaSelecionada(ALL_FILTER_VALUE);
  };


  const corGrupo: Record<string, string> = { Peitoral: "bg-red-100 text-red-700", Costas: "bg-blue-100 text-blue-700", Pernas: "bg-green-100 text-green-700", Ombros: "bg-yellow-100 text-yellow-700", B√≠ceps: "bg-purple-100 text-purple-700", Tr√≠ceps: "bg-pink-100 text-pink-700", Abd√¥men: "bg-orange-100 text-orange-700", Outros: "bg-gray-100 text-gray-700", Cardio: "bg-indigo-100 text-indigo-700", "Corpo Inteiro": "bg-teal-100 text-teal-700", Lombar: "bg-lime-100 text-lime-700", Gl√∫teos: "bg-fuchsia-100 text-fuchsia-700", Panturrilha: "bg-cyan-100 text-cyan-700" };
  const corCategoria: Record<string, string> = { For√ßa: "border-red-500", Resist√™ncia: "border-blue-500", Hipertrofia: "border-green-500", Pot√™ncia: "border-yellow-500", Cardiovascular: "border-indigo-500", Flexibilidade: "border-pink-500", Mobilidade: "border-purple-500", Funcional: "border-orange-500", Calistenia: "border-teal-500", Outro: "border-gray-500"};


  return (
    <div className="p-4 md:p-6 lg:p-8">
      <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
        <h1 className="text-2xl font-bold">Biblioteca de Exerc√≠cios</h1>
        {aba === "meus" && <ExerciseFormModal onCreated={fetchExercicios} />}
      </div>

      <Tabs defaultValue="app" onValueChange={(v) => setAba(v as AbaSelecionada)} className="mb-4">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="app">Exerc√≠cios do App</TabsTrigger>
          <TabsTrigger value="meus">Meus Exerc√≠cios</TabsTrigger>
          <TabsTrigger value="favoritos">Favoritos</TabsTrigger>
        </TabsList>
      </Tabs>

      <div className="flex flex-wrap gap-3 items-center bg-muted p-4 rounded-lg border mb-6">
        <Input placeholder="Buscar por nome..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="flex-grow sm:flex-grow-0 sm:w-48 bg-background dark:bg-input" />
        <Select onValueChange={setGrupoSelecionado} value={grupoSelecionado}>
          <SelectTrigger className="w-full sm:w-auto min-w-[180px] bg-background dark:bg-input"><SelectValue placeholder="Grupo muscular" /></SelectTrigger>
          <SelectContent>
            <SelectItem value={ALL_FILTER_VALUE}>Todos os Grupos</SelectItem>
            {grupos.map((g) => <SelectItem key={g} value={g}>{g}</SelectItem>)}
          </SelectContent>
        </Select>
        <Select onValueChange={setCategoriaSelecionada} value={categoriaSelecionada}>
          <SelectTrigger className="w-full sm:w-auto min-w-[180px] bg-background dark:bg-input"><SelectValue placeholder="Tipo/Categoria" /></SelectTrigger>
          <SelectContent>
            <SelectItem value={ALL_FILTER_VALUE}>Todos os Tipos</SelectItem>
            {categorias.map((c) => <SelectItem key={c} value={c}>{c}</SelectItem>)}
          </SelectContent>
        </Select>
        <Button variant="ghost" onClick={limparFiltros} size="sm" className="text-muted-foreground hover:text-foreground">
          <FilterX className="w-4 h-4 mr-1" /> Limpar
        </Button>
      </div>

      {loading ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {[...Array(8)].map((_, i) => (
            <Card key={i} className="rounded-xl border bg-card text-card-foreground shadow flex flex-col">
              <Skeleton className="h-40 w-full rounded-t-xl" />
              <div className="p-4 space-y-2 flex-grow">
                <Skeleton className="h-5 w-3/4" />
                <Skeleton className="h-4 w-1/2" />
                <Skeleton className="h-3 w-1/4 mt-1" />
                <Skeleton className="h-3 w-1/3 mt-1" />
              </div>
              <div className="p-2 flex justify-end border-t mt-auto">
                <Skeleton className="h-7 w-7 rounded-md" />
              </div>
            </Card>
          ))}
        </div>
      ) : filtrarPorNome(exercicios).length === 0 ? (
        <div className="text-center text-muted-foreground mt-10 py-10 border rounded-lg bg-card">
          <p className="text-lg">Nenhum exerc√≠cio encontrado.</p>
          { (searchTerm || grupoSelecionado !== ALL_FILTER_VALUE || categoriaSelecionada !== ALL_FILTER_VALUE) && <p className="text-sm">Tente ajustar seus filtros ou termo de busca.</p>}
          { aba === "meus" && !searchTerm && grupoSelecionado === ALL_FILTER_VALUE && categoriaSelecionada === ALL_FILTER_VALUE && (
             <p className="mt-2 text-sm">Clique em "+ Criar Exerc√≠cio" para adicionar um.</p>
          )}
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {filtrarPorNome(exercicios).map((ex) => {
            const isFavorited = ex.isFavoritedByCurrentUser ?? false;
            return (
              <Card key={ex._id} className="rounded-xl border bg-card text-card-foreground shadow flex flex-col overflow-hidden">
                <div className="w-full h-40 bg-gray-200 dark:bg-gray-700 relative group">
                  {ex.urlVideo ? (
                    <div className="w-full h-full cursor-pointer" onClick={() => setVideoModalUrl(ex.urlVideo ?? null)}>
                      <iframe
                        className="w-full h-full object-cover pointer-events-none"
                        src={ex.urlVideo.replace("watch?v=", "embed/")}
                        title={ex.nome}
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowFullScreen
                        loading="lazy"
                      />
                      <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 flex items-center justify-center transition-all duration-300 opacity-0 group-hover:opacity-100">
                        <PlayCircle className="w-12 h-12 text-white opacity-80" />
                      </div>
                    </div>
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-muted-foreground text-sm">
                      Sem V√≠deo
                    </div>
                  )}
                </div>
                <CardContent className="p-4 flex-grow flex flex-col">
                  <div className="flex gap-1 mb-2 flex-wrap">
                    {ex.grupoMuscular && <Badge variant="outline" className={`${corGrupo[ex.grupoMuscular] || 'bg-gray-100 text-gray-700'} border-transparent text-xs`}>{ex.grupoMuscular}</Badge>}
                    {ex.categoria && <Badge variant="outline" className={`border-2 ${corCategoria[ex.categoria] || 'border-gray-400'} text-xs`}>{ex.categoria}</Badge>}
                  </div>
                  <h2 className="font-semibold text-base truncate mb-1" title={ex.nome}>{ex.nome}</h2>
                  <p className="text-xs text-muted-foreground line-clamp-2 flex-grow mb-2" title={ex.descricao ?? ''}>
                    {ex.descricao || 'Nenhuma descri√ß√£o.'}
                  </p>
                  <div className="flex gap-1 items-center justify-end mt-auto pt-2 border-t">
                    {aba === "meus" && ex.isCustom && (
                      <>
                        <ExerciseEditModal exercicio={ex} onUpdated={fetchExercicios} />
                        <ExerciseDeleteButton exercicioId={ex._id} onDeleted={fetchExercicios} />
                      </>
                    )}
                    <Button variant="ghost" size="icon" onClick={() => isFavorited ? desfavoritar(ex._id) : favoritar(ex._id)} title={isFavorited ? "Desfavoritar" : "Favoritar"} className="h-7 w-7">
                      <Star className={`w-4 h-4 ${isFavorited ? 'fill-yellow-400 text-yellow-500' : 'text-muted-foreground hover:text-yellow-500'}`} />
                    </Button>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}
      <VideoPlayerModal videoUrl={videoModalUrl} onClose={() => setVideoModalUrl(null)} />
    </div>
  );
}

==== ./client/src/pages/index.tsx ====

import { useEffect, useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { Star } from "lucide-react";
import ExerciseFormModal from "@/components/dialogs/ExerciseFormModal";
import ExerciseEditModal from "@/components/dialogs/ExerciseEditModal";
import ExerciseDeleteButton from "@/components/buttons/ExerciseDeleteButton";
import { useToast } from "@/hooks/use-toast";
import VideoPlayerModal from "@/components/dialogs/VideoPlayerModal";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { handleApiError } from "@/lib/handleApiError";

interface Exercicio {
  _id: string;
  nome: string;
  descricao?: string;
  grupoMuscular?: string;
  categoria?: string;
  urlVideo?: string;
  isCustom: boolean;
  favoritedBy?: string[];
  isFavoritedByCurrentUser?: boolean;
}

type AbaSelecionada = "meus" | "app" | "favoritos";

const USER_ID_FRONTEND_SIMULADO = "609c1f9b6b6f9b001f9b6b6f";

export default function ExercisesPage() {
  const [exercicios, setExercicios] = useState<Exercicio[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [aba, setAba] = useState<AbaSelecionada>("app");
  const [videoModalUrl, setVideoModalUrl] = useState<string | null>(null);
  const [grupoSelecionado, setGrupoSelecionado] = useState<string | null>(null);
  const [categoriaSelecionada, setCategoriaSelecionada] = useState<string | null>(null);
  const { toast } = useToast();

  const grupos = ["Peitoral", "Costas", "Pernas", "Ombros", "B√≠ceps", "Tr√≠ceps", "Abd√¥men", "Outros"];
  const categorias = ["Superior", "Inferior", "Core", "Cardio", "Reabilita√ß√£o", "Outros"];

  const fetchExercicios = async () => {
    setLoading(true);
    try {
      const rota =
        aba === "meus"
          ? "/api/exercicios/meus"
          : aba === "app"
          ? "/api/exercicios/app"
          : "/api/exercicios/favoritos";

      const res = await fetch(rota, {
        method: "GET",
        credentials: "include",
      });

      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(`Erro ${res.status}: ${errorText}`);
      }

      const data = await res.json();
      setExercicios(data);
    } catch (error) {
      handleApiError(error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchExercicios();
  }, [aba, grupoSelecionado, categoriaSelecionada]);

  const exerciciosFiltrados = exercicios.filter((ex) => {
    const nomeMatch = ex.nome.toLowerCase().includes(searchTerm.toLowerCase());
    const grupoMatch = grupoSelecionado ? ex.grupoMuscular === grupoSelecionado : true;
    const categoriaMatch = categoriaSelecionada ? ex.categoria === categoriaSelecionada : true;
    return nomeMatch && grupoMatch && categoriaMatch;
  });

  return (
    // conte√∫do da interface...
    <div> {/* ...aqui entraria o restante da estrutura da p√°gina */} </div>
  );
}

==== ./client/src/pages/login.tsx ====

// client/src/pages/login.tsx
import React, { useState, useContext } from 'react';
import { useLocation } from 'wouter';
import { UserContext, User } from '@/context/UserContext';
import { useToast } from "@/hooks/use-toast"; // <<< USA O HOOK
import { Loader2 } from "lucide-react";
import { Input } from "@/components/ui/input"; // Import Input se n√£o estiver
import { Button } from "@/components/ui/button"; // Import Button se n√£o estiver

// Interface para a resposta da API de login
interface LoginApiResponse {
    message: string;
    token: string;
    user: {
        id: string;
        username: string;
        firstName: string;
        lastName: string;
        email: string;
        role: string;
    };
}

// Interface para erros da API
interface ApiError {
    message: string;
}

export default function LoginPage() {
    const [, setLocation] = useLocation();
    const userContext = useContext(UserContext);
    const { toast } = useToast(); // <<< USA O HOOK

    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(""); // Para erros locais se o toast n√£o for suficiente

    const handleLogin = async (e: React.FormEvent) => {
        e.preventDefault();
        setError("");
        setIsLoading(true);

        try {
            const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:5000';
            const response = await fetch(`${apiUrl}/api/auth/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', },
                body: JSON.stringify({ email: email.toLowerCase(), password }),
            });

            if (!response.ok) {
                 let errorMessage = `Erro ${response.status}`;
                 try {
                     const errorData: ApiError = await response.json();
                     errorMessage = errorData.message || errorMessage;
                 } catch (jsonError) {
                     errorMessage = response.statusText || errorMessage;
                 }
                 throw new Error(errorMessage);
            }

            const loginData = await response.json() as LoginApiResponse;

            localStorage.setItem('authToken', loginData.token);
            const loggedInUser: User = {
                id: loginData.user.id,
                username: loginData.user.username,
                firstName: loginData.user.firstName,
                lastName: loginData.user.lastName,
                email: loginData.user.email,
                role: loginData.user.role || 'Personal Trainer'
            };
            localStorage.setItem("userData", JSON.stringify(loggedInUser));

            if (userContext) {
                userContext.setUser(loggedInUser);
            } else {
                console.error("UserContext n√£o encontrado!");
                window.location.reload();
            }

            toast({ // Chama toast do hook
                title: "Login bem-sucedido!",
                description: `Bem-vindo(a) de volta, ${loggedInUser.firstName}!`,
            });

            setLocation("/"); // Redireciona para raiz (Dashboard)

        } catch (err: any) {
            console.error("Erro no login:", err);
            const errorMessage = err.message || 'Ocorreu um erro inesperado.';
            setError(errorMessage);
            toast({ // Chama toast do hook
                title: "Erro no Login",
                description: errorMessage,
                variant: "destructive",
            });
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="min-h-screen flex bg-gray-100 dark:bg-gray-950">
            {/* Lado esquerdo */}
            <div
                className="hidden md:flex w-1/2 bg-cover bg-center relative"
                style={{ backgroundImage: "url('/images/login-personal.png')" }}
            >
                 <div className="absolute inset-0 bg-black opacity-30"></div>
                 <div className="absolute bottom-10 left-10 text-white z-10">
                    <h1 className="text-4xl font-bold mb-2 drop-shadow-lg">DyFit</h1>
                    <p className="text-lg text-gray-200 drop-shadow-md">Sua jornada fitness, simplificada e potencializada.</p>
                </div>
                <div className="absolute bottom-10 right-10 flex items-center gap-4 z-10">
                     <a href="#" aria-label="Baixar na App Store"><img src="/images/app-store-badge.png" alt="Baixar na App Store" className="h-10 w-auto" /></a>
                     <a href="#" aria-label="Dispon√≠vel no Google Play"><img src="/images/GooglePlay.png" alt="Dispon√≠vel no Google Play" className="h-12 w-auto" /></a>
                </div>
            </div>

            {/* Lado direito (formul√°rio) */}
            <div className="w-full md:w-1/2 flex items-center justify-center p-6 md:p-12">
                <form
                    onSubmit={handleLogin}
                    className="bg-white dark:bg-gray-900 p-8 rounded-xl shadow-2xl w-full max-w-md border border-gray-200 dark:border-gray-700"
                >
                     <img src="/logodyfit.png" alt="Logo DyFit" className="h-14 mx-auto mb-6" />
                     <h2 className="text-2xl font-semibold mb-2 text-center text-gray-800 dark:text-white">Acesso Restrito</h2>
                    <p className="text-sm text-center text-gray-500 dark:text-gray-400 mb-8">Fa√ßa login com suas credenciais de Personal Trainer.</p>

                    {error && (
                        <p className="text-red-500 dark:text-red-400 mb-4 text-sm text-center p-2 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded">
                            {error}
                        </p>
                    )}

                    <div className="mb-5">
                        <label htmlFor="email-login" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Email</label>
                        <Input // Usando o componente Input
                           type="email"
                           id="email-login"
                           className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white dark:placeholder-gray-400 transition duration-150"
                           value={email}
                           onChange={(e) => setEmail(e.target.value)}
                           placeholder="seu.email@exemplo.com"
                           required
                           autoComplete="email"
                           disabled={isLoading}
                        />
                    </div>

                    <div className="mb-8">
                        <label htmlFor="password-login" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Senha</label>
                        <Input // Usando o componente Input
                            type="password"
                            id="password-login"
                            className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent dark:bg-gray-800 dark:text-white dark:placeholder-gray-400 transition duration-150"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            placeholder="Sua senha"
                            required
                            autoComplete="current-password"
                            disabled={isLoading}
                        />
                    </div>

                    <Button // Usando o componente Button
                        type="submit"
                        className={`
                            w-full flex items-center justify-center
                            bg-indigo-600 hover:bg-indigo-700
                            dark:bg-indigo-600 dark:hover:bg-indigo-700
                            text-white font-semibold text-md
                            py-3 px-6 rounded-lg shadow-sm hover:shadow-md
                            focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500
                            dark:focus:ring-offset-gray-900
                            transition-all duration-150 ease-in-out
                            ${isLoading ? 'opacity-60 cursor-not-allowed' : 'active:bg-indigo-800 dark:active:bg-indigo-800'}
                        `}
                        disabled={isLoading}
                    >
                        {isLoading ? (
                            <>
                                <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                                Entrando...
                            </>
                        ) : (
                            'Entrar'
                        )}
                    </Button>
                </form>
            </div>
        </div>
    );
}
==== ./client/src/pages/not-found.tsx ====

import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}

==== ./client/src/pages/perfil/editar.tsx ====

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { useUser, User } from '@/context/UserContext'; // Importa User
import { useToast } from '@/hooks/use-toast'; // Usa o hook correto
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { Loader2 } from 'lucide-react';

// Interface para os dados a serem enviados para a API
interface UpdateProfilePayload {
    firstName: string;
    lastName: string;
    // avatarUrl?: string; // Para quando implementar upload de foto
}

export default function ProfileEditPage() {
    const { user, setUser, isLoading: isLoadingUserContext } = useUser();
    const { toast } = useToast(); // Usa o hook
    const queryClient = useQueryClient();

    // Estados locais do formul√°rio
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');
    // const [avatarFile, setAvatarFile] = useState<File | null>(null);
    // const [avatarPreview, setAvatarPreview] = useState<string | null>(null);

    // Efeito para preencher o formul√°rio quando o usu√°rio do contexto carregar/mudar
    useEffect(() => {
        if (user) {
            setFirstName(user.firstName || '');
            setLastName(user.lastName || '');
            // setAvatarPreview(user.avatarUrl || null);
        }
    }, [user]);

    // Fun√ß√£o de formata√ß√£o de URL (CORRIGIDA com retorno expl√≠cito)
    const formatVideoUrl = (url: string): string | undefined => {
        if (!url) return undefined;
        let embedUrl: string | undefined = undefined;
        try { // Adiciona try/catch para robustez em caso de URL malformada
            if (url.includes("youtu.be/")) {
                const id = url.split("youtu.be/")[1]?.split(/[?&]/)[0];
                if (id) {
                    const time = url.includes("?t=") ? url.split("?t=")[1]?.split("&")[0] : "";
                    embedUrl = `https://www.youtube.com/embed/${id}${time ? `?start=${time}` : ""}`;
                }
            } else if (url.includes("youtube.com/watch?v=")) {
                const id = url.split("v=")[1]?.split("&")[0];
                 if (id) {
                    const time = url.includes("?t=") ? url.split("?t=")[1]?.split("&")[0] : "";
                    embedUrl = `https://www.youtube.com/embed/${id}${time ? `?start=${time}` : ""}`;
                 }
            } else if (url.includes("drive.google.com/file/d/")) {
                const id = url.split("/d/")[1]?.split("/")[0];
                if (id) {
                   embedUrl = `https://drive.google.com/file/d/${id}/preview`;
                }
            }
        } catch (e) {
             console.error("Erro ao formatar URL de v√≠deo:", e);
             embedUrl = undefined; // Retorna undefined em caso de erro
        }

        // Retorna a URL original apenas se for um link v√°lido e N√ÉO foi convertida
        if (!embedUrl && (url.startsWith('http://') || url.startsWith('https://'))) {
            return url;
        }
        // Retorna a URL convertida ou undefined
        return embedUrl;
    }

    // Muta√ß√£o para atualizar o perfil
    const updateProfileMutation = useMutation<
        { message: string; user: User },
        Error,
        UpdateProfilePayload
    >({
        mutationFn: (payload) => {
            return apiRequest<{ message: string; user: User }>("PATCH", "/api/profile/me", payload);
        },
        onSuccess: (data) => {
            setUser(data.user);
            toast({ title: "Sucesso", description: data.message || "Perfil atualizado." });
            // queryClient.invalidateQueries({ queryKey: ['algumaQueryDoUsuario'] }); // Se necess√°rio
        },
        onError: (error) => {
            toast({ variant: "destructive", title: "Erro ao Atualizar", description: error.message || "N√£o foi poss√≠vel salvar as altera√ß√µes." });
        }
    });

    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file) {
            toast({ title: "Upload de Foto", description: "Funcionalidade de upload de foto em breve.", variant: "default"});
        }
    };

    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        if (!firstName.trim() || !lastName.trim()) {
             toast({ variant: "destructive", title: "Erro", description: "Nome e Sobrenome s√£o obrigat√≥rios." });
            return;
        }
        const payload: UpdateProfilePayload = {
            firstName: firstName.trim(),
            lastName: lastName.trim(),
        };
        updateProfileMutation.mutate(payload);
    };

    // Fun√ß√£o para gerar iniciais
     const getInitials = (fName: string = "", lName: string = ""): string => {
        const firstInitial = fName?.[0] || '';
        const lastInitial = lName?.[0] || '';
        return `${firstInitial}${lastInitial}`.toUpperCase() || '?';
     };

    // Renderiza√ß√£o de Loading ou Erro se usu√°rio n√£o carregado
    if (isLoadingUserContext) {
        return (
             <div className="flex justify-center items-center h-full pt-20"> {/* Ajuste no h-full */}
                 <Loader2 className="h-8 w-8 animate-spin text-primary" />
                 <p className="ml-2">Carregando perfil...</p>
             </div>
        );
    }
    if (!user) {
        return <div className="text-center py-10">Usu√°rio n√£o encontrado. Por favor, fa√ßa login novamente.</div>;
    }

    // Renderiza√ß√£o principal
    return (
        <div className="container mx-auto max-w-3xl py-8 px-4">
            <Card>
                <CardHeader>
                    <CardTitle>Editar Perfil</CardTitle>
                    <CardDescription>Atualize suas informa√ß√µes pessoais.</CardDescription>
                </CardHeader>
                <form onSubmit={handleSubmit}>
                    <CardContent className="space-y-6">
                        {/* Se√ß√£o da Foto */}
                        <div className="flex flex-col items-center gap-4">
                            <Avatar className="h-24 w-24 border-2 border-primary/20">
                                {/* <AvatarImage src={avatarPreview || user.avatarUrl} alt="Foto de Perfil" /> */}
                                <AvatarFallback className="text-3xl bg-primary/10 text-primary dark:bg-primary/20">
                                    {getInitials(user.firstName, user.lastName)}
                                </AvatarFallback>
                            </Avatar>
                            {/* Input de Arquivo (Comentado) */}
                            {/* <Input id="picture" type="file" accept="image/*" onChange={handleFileChange} className="max-w-xs ..." /> */}
                             <p className="text-xs text-muted-foreground">(Upload de foto em breve)</p>
                        </div>

                        {/* Campos de Nome */}
                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <div className="space-y-2">
                                <Label htmlFor="firstName">Nome</Label>
                                <Input
                                    id="firstName"
                                    value={firstName}
                                    onChange={(e) => setFirstName(e.target.value)}
                                    required
                                    disabled={updateProfileMutation.isPending}
                                />
                            </div>
                            <div className="space-y-2">
                                <Label htmlFor="lastName">Sobrenome</Label>
                                <Input
                                    id="lastName"
                                    value={lastName}
                                    onChange={(e) => setLastName(e.target.value)}
                                    required
                                    disabled={updateProfileMutation.isPending}
                                />
                            </div>
                        </div>
                        {/* Campo Email (Desabilitado) */}
                         <div className="space-y-2">
                             <Label htmlFor="email">Email</Label>
                             <Input id="email" value={user.email} disabled />
                             <p className="text-xs text-muted-foreground">O email n√£o pode ser alterado.</p>
                         </div>

                    </CardContent>
                    <CardFooter>
                        <Button type="submit" disabled={updateProfileMutation.isPending}>
                            {updateProfileMutation.isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                            Salvar Altera√ß√µes
                        </Button>
                    </CardFooter>
                </form>
            </Card>
        </div>
    );
}
==== ./client/src/pages/public/AlunoLoginPage.tsx ====

// Localiza√ß√£o: client/src/pages/public/AlunoLoginPage.tsx
import React, { useState, useContext, useEffect } from 'react';
import { useLocation, Redirect } from 'wouter';
import { AlunoContext } from '@/context/AlunoContext';
import { useToast } from "@/hooks/use-toast";
import { Loader2, LogIn } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { apiRequest } from '@/lib/queryClient';

// Interface para a resposta da API de login do aluno
interface AlunoLoginApiResponse {
    message: string;
    token: string;
    aluno: {
        id: string;
        nome: string;
        email: string;
        role: 'Aluno';
        personalId: string;
    };
}

export default function AlunoLoginPage() {
    const [, navigate] = useLocation();
    const alunoContext = useContext(AlunoContext);
    const { toast } = useToast();

    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState("");

    if (!alunoContext) {
        console.warn("AlunoContext ainda n√£o est√° dispon√≠vel em AlunoLoginPage.");
        return <div className="flex h-screen w-full items-center justify-center"><Loader2 className="h-10 w-10 animate-spin text-primary" /> Carregando contexto...</div>;
    }
    const { loginAluno, aluno: alunoLogado, isLoadingAluno } = alunoContext;

    useEffect(() => {
        if (!isLoadingAluno && alunoLogado) {
            navigate("/aluno/dashboard", { replace: true }); 
        }
    }, [alunoLogado, isLoadingAluno, navigate]);

    const handleLoginAluno = async (e: React.FormEvent) => {
        e.preventDefault();
        setError("");
        setIsLoading(true);

        try {
            const response = await apiRequest<AlunoLoginApiResponse>(
                'POST',
                '/api/auth/aluno/login', 
                { email: email.toLowerCase().trim(), password }
            );
            
            await loginAluno(response.token);

            toast({
                title: "Login bem-sucedido!",
                description: `Bem-vindo(a) de volta, ${response.aluno.nome || 'Aluno'}!`,
            });
            
        } catch (err: any) {
            console.error("Erro no login do aluno:", err);
            const errorMessage = err.message || 'Credenciais inv√°lidas ou erro no servidor.';
            setError(errorMessage);
            toast({
                title: "Erro no Login",
                description: errorMessage,
                variant: "destructive",
            });
        } finally {
            setIsLoading(false);
        }
    };
    
    if (isLoadingAluno) {
        return <div className="flex h-screen w-full items-center justify-center"><Loader2 className="h-10 w-10 animate-spin text-primary" /> <span className="ml-2">Verificando sess√£o...</span></div>;
    }

    return (
        <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-sky-500 to-blue-700 p-4 selection:bg-blue-200 selection:text-blue-900">
            {/* Card de Login */}
            <Card className="w-full max-w-md shadow-2xl bg-white dark:bg-gray-900 rounded-xl overflow-hidden md:flex md:max-w-3xl">
                {/* Lado esquerdo com imagem para Aluno */}
                <div
                    className="hidden md:flex md:w-1/2 bg-cover bg-center relative"
                    style={{ backgroundImage: "url('/images/login-aluno.png')" }} // <<< IMAGEM ATUALIZADA AQUI
                >
                     <div className="absolute inset-0 bg-blue-700 opacity-40"></div> {/* Overlay com cor tem√°tica do aluno */}
                     <div className="absolute bottom-10 left-10 text-white z-10 p-4">
                        <h1 className="text-4xl font-bold mb-2 drop-shadow-lg">DyFit Aluno</h1>
                        <p className="text-lg text-gray-100 drop-shadow-md">Acesse seus treinos e acompanhe seu progresso.</p>
                    </div>
                </div>

                {/* Lado direito (formul√°rio) */}
                <div className="w-full md:w-1/2 flex flex-col justify-center">
                    <CardHeader className="text-center space-y-3 pt-8 pb-6 md:pt-10">
                        <img src="/logodyfit.png" alt="Logo DyFit" className="h-14 md:h-16 mx-auto" />
                        <CardTitle className="text-2xl md:text-3xl font-bold text-slate-800 dark:text-slate-50">
                            Acesso Aluno
                        </CardTitle>
                        <CardDescription className="text-slate-600 dark:text-slate-400 px-4">
                            Entre com seu email e senha para continuar.
                        </CardDescription>
                    </CardHeader>
                    <CardContent className="px-6 pb-8 sm:px-8">
                        <form onSubmit={handleLoginAluno} className="space-y-6">
                            {error && (
                                <div role="alert" className="text-red-600 dark:text-red-400 text-sm text-center p-3 bg-red-50 dark:bg-red-900/30 border border-red-300 dark:border-red-700 rounded-md">
                                    {error}
                                </div>
                            )}

                            <div className="space-y-2">
                                <Label htmlFor="email-aluno-login" className="text-slate-700 dark:text-slate-300 font-medium">Email</Label>
                                <Input
                                   type="email"
                                   id="email-aluno-login"
                                   value={email}
                                   onChange={(e) => setEmail(e.target.value)}
                                   placeholder="seu.email@exemplo.com"
                                   required
                                   autoComplete="email"
                                   disabled={isLoading}
                                   className="bg-slate-50 dark:bg-slate-800 border-slate-300 dark:border-slate-600 focus:border-primary dark:focus:border-primary focus:ring-primary dark:focus:ring-primary"
                                />
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="password-aluno-login" className="text-slate-700 dark:text-slate-300 font-medium">Senha</Label>
                                <Input
                                    type="password"
                                    id="password-aluno-login"
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    placeholder="Sua senha"
                                    required
                                    autoComplete="current-password"
                                    disabled={isLoading}
                                    className="bg-slate-50 dark:bg-slate-800 border-slate-300 dark:border-slate-600 focus:border-primary dark:focus:border-primary focus:ring-primary dark:focus:ring-primary"
                                />
                            </div>
                            
                            <Button 
                                type="submit" 
                                className="w-full font-semibold text-base py-3 bg-blue-600 hover:bg-blue-700 dark:bg-sky-600 dark:hover:bg-sky-700" 
                                disabled={isLoading}
                            >
                                {isLoading ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : <LogIn className="mr-2 h-5 w-5" />}
                                {isLoading ? 'Entrando...' : 'Entrar'}
                            </Button>
                        </form>
                    </CardContent>
                    <CardFooter className="text-center text-xs text-muted-foreground pt-6 pb-8 border-t dark:border-slate-700 md:border-t-0 md:pt-4">
                        <p>Ainda n√£o tem conta? Pe√ßa um convite ao seu personal.</p>
                    </CardFooter>
                </div>
            </Card>
        </div>
    );
}

==== ./client/src/pages/public/CadastroAlunoPorConvitePersonalPage.tsx ====

// Localiza√ß√£o: client/src/pages/public/CadastroAlunoPorConvitePersonalPage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link as WouterLink } from 'wouter'; // Removido Redirect, Link as WouterLink para clareza
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea"; // <<< ADICIONADO IMPORT DE TEXTAREA
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from '@/lib/queryClient';
import { useAluno } from '@/context/AlunoContext';
import { Loader2 } from 'lucide-react';
// Removida importa√ß√£o direta do modelo de backend:
// import PersonalTrainer from '@/../../../server/models/PersonalTrainer'; 

interface ValidacaoTokenResponse {
  mensagem: string;
  emailConvidado?: string;
  roleConvidado?: string;
}

interface AlunoRegistroFormData {
  nome: string;
  email: string;
  password?: string;
  confirmPassword?: string;
  birthDate: string;
  gender: string;
  goal: string;
  weight: string; 
  height: string; 
  startDate: string;
  phone?: string;
  notes?: string;
}

interface AlunoRegistroResponse {
  message: string;
  token: string; 
  aluno: {
    id: string;
    nome: string;
    email: string;
    role: 'Aluno';
    personalId: string;
  };
}

// Interface para a resposta da valida√ß√£o do token do personal (se implementada no futuro)
// interface PersonalValidationResponse {
//     message: string;
//     personalNome: string;
// }


const CadastroAlunoPorConvitePersonalPage: React.FC = () => {
  const params = useParams<{ tokenPersonal?: string }>();
  const tokenPersonal = params.tokenPersonal;

  const [personalNome, setPersonalNome] = useState<string | null>(null); // Usado para exibir o nome do personal que convidou
  const [isLoadingTokenValidation, setIsLoadingTokenValidation] = useState<boolean>(false);
  const [tokenValidationError, setTokenValidationError] = useState<string | null>(null);

  const [formData, setFormData] = useState<AlunoRegistroFormData>({
    nome: '',
    email: '',
    password: '',
    confirmPassword: '',
    birthDate: '',
    gender: '',
    goal: '',
    weight: '',
    height: '',
    startDate: '',
    phone: '',
    notes: '',
  });
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [registrationSuccess, setRegistrationSuccess] = useState<boolean>(false);
  const { toast } = useToast();
  const { loginAluno, aluno: alunoLogado } = useAluno();

  // Opcional: Validar o token do personal e buscar o nome ao carregar a p√°gina
  useEffect(() => {
    const validarTokenPersonalEBuscarNome = async () => {
      if (!tokenPersonal) {
        setTokenValidationError("Token de convite do personal n√£o encontrado na URL.");
        return;
      }
      setIsLoadingTokenValidation(true);
      try {
        // TODO: Implementar no backend uma rota GET /api/auth/validar-token-personal/:tokenPersonal
        // Esta rota verificaria se o tokenCadastroAluno √© v√°lido e retornaria o nome do Personal.
        // Exemplo de como seria a chamada:
        // const response = await apiRequest<PersonalValidationResponse>('GET', `/api/auth/validar-token-personal/${tokenPersonal}`);
        // setPersonalNome(response.personalNome);
        // Por enquanto, vamos simular que o token √© v√°lido se existir.
        // Em um cen√°rio real, esta valida√ß√£o √© importante para UX.
        console.log("Token do Personal para cadastro de aluno:", tokenPersonal);
        // Se voc√™ tiver uma forma de buscar o nome do personal pelo token no frontend (improv√°vel sem API),
        // ou se o backend retornar o nome do personal na valida√ß√£o do token, voc√™ pode definir setPersonalNome aqui.
        // Exemplo simulado (REMOVER EM PRODU√á√ÉO se n√£o houver API para isso):
        // setPersonalNome("Seu Personal Trainer"); 
      } catch (error: any) {
        const errMsg = error.message || "Link de convite inv√°lido ou personal n√£o encontrado.";
        setTokenValidationError(errMsg);
        // toast({ title: "Erro no Convite", description: errMsg, variant: "destructive" });
      } finally {
        setIsLoadingTokenValidation(false);
      }
    };

    validarTokenPersonalEBuscarNome();
  }, [tokenPersonal, toast]);


  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleSelectChange = (name: keyof AlunoRegistroFormData) => (value: string) => {
    setFormData(prevState => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!tokenPersonal) { // Seguran√ßa adicional
        toast({ title: "Erro", description: "Token de convite ausente.", variant: "destructive" });
        return;
    }
    if (formData.password !== formData.confirmPassword) {
      toast({ title: "Erro de Valida√ß√£o", description: "As senhas n√£o coincidem.", variant: "destructive" });
      return;
    }
    if (!formData.password || formData.password.length < 6) {
      toast({ title: "Erro de Valida√ß√£o", description: "A senha deve ter pelo menos 6 caracteres.", variant: "destructive" });
      return;
    }
    const camposObrigatorios: (keyof AlunoRegistroFormData)[] = ['nome', 'email', 'birthDate', 'gender', 'goal', 'weight', 'height', 'startDate'];
    for (const campo of camposObrigatorios) {
        if (!formData[campo]) {
            toast({ title: "Erro de Valida√ß√£o", description: `O campo '${campo}' √© obrigat√≥rio.`, variant: "destructive"});
            return;
        }
    }

    setIsSubmitting(true);
    try {
      const payload = {
        ...formData,
        weight: parseFloat(formData.weight.replace(',', '.')), 
        height: parseInt(formData.height, 10), 
      };
      delete (payload as any).confirmPassword; // Remove confirmPassword

      const response = await apiRequest<AlunoRegistroResponse>('POST', `/api/auth/aluno/registrar-por-convite-personal/${tokenPersonal}`, payload);
      
      await loginAluno(response.token); 

      toast({
        title: "Cadastro Realizado com Sucesso!",
        description: response.message || "Sua conta foi criada e voc√™ foi conectado.",
        variant: "default",
      });
      setRegistrationSuccess(true); 
    } catch (error: any) {
      const errMsg = error.message || "Falha ao realizar o cadastro. Tente novamente.";
      toast({ title: "Erro no Cadastro", description: errMsg, variant: "destructive" });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  if (alunoLogado && registrationSuccess) {
     return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 p-4 text-center">
        <Card className="w-full max-w-md shadow-xl">
          <CardHeader>
            <CardTitle className="text-2xl text-green-600">Bem-vindo(a), {alunoLogado.nome || 'Aluno'}!</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-lg">Sua conta foi criada e voc√™ est√° conectado(a).</p>
            <WouterLink href="/aluno/dashboard"> {/* Ajuste esta rota para o dashboard do aluno */}
              <Button className="mt-4 w-full">Ir para meu painel</Button>
            </WouterLink>
          </CardContent>
        </Card>
      </div>
    );
  }
  
  if (isLoadingTokenValidation && !tokenValidationError) { // Mostrar loader apenas se n√£o houver erro de valida√ß√£o de token ainda
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 p-4">
        <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
        <p className="text-lg text-gray-700 dark:text-gray-300">Verificando convite...</p>
      </div>
    );
  }

  if (tokenValidationError) { // Se houve erro na valida√ß√£o do token (ex: token n√£o encontrado na URL)
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 p-4 text-center">
        <Card className="w-full max-w-md shadow-xl">
          <CardHeader>
            <CardTitle className="text-2xl text-destructive">Link de Convite Inv√°lido</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-red-600 dark:text-red-400">{tokenValidationError}</p>
            <p className="mt-4 text-sm text-gray-600 dark:text-gray-400">
              Por favor, verifique o link ou contate o personal trainer que o convidou.
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 p-4">
      <Card className="w-full max-w-lg shadow-xl bg-white dark:bg-gray-950">
        <CardHeader className="text-center">
          <img src="/logodyfit.png" alt="Logo DyFit" className="w-24 h-auto mx-auto mb-4" />
          <CardTitle className="text-2xl font-bold">Crie sua Conta de Aluno</CardTitle>
          {personalNome && <CardDescription>Voc√™ foi convidado(a) por: {personalNome}</CardDescription>}
          {!personalNome && <CardDescription>Preencha seus dados para come√ßar.</CardDescription>}
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4 md:space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="nome">Nome Completo*</Label>
                <Input id="nome" name="nome" value={formData.nome} onChange={handleChange} required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="email">Email*</Label>
                <Input id="email" name="email" type="email" value={formData.email} onChange={handleChange} required />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="password">Senha* (m√≠n. 6 caracteres)</Label>
                <Input id="password" name="password" type="password" value={formData.password} onChange={handleChange} required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="confirmPassword">Confirmar Senha*</Label>
                <Input id="confirmPassword" name="confirmPassword" type="password" value={formData.confirmPassword} onChange={handleChange} required />
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="birthDate">Data de Nascimento*</Label>
                <Input id="birthDate" name="birthDate" type="date" value={formData.birthDate} onChange={handleChange} required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="gender">G√™nero*</Label>
                <Select name="gender" value={formData.gender} onValueChange={handleSelectChange('gender')}>
                  <SelectTrigger><SelectValue placeholder="Selecione seu g√™nero" /></SelectTrigger>
                  <SelectContent>
                    <SelectItem value="masculino">Masculino</SelectItem>
                    <SelectItem value="feminino">Feminino</SelectItem>
                    <SelectItem value="outro">Outro</SelectItem>
                    <SelectItem value="prefiroNaoDizer">Prefiro n√£o dizer</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="goal">Principal Objetivo*</Label>
              <Input id="goal" name="goal" value={formData.goal} onChange={handleChange} placeholder="Ex: Perder peso, ganhar massa, etc." required />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="weight">Peso Atual (kg)*</Label>
                <Input id="weight" name="weight" type="number" step="0.1" value={formData.weight} onChange={handleChange} placeholder="Ex: 70.5" required />
              </div>
              <div className="space-y-2">
                <Label htmlFor="height">Altura (cm)*</Label>
                <Input id="height" name="height" type="number" value={formData.height} onChange={handleChange} placeholder="Ex: 175" required />
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                    <Label htmlFor="startDate">Data de In√≠cio nos Treinos*</Label>
                    <Input id="startDate" name="startDate" type="date" value={formData.startDate} onChange={handleChange} required />
                </div>
                <div className="space-y-2">
                    <Label htmlFor="phone">Telefone (Opcional)</Label>
                    <Input id="phone" name="phone" type="tel" value={formData.phone || ''} onChange={handleChange} placeholder="(XX) XXXXX-XXXX" />
                </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="notes">Observa√ß√µes Adicionais (Opcional)</Label>
              <Textarea id="notes" name="notes" value={formData.notes || ''} onChange={handleChange} placeholder="Alguma condi√ß√£o m√©dica, les√£o, ou prefer√™ncia?" />
            </div>

            <Button type="submit" className="w-full font-semibold text-base py-3" disabled={isSubmitting}>
              {isSubmitting ? <Loader2 className="mr-2 h-5 w-5 animate-spin" /> : null}
              {isSubmitting ? 'Criando Conta...' : 'Criar Minha Conta'}
            </Button>
          </form>
        </CardContent>
         <CardFooter className="text-center text-xs text-muted-foreground pt-4">
            Ao se registrar, voc√™ concorda com nossos Termos de Servi√ßo.
        </CardFooter>
      </Card>
    </div>
  );
};

export default CadastroAlunoPorConvitePersonalPage;

==== ./client/src/pages/public/CadastroPersonalPorConvitePage.tsx ====

// Localiza√ß√£o: client/src/pages/public/CadastroPersonalPorConvitePage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams } from 'wouter'; // Redirect n√£o √© mais usado diretamente aqui
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from '@/lib/queryClient';
import { Loader2 } from 'lucide-react';

interface ValidacaoTokenResponse {
  mensagem: string;
  emailConvidado?: string;
  roleConvidado?: string;
}

interface RegistroFormData {
  nome: string;
  email: string;
  password?: string;
  confirmPassword?: string;
}

const CadastroPersonalPorConvitePage: React.FC = () => {
  const params = useParams<{ tokenDeConvite?: string }>();
  const tokenDeConvite = params.tokenDeConvite;

  const [isValidToken, setIsValidToken] = useState<boolean | null>(null);
  const [isLoadingValidation, setIsLoadingValidation] = useState<boolean>(true);
  const [validationError, setValidationError] = useState<string | null>(null);
  // NOVO ESTADO para controlar se o email foi pr√©-preenchido
  const [emailWasPrefilled, setEmailWasPrefilled] = useState<boolean>(false); 
  const [formData, setFormData] = useState<RegistroFormData>({
    nome: '',
    email: '',
    password: '',
    confirmPassword: '',
  });
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
  const [registrationSuccess, setRegistrationSuccess] = useState<boolean>(false);
  const { toast } = useToast();

  const validarToken = useCallback(async () => {
    if (!tokenDeConvite) {
      setValidationError("Token de convite n√£o encontrado na URL.");
      setIsValidToken(false);
      setIsLoadingValidation(false);
      return;
    }
    setIsLoadingValidation(true);
    setValidationError(null);
    try {
      const response = await apiRequest<ValidacaoTokenResponse>('GET', `/api/convites/validar/${tokenDeConvite}`);
      setIsValidToken(true);
      if (response.emailConvidado) {
        setFormData(prev => ({ ...prev, email: response.emailConvidado! }));
        setEmailWasPrefilled(true); // <<< Define que o email foi pr√©-preenchido
      } else {
        setEmailWasPrefilled(false); // <<< Garante que est√° falso se n√£o veio email do token
      }
      toast({
        title: "Convite V√°lido!",
        description: response.mensagem || "Voc√™ pode prosseguir com o cadastro.",
      });
    } catch (error: any) {
      setIsValidToken(false);
      const errMsg = error.message || "Erro ao validar o convite. Verifique o link ou contate o administrador.";
      setValidationError(errMsg);
      setEmailWasPrefilled(false); // <<< Reseta em caso de erro
      toast({
        title: "Erro na Valida√ß√£o do Convite",
        description: errMsg,
        variant: "destructive",
      });
    } finally {
      setIsLoadingValidation(false);
    }
  }, [tokenDeConvite, toast]);

  useEffect(() => {
    validarToken();
  }, [validarToken]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value,
    }));
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (formData.password !== formData.confirmPassword) {
      toast({
        title: "Erro de Valida√ß√£o",
        description: "As senhas n√£o coincidem.",
        variant: "destructive",
      });
      return;
    }
    if (!formData.password || formData.password.length < 6) {
        toast({
            title: "Erro de Valida√ß√£o",
            description: "A senha deve ter pelo menos 6 caracteres.",
            variant: "destructive",
        });
        return;
    }

    setIsSubmitting(true);
    try {
      const payload = {
        nome: formData.nome,
        email: formData.email,
        password: formData.password,
      };
      const response = await apiRequest<{ mensagem: string }>('POST', `/api/convites/registrar/${tokenDeConvite}`, payload);
      toast({
        title: "Cadastro Realizado com Sucesso!",
        description: response.mensagem || "Voc√™ j√° pode fazer login.",
        variant: "default",
      });
      setRegistrationSuccess(true); 
    } catch (error: any) {
      const errMsg = error.message || "Falha ao realizar o cadastro. Tente novamente.";
      toast({
        title: "Erro no Cadastro",
        description: errMsg,
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoadingValidation) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 p-4">
        <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
        <p className="text-lg text-gray-700 dark:text-gray-300">Validando convite...</p>
      </div>
    );
  }

  if (!isValidToken || validationError) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 p-4 text-center">
        <Card className="w-full max-w-md shadow-xl">
          <CardHeader>
            <CardTitle className="text-2xl text-destructive">Convite Inv√°lido</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-red-600 dark:text-red-400">{validationError || "O link de convite √© inv√°lido, expirou ou j√° foi utilizado."}</p>
            <p className="mt-4 text-sm text-gray-600 dark:text-gray-400">
              Por favor, solicite um novo link de convite ao administrador da plataforma.
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (registrationSuccess) {
     return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900 p-4 text-center">
        <Card className="w-full max-w-md shadow-xl">
          <CardHeader>
            <CardTitle className="text-2xl text-green-600">Cadastro Conclu√≠do!</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-lg">Sua conta foi criada com sucesso.</p>
            <p className="mt-2">Voc√™ j√° pode fazer o login na plataforma.</p>
          </CardContent>
          <CardFooter>
            <Button onClick={() => window.location.href = '/login'} className="w-full">
              Ir para Login
            </Button>
          </CardFooter>
        </Card>
      </div>
    );
  }

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-slate-900 to-slate-800 p-4">
      <Card className="w-full max-w-md shadow-xl bg-white dark:bg-gray-950">
        <CardHeader className="text-center">
          <img src="/logodyfit.png" alt="Logo DyFit" className="w-24 h-auto mx-auto mb-4" />
          <CardTitle className="text-2xl font-bold">Cadastro de Personal Trainer</CardTitle>
          <CardDescription>Complete seus dados para criar sua conta.</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="nome">Nome Completo</Label>
              <Input
                id="nome"
                name="nome"
                type="text"
                placeholder="Seu nome completo"
                value={formData.nome}
                onChange={handleChange}
                required
                className="bg-input/50"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                placeholder="seu@email.com"
                value={formData.email}
                onChange={handleChange}
                required
                disabled={emailWasPrefilled} // <<< CORRIGIDO: Usa o novo estado
                className="bg-input/50 disabled:opacity-75"
              />
               {emailWasPrefilled && ( // Mostra a mensagem se o email foi pr√©-preenchido
                <p className="text-xs text-muted-foreground">Email pr√©-preenchido do convite.</p>
              )}
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">Senha</Label>
              <Input
                id="password"
                name="password"
                type="password"
                placeholder="Crie uma senha forte"
                value={formData.password}
                onChange={handleChange}
                required
                className="bg-input/50"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="confirmPassword">Confirmar Senha</Label>
              <Input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                placeholder="Repita a senha"
                value={formData.confirmPassword}
                onChange={handleChange}
                required
                className="bg-input/50"
              />
            </div>
            <Button type="submit" className="w-full font-semibold" disabled={isSubmitting}>
              {isSubmitting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
              {isSubmitting ? 'Registrando...' : 'Criar Conta'}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};

export default CadastroPersonalPorConvitePage;

==== ./client/src/pages/sessoes/index.tsx ====

// client/src/pages/sessoes/index.tsx
import React, { useState } from 'react'; // Adicionado React
import { useToast } from '@/hooks/use-toast';
import { Button } from "@/components/ui/button"; // <<< ADICIONADO IMPORT DO BOT√ÉO

export default function SessionsPage() {
    const { toast } = useToast();

    // Exemplo de onde voc√™ poderia usar o toast
    const algumaFuncao = () => {
        try {
            // ... faz algo ...
            // Exemplo de sucesso
            toast({ title: "Sucesso", description: "Sess√£o agendada!" });

            // Exemplo de erro simulado
            // throw new Error("Falha ao agendar sess√£o.");

        } catch (error: any) {
            toast({ variant: "destructive", title: "Erro", description: error.message });
        }
    };

    return (
        <div className="p-4 md:p-6 lg:p-8"> {/* Adicionado padding */}
            <h1 className="text-2xl font-bold mb-4">P√°gina de Sess√µes</h1>
            {/* TODO: Adicionar o conte√∫do real da sua p√°gina aqui */}
            <p className='mb-4'>Conte√∫do da p√°gina de gerenciamento de sess√µes...</p>

            {/* O bot√£o √© apenas um exemplo de como usar o toast neste componente */}
            <Button onClick={algumaFuncao}>Testar Toast na P√°gina</Button>
        </div>
    );
}
==== ./client/src/pages/treinos/index.tsx ====

// client/src/pages/treinos/index.tsx
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import React, { useState, useEffect, useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Dumbbell, Edit, Trash2, Loader2, User, Eye, CopyPlus, Users, FolderPlus, Folder, FolderOpen, GripVertical } from "lucide-react";
import RotinaFormModal, { RotinaParaEditar } from "@/components/dialogs/RotinaFormModal"; 
import LoadingSpinner from "@/components/LoadingSpinner";
import ErrorMessage from "@/components/ErrorMessage";
import { Aluno } from "@/types/aluno";
import { useToast } from "@/hooks/use-toast";
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogTrigger, // <<< ADICIONADO AlertDialogTrigger AQUI
} from "@/components/ui/alert-dialog";
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { apiRequest } from "@/lib/queryClient";
// O FichaViewModal ser√° renomeado para RotinaViewModal em um passo futuro
import FichaViewModal, { FichaTreinoView } from "@/components/dialogs/FichaViewModal"; 
import AssociarModeloAlunoModal from "@/components/dialogs/AssociarModeloAlunoModal";
import { Tooltip, TooltipProvider, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip";
import PastaFormModal, { PastaFormData, PastaExistente } from "@/components/dialogs/PastaFormModal";
import { ModalConfirmacao } from "@/components/ui/modal-confirmacao";
import { useConfirmDialog } from "@/hooks/useConfirmDialog";

import {
    DndContext,
    closestCenter,
    KeyboardSensor,
    PointerSensor,
    useSensor,
    useSensors,
    DragEndEvent,
    UniqueIdentifier,
} from '@dnd-kit/core';
import {
    arrayMove,
    SortableContext,
    sortableKeyboardCoordinates,
    verticalListSortingStrategy,
    useSortable,
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

import type { RotinaListagemItem, DiaDeTreinoDetalhado, ExercicioEmDiaDeTreinoDetalhado } from '@/types/treinoOuRotinaTypes'; 

// --- TIPOS E INTERFACES ---
type DraggableItemType = "pasta" | "ficha_modelo_em_pasta" | "ficha_modelo_sem_pasta";

interface DraggableItemData {
    type: DraggableItemType;
    pastaId?: string | null;
    ficha?: RotinaListagemItem; // 'ficha' aqui se refere a uma RotinaListagemItem
    pasta?: Pasta;
}

export interface Pasta {
    _id: string;
    nome: string;
    criadorId: string;
    ordem?: number;
    createdAt?: string;
    updatedAt?: string;
}

interface SortableItemProps {
    id: UniqueIdentifier;
    children: React.ReactNode;
    data?: DraggableItemData;
    isDraggingOverlay?: boolean;
}

const SortablePastaItem: React.FC<SortableItemProps> = ({ id, children, data, isDraggingOverlay }) => {
    const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id, data });
    const style: React.CSSProperties = { transform: CSS.Transform.toString(transform), transition: transition || undefined, zIndex: isDragging || isDraggingOverlay ? 100 : (isDragging ? 50 : undefined), opacity: isDraggingOverlay ? 0.5 : (isDragging ? 0.8 : 1) };
    return (<div ref={setNodeRef} style={style} {...attributes} >{React.Children.map(children, child => React.isValidElement(child) ? React.cloneElement(child as React.ReactElement<any>, { dndListeners: listeners }) : child)}</div>);
};

interface SortableFichaItemProps {
    rotina: RotinaListagemItem;
    pastaIdContext: string | null;
    children: React.ReactNode;
    isDraggingOverlay?: boolean;
}
const SortableFichaItem: React.FC<SortableFichaItemProps> = ({ rotina, pastaIdContext, children, isDraggingOverlay }) => {
    const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: rotina._id, data: { type: pastaIdContext ? "ficha_modelo_em_pasta" : "ficha_modelo_sem_pasta", pastaId: pastaIdContext, ficha: rotina } as DraggableItemData });
    const style: React.CSSProperties = { transform: CSS.Transform.toString(transform), transition: transition || undefined, zIndex: isDragging || isDraggingOverlay ? 200 : (isDragging ? 150 : undefined), opacity: isDraggingOverlay ? 0.5 : (isDragging ? 0.8 : 1), cursor: isDragging ? 'grabbing' : 'grab' };
    return (<div ref={setNodeRef} style={style} {...attributes} {...listeners}>{children}</div>);
};


export default function TreinosPage() {
    const [isRotinaModalOpen, setIsRotinaModalOpen] = useState(false);
    const [rotinaParaEditar, setRotinaParaEditar] = useState<RotinaParaEditar | null>(null); 
    
    const [rotinaParaExcluirState, setRotinaParaExcluirState] = useState<RotinaListagemItem | null>(null);
    const [isViewModalOpen, setIsViewModalOpen] = useState(false);
    const [rotinaParaVisualizar, setRotinaParaVisualizar] = useState<FichaTreinoView | null>(null); // FichaTreinoView ser√° RotinaTreinoView
    const [isAssociarModeloModalOpen, setIsAssociarModeloModalOpen] = useState(false);
    const [rotinaModeloParaAssociar, setRotinaModeloParaAssociar] = useState<{id: string; titulo: string} | null>(null); // Renomeado de fichaModelo...
    const [openAccordionAlunoItems, setOpenAccordionAlunoItems] = useState<string[]>([]);
    const [openAccordionPastaItems, setOpenAccordionPastaItems] = useState<string[]>([]);

    const [isPastaModalOpen, setIsPastaModalOpen] = useState(false);
    const [pastaParaEditarState, setPastaParaEditarState] = useState<PastaExistente | null>(null);
    const [isLoadingSavePasta, setIsLoadingSavePasta] = useState(false);

    const { isOpen: isConfirmDeletePastaOpen, options: confirmDeletePastaOptions, openConfirmDialog: openDeletePastaDialog, closeConfirmDialog: closeDeletePastaDialog, confirm: confirmDeletePastaAction } = useConfirmDialog();
    const [pastaParaExcluir, setPastaParaExcluir] = useState<Pasta | null>(null);

    const [orderedPastas, setOrderedPastas] = useState<Pasta[]>([]);
    const [orderedRotinasModelo, setOrderedRotinasModelo] = useState<RotinaListagemItem[]>([]);

    const queryClient = useQueryClient();
    const { toast } = useToast();
    const sensors = useSensors(useSensor(PointerSensor, { activationConstraint: { distance: 5 } }), useSensor(KeyboardSensor, { coordinateGetter: sortableKeyboardCoordinates }));

    const {
        data: rotinas = [], // 'rotinas' j√° √© o nome correto aqui
        isLoading: isLoadingRotinas,
        error: errorRotinas,
        isFetching: isFetchingRotinas,
    } = useQuery<RotinaListagemItem[], Error>({
        queryKey: ["/api/treinos"], 
        queryFn: async () => {
            try {
                const data = await apiRequest<RotinaListagemItem[]>("GET", "/api/treinos");
                return Array.isArray(data) ? data : [];
            } catch (e) {
                throw e;
            }
        },
        retry: 1,
    });
    
    useEffect(() => {
        const modelos = rotinas
            .filter(r => r.tipo === 'modelo')
            .sort((a, b) => (a.ordemNaPasta ?? 0) - (b.ordemNaPasta ?? 0)); 
        
        if (JSON.stringify(modelos) !== JSON.stringify(orderedRotinasModelo)) {
            setOrderedRotinasModelo(modelos);
        }
    }, [rotinas, orderedRotinasModelo]);

    const { data: alunos = [], isLoading: isLoadingAlunos, error: errorAlunosHook } = useQuery<Aluno[], Error>({
        queryKey: ["/api/alunos"], staleTime: 1000 * 60 * 5, refetchOnWindowFocus: false,
        queryFn: async () => apiRequest<Aluno[]>("GET", "/api/alunos").then(data => Array.isArray(data) ? data : [])
    });

    const { data: pastasFromAPI = [], isLoading: isLoadingPastas, error: errorPastasHook } = useQuery<Pasta[], Error>({
        queryKey: ["/api/pastas/treinos"],
        queryFn: async () => apiRequest<Pasta[]>("GET", "/api/pastas/treinos").then(data => Array.isArray(data) ? data.sort((a, b) => (a.ordem ?? 0) - (b.ordem ?? 0)) : []).catch(() => { console.warn("Falha ao buscar pastas."); return [];})
    });

    useEffect(() => {
        if (pastasFromAPI) {
            const sortedPastas = [...pastasFromAPI].sort((a, b) => (a.ordem ?? 0) - (b.ordem ?? 0));
            if (JSON.stringify(sortedPastas) !== JSON.stringify(orderedPastas)) {
                setOrderedPastas(sortedPastas);
            }
        }
    }, [pastasFromAPI, orderedPastas]);

    const deleteRotinaMutation = useMutation<{ message: string }, Error, string>({
        mutationFn: (rotinaId: string) => apiRequest<{ message: string }>("DELETE", `/api/treinos/${rotinaId}`),
        onSuccess: (data, deletedRotinaId) => {
            toast({ title: "Sucesso!", description: data.message || "Rotina exclu√≠da." });
            queryClient.invalidateQueries({ queryKey: ["/api/treinos"] }); 
            queryClient.invalidateQueries({ queryKey: ["/api/treinos", deletedRotinaId] }); 

            const rotinaExcluida = rotinas.find(r => r._id === deletedRotinaId);
            if (rotinaExcluida?.tipo === 'individual' && rotinaExcluida.alunoId) {
                const alunoId = typeof rotinaExcluida.alunoId === 'object' ? rotinaExcluida.alunoId._id : rotinaExcluida.alunoId;
                if (alunoId) queryClient.invalidateQueries({ queryKey: ["fichasAluno", alunoId] }); // Manter "fichasAluno" por enquanto
            }
            setRotinaParaExcluirState(null); 
        },
        onError: (error) => {
            toast({ variant: "destructive", title: "Erro ao Excluir Rotina", description: error.message });
            setRotinaParaExcluirState(null);
        },
    });

    const deletePastaMutation = useMutation<{ message: string }, Error, string>({ 
        mutationFn: (pastaId: string) => apiRequest<{ message: string }>("DELETE", `/api/pastas/treinos/${pastaId}`),
        onSuccess: (data) => { toast({ title: "Pasta Exclu√≠da!", description: data.message || `A pasta "${pastaParaExcluir?.nome}" foi exclu√≠da.` }); queryClient.invalidateQueries({ queryKey: ["/api/pastas/treinos"] }); queryClient.invalidateQueries({ queryKey: ["/api/treinos"] }); setPastaParaExcluir(null); closeDeletePastaDialog(); },
        onError: (error) => { toast({ variant: "destructive", title: "Erro ao Excluir Pasta", description: error.message || "N√£o foi poss√≠vel excluir a pasta." }); closeDeletePastaDialog(); },
    });
    const reorderPastasMutation = useMutation<{ message: string }, Error, { novaOrdemIds: string[] }>({ 
        mutationFn: (payload) => apiRequest<{ message: string }>("PUT", "/api/pastas/treinos/reordenar", payload),
        onSuccess: () => { toast({ title: "Ordem Salva!", description: "A nova ordem das pastas foi salva." }); queryClient.invalidateQueries({ queryKey: ["/api/pastas/treinos"] });  },
        onError: (error) => { toast({ variant: "destructive", title: "Erro ao Reordenar", description: `N√£o foi poss√≠vel: ${error.message}` }); queryClient.refetchQueries({ queryKey: ["/api/pastas/treinos"] }); }
    });
    const reorderFichasMutation = useMutation< { message: string }, Error, { idContexto: string | null; novaOrdemFichaIds: string[] } >({ 
        mutationFn: (payload) => apiRequest<{ message: string }>("PUT", "/api/treinos/reordenar", payload),
        onSuccess: () => { toast({ title: "Ordem das Rotinas Salva!", description: "A nova ordem das rotinas foi salva." }); queryClient.invalidateQueries({ queryKey: ["/api/treinos"] });  },
        onError: (error) => { toast({ variant: "destructive", title: "Erro ao Reordenar Rotinas", description: `N√£o foi poss√≠vel: ${error.message}` }); queryClient.refetchQueries({ queryKey: ["/api/treinos"] }); }
    });

    const handleDragEnd = (event: DragEndEvent) => {
        const { active, over } = event;
        if (!over || !active || active.id === over.id) return;
        const activeData = active.data.current as DraggableItemData | undefined;
        const overData = over.data.current as DraggableItemData | undefined;
        if (activeData?.type === "pasta" && overData?.type === "pasta") {
            setOrderedPastas((prev) => { const oldIndex = prev.findIndex(p => p._id === active.id); const newIndex = prev.findIndex(p => p._id === over.id); if (oldIndex === -1 || newIndex === -1) return prev; const newArray = arrayMove(prev, oldIndex, newIndex); reorderPastasMutation.mutate({ novaOrdemIds: newArray.map(p => p._id) }); return newArray; });
        } else if (activeData?.type === "ficha_modelo_em_pasta" && overData?.type === "ficha_modelo_em_pasta" && activeData.pastaId === overData.pastaId) {
            const pastaIdDoContexto = activeData.pastaId;
            if (!pastaIdDoContexto) return;
            setOrderedRotinasModelo((prevGlobal) => {
                let fichasNestaPasta = prevGlobal.filter(f => (typeof f.pastaId === 'string' && f.pastaId === pastaIdDoContexto) || (typeof f.pastaId === 'object' && f.pastaId?._id === pastaIdDoContexto));
                const oldIndexInPasta = fichasNestaPasta.findIndex(f => f._id === active.id);
                const newIndexInPasta = fichasNestaPasta.findIndex(f => f._id === over.id);
                if (oldIndexInPasta === -1 || newIndexInPasta === -1) return prevGlobal;
                fichasNestaPasta = arrayMove(fichasNestaPasta, oldIndexInPasta, newIndexInPasta);
                const outrasRotinasModelo = prevGlobal.filter(f => !((typeof f.pastaId === 'string' && f.pastaId === pastaIdDoContexto) || (typeof f.pastaId === 'object' && f.pastaId?._id === pastaIdDoContexto)));
                const novaOrdemFichaIdsParaBackend = fichasNestaPasta.map(f => f._id);
                reorderFichasMutation.mutate({ idContexto: pastaIdDoContexto, novaOrdemFichaIds: novaOrdemFichaIdsParaBackend });
                return [...outrasRotinasModelo, ...fichasNestaPasta].sort((a,b) => (a.ordemNaPasta ?? 0) - (b.ordemNaPasta ?? 0));
            });
        }
    };

    const handleOpenCreateRotinaModal = () => { setRotinaParaEditar(null); setIsRotinaModalOpen(true); };
    
    const handleOpenEditRotinaModal = (rotina: RotinaListagemItem) => {
        const rotinaEditFormat: RotinaParaEditar = {
            _id: rotina._id, 
            titulo: rotina.titulo,
            descricao: rotina.descricao,
            tipo: rotina.tipo,
            statusModelo: rotina.statusModelo,
            alunoId: typeof rotina.alunoId === 'object' && rotina.alunoId !== null ? rotina.alunoId._id : (rotina.alunoId as string | null),
            pastaId: typeof rotina.pastaId === 'object' && rotina.pastaId !== null ? rotina.pastaId._id : (rotina.pastaId as string | null),
            tipoOrganizacaoRotina: rotina.tipoOrganizacaoRotina,
            diasDeTreino: rotina.diasDeTreino,
            dataValidade: rotina.dataValidade, 
            totalSessoesRotinaPlanejadas: rotina.totalSessoesRotinaPlanejadas,
        };
        setRotinaParaEditar(rotinaEditFormat);
        setIsRotinaModalOpen(true);
    };
    
    const handleCloseRotinaModal = () => { setIsRotinaModalOpen(false); setRotinaParaEditar(null); };
    const handleSuccessRotinaModal = (savedRotina: RotinaListagemItem) => { handleCloseRotinaModal(); }; 

    const handleOpenViewModal = (rotina: RotinaListagemItem) => {
        const exerciciosPlanosParaView: ExercicioEmDiaDeTreinoDetalhado[] = (rotina.diasDeTreino || []).flatMap(dia => 
            (dia.exerciciosDoDia || []).map(ex => ({
                ...ex, 
            }))
        );

        const rotinaViewDataParaModal: FichaTreinoView = { // FichaTreinoView ser√° RotinaTreinoView
            _id: rotina._id,
            titulo: rotina.titulo,
            descricao: rotina.descricao ?? undefined,
            tipo: rotina.tipo,
            alunoId: rotina.alunoId, 
            criadorId: rotina.criadorId, 
            criadoEm: rotina.criadoEm,
            atualizadoEm: rotina.atualizadoEm,
            statusModelo: rotina.statusModelo ?? undefined, 
            tipoOrganizacaoRotina: rotina.tipoOrganizacaoRotina,
            diasDeTreino: rotina.diasDeTreino, 
            exercicios: exerciciosPlanosParaView,
        };
        setRotinaParaVisualizar(rotinaViewDataParaModal);
        setIsRotinaModalOpen(false);
        setIsViewModalOpen(true);
    };
    
    const handleTriggerEditRotinaFromView = (rotinaFromView: FichaTreinoView) => { // FichaTreinoView ser√° RotinaTreinoView
        setIsViewModalOpen(false);
        const rotinaOriginal = rotinas.find(r => r._id === rotinaFromView._id);
        if (rotinaOriginal) {
            handleOpenEditRotinaModal(rotinaOriginal);
        } else {
            toast({ title: "Erro", description: "N√£o foi poss√≠vel encontrar dados da rotina para edi√ß√£o.", variant: "destructive"});
        }
    };

    const handleTriggerUseOrCopyRotina = (rotinaId: string, rotinaTitulo: string) => { // Renomeado de Ficha
        setIsViewModalOpen(false); 
        setRotinaModeloParaAssociar({ id: rotinaId, titulo: rotinaTitulo }); 
        setIsAssociarModeloModalOpen(true); 
    };
    const handleConfirmDeleteRotina = () => { // Renomeado de Ficha
        if (rotinaParaExcluirState) { 
            deleteRotinaMutation.mutate(rotinaParaExcluirState._id); 
        }
    };
    const handleDeletePastaClick = (pasta: Pasta) => { 
        setPastaParaExcluir(pasta); 
        openDeletePastaDialog({ 
            titulo: "Excluir Pasta de Rotinas", // Renomeado
            mensagem: (<span>Tem certeza que deseja excluir a pasta "<strong>{pasta.nome}</strong>"? <br /> Todas as rotinas modelo dentro dela ficar√£o sem pasta. Esta a√ß√£o n√£o pode ser desfeita.</span>), 
            textoConfirmar: "Excluir Pasta", 
            textoCancelar: "Cancelar", 
            onConfirm: () => { if (pasta._id) { deletePastaMutation.mutate(pasta._id); } } 
        }); 
    };
    const handleOpenPastaModal = (pasta?: PastaExistente) => { setPastaParaEditarState(pasta || null); setIsPastaModalOpen(true); };
    const handleSavePasta = async (data: PastaFormData, pastaId?: string) => { 
        setIsLoadingSavePasta(true); 
        const endpoint = pastaId ? `/api/pastas/treinos/${pastaId}` : "/api/pastas/treinos"; 
        const method = pastaId ? "PUT" : "POST"; 
        try { 
            await apiRequest<Pasta>(method, endpoint, data); 
            toast({ title: `Pasta ${pastaId ? 'Atualizada' : 'Criada'}!`, description: `Pasta "${data.nome}" ${pastaId ? 'atualizada' : 'criada'} com sucesso.` }); 
            queryClient.invalidateQueries({ queryKey: ["/api/pastas/treinos"] }); 
            setIsPastaModalOpen(false); 
            setPastaParaEditarState(null); 
        } catch (error: any) { 
            toast({ variant: "destructive", title: `Erro ao ${pastaId ? 'Atualizar' : 'Criar'} Pasta`, description: error.message || "Ocorreu um erro inesperado.", }); 
        } finally { 
            setIsLoadingSavePasta(false); 
        } 
    };
    
    if (isLoadingRotinas || isLoadingAlunos || isLoadingPastas) { return <LoadingSpinner text="Carregando dados de treinos..." />; }
    const combinedError = errorRotinas || errorAlunosHook || errorPastasHook; 
    if (combinedError) { return <ErrorMessage title="Erro ao Carregar Dados" message={combinedError.message} />; }

    const rotinasModeloSemPasta = orderedRotinasModelo.filter(r => !r.pastaId || (typeof r.pastaId === 'object' && !r.pastaId?._id) && typeof r.pastaId !== 'string' );
    const rotinasIndividuais = rotinas.filter(r => r.tipo === 'individual');

    interface RotinasAgrupadasPorAlunoTipoLocal { [alunoId: string]: { alunoNome: string; rotinas: RotinaListagemItem[]; } } // Renomeado de Fichas
    const getNomeAluno = (alunoData?: { _id: string; nome: string; } | string | null): string => { if (!alunoData) return "Aluno n√£o vinculado"; if (typeof alunoData === 'object' && alunoData !== null && alunoData.nome) return alunoData.nome; if (typeof alunoData === 'string') { const alunoEncontrado = alunos?.find(a => a._id === alunoData); return alunoEncontrado ? alunoEncontrado.nome : `ID: ${alunoData.substring(0,6)}..`; } return "Nome Indisp."; };
    const rotinasIndividuaisAgrupadas: RotinasAgrupadasPorAlunoTipoLocal = rotinasIndividuais.reduce((acc, rotina) => { const alunoId = typeof rotina.alunoId === 'object' && rotina.alunoId !== null ? rotina.alunoId._id : (typeof rotina.alunoId === 'string' ? rotina.alunoId : 'sem_aluno'); const alunoNome = getNomeAluno(rotina.alunoId); if (!acc[alunoId]) acc[alunoId] = { alunoNome: alunoNome, rotinas: [] }; acc[alunoId].rotinas.push(rotina); return acc; }, {} as RotinasAgrupadasPorAlunoTipoLocal); // Renomeado de fichas

    const renderRotinaIndividualItem = (rotina: RotinaListagemItem, alunoIdContext: string): JSX.Element => ( <div key={rotina._id} className="border-t first:border-t-0 dark:border-slate-700 p-3 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2 hover:bg-slate-100 dark:hover:bg-slate-800/60 transition-colors"> <div className="flex-grow"> <h4 className="font-medium text-sm text-slate-800 dark:text-slate-100">{rotina.titulo}</h4> {rotina.descricao && <p className="text-xs text-slate-500 dark:text-slate-400 line-clamp-1">{rotina.descricao}</p>} <p className="text-xs text-slate-400 dark:text-slate-500 mt-0.5"> Criada em: {new Date(rotina.criadoEm).toLocaleDateString('pt-BR')} </p> </div> <div className="flex-shrink-0 flex gap-1 self-start sm:self-center mt-1 sm:mt-0"> <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild><Button variant="ghost" size="icon" title="Visualizar Rotina" onClick={(e) => { e.stopPropagation(); handleOpenViewModal(rotina);}} className="h-7 w-7 text-blue-600 hover:text-blue-700 dark:text-sky-400 dark:hover:text-sky-300"><Eye className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Visualizar Rotina</p></TooltipContent></Tooltip></TooltipProvider> <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild><Button variant="ghost" size="icon" title="Editar Rotina" onClick={(e) => { e.stopPropagation(); handleOpenEditRotinaModal(rotina);}} disabled={deleteRotinaMutation.isPending} className="h-7 w-7 text-yellow-500 hover:text-yellow-600 dark:text-amber-400 dark:hover:text-amber-300"><Edit className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Editar Rotina</p></TooltipContent></Tooltip></TooltipProvider> <AlertDialog> <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild><AlertDialogTrigger asChild><Button variant="ghost" size="icon" title="Excluir Rotina" onClick={(e) => {e.stopPropagation(); setRotinaParaExcluirState(rotina);}} disabled={deleteRotinaMutation.isPending && deleteRotinaMutation.variables === rotina._id} className="h-7 w-7 text-red-600 hover:text-red-700 dark:text-rose-500 dark:hover:text-rose-400">{deleteRotinaMutation.isPending && deleteRotinaMutation.variables === rotina._id ? ( <Loader2 className="w-4 h-4 animate-spin" /> ) : ( <Trash2 className="w-4 h-4" /> )}</Button></AlertDialogTrigger></TooltipTrigger><TooltipContent><p>Excluir Rotina</p></TooltipContent></Tooltip></TooltipProvider> {rotinaParaExcluirState?._id === rotina._id && (<AlertDialogContent><AlertDialogHeader><AlertDialogTitle>Confirmar Exclus√£o</AlertDialogTitle><AlertDialogDescription>Tem certeza que deseja excluir a rotina "{rotinaParaExcluirState?.titulo}"? Esta a√ß√£o n√£o pode ser desfeita.</AlertDialogDescription></AlertDialogHeader><AlertDialogFooter><AlertDialogCancel onClick={(e) => {e.stopPropagation(); setRotinaParaExcluirState(null);}} disabled={deleteRotinaMutation.isPending}>Cancelar</AlertDialogCancel><AlertDialogAction onClick={(e) => {e.stopPropagation(); handleConfirmDeleteRotina();}} disabled={deleteRotinaMutation.isPending} className="bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-800">{deleteRotinaMutation.isPending ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Excluindo...</>) : "Confirmar Exclus√£o"}</AlertDialogAction></AlertDialogFooter></AlertDialogContent>)} </AlertDialog> </div> </div> );
    const renderRotinaModeloCard = (rotina: RotinaListagemItem, pastaIdContext: string | null): JSX.Element => ( <SortableFichaItem rotina={rotina} pastaIdContext={pastaIdContext} key={rotina._id}> <div className="border rounded-lg p-4 shadow-sm dark:border-slate-700 bg-white dark:bg-slate-800/90 flex flex-col md:flex-row justify-between items-start md:items-center gap-4 hover:shadow-md transition-shadow"> <div className="flex items-center flex-grow min-w-0">  <GripVertical className="w-5 h-5 text-slate-400 dark:text-slate-500 mr-2 cursor-grab shrink-0" /> <div className="flex-grow truncate"> <h3 className="font-semibold text-lg mb-1 text-slate-800 dark:text-slate-100 truncate" title={rotina.titulo}>{rotina.titulo}</h3> {rotina.descricao && <p className="text-sm text-slate-600 dark:text-slate-400 mb-2 truncate" title={rotina.descricao}>{rotina.descricao}</p>} <p className="text-xs text-slate-500 dark:text-slate-400"> Criada em: {new Date(rotina.criadoEm).toLocaleDateString('pt-BR')} </p> </div> </div> <div className="flex-shrink-0 flex flex-wrap gap-1 self-start md:self-center mt-2 md:mt-0"> <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild><Button variant="ghost" size="icon" title="Visualizar Rotina" onClick={() => handleOpenViewModal(rotina)} className="h-8 w-8 text-blue-600 hover:text-blue-700 dark:text-sky-400 dark:hover:text-sky-300"><Eye className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Visualizar Rotina</p></TooltipContent></Tooltip></TooltipProvider> <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild><Button variant="ghost" size="icon" title="Copiar para Aluno" onClick={() => handleTriggerUseOrCopyRotina(rotina._id, rotina.titulo)} className="h-8 w-8 text-green-600 hover:text-green-700 dark:text-emerald-500 dark:hover:text-emerald-400"><CopyPlus className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Copiar para Aluno</p></TooltipContent></Tooltip></TooltipProvider> <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild><Button variant="ghost" size="icon" title="Editar Rotina" onClick={() => handleOpenEditRotinaModal(rotina)} disabled={deleteRotinaMutation.isPending} className="h-8 w-8 text-yellow-500 hover:text-yellow-600 dark:text-amber-400 dark:hover:text-amber-300"><Edit className="w-4 h-4" /></Button></TooltipTrigger><TooltipContent><p>Editar Rotina</p></TooltipContent></Tooltip></TooltipProvider> <AlertDialog> <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild><AlertDialogTrigger asChild><Button variant="ghost" size="icon" title="Excluir Rotina" onClick={() => {setRotinaParaExcluirState(rotina);}} disabled={deleteRotinaMutation.isPending && deleteRotinaMutation.variables === rotina._id} className="h-8 w-8 text-red-600 hover:text-red-700 dark:text-rose-500 dark:hover:text-rose-400">{deleteRotinaMutation.isPending && deleteRotinaMutation.variables === rotina._id ? ( <Loader2 className="w-4 h-4 animate-spin" /> ) : ( <Trash2 className="w-4 h-4" /> )}</Button></AlertDialogTrigger></TooltipTrigger><TooltipContent><p>Excluir Rotina</p></TooltipContent></Tooltip></TooltipProvider> {rotinaParaExcluirState?._id === rotina._id && ( <AlertDialogContent><AlertDialogHeader> <AlertDialogTitle>Confirmar Exclus√£o</AlertDialogTitle> <AlertDialogDescription> Tem certeza que deseja excluir a rotina "{rotinaParaExcluirState?.titulo}"? Esta a√ß√£o n√£o pode ser desfeita. </AlertDialogDescription> </AlertDialogHeader><AlertDialogFooter> <AlertDialogCancel onClick={() => setRotinaParaExcluirState(null)} disabled={deleteRotinaMutation.isPending}>Cancelar</AlertDialogCancel> <AlertDialogAction onClick={handleConfirmDeleteRotina} disabled={deleteRotinaMutation.isPending} className="bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-800"> {deleteRotinaMutation.isPending ? (<><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Excluindo...</>) : "Confirmar Exclus√£o"} </AlertDialogAction> </AlertDialogFooter></AlertDialogContent>)} </AlertDialog> </div> </div> </SortableFichaItem> );
    interface DraggablePastaAccordionItemProps { pasta: Pasta; fichasNestaPasta: RotinaListagemItem[]; dndListeners?: any; } // Renomeado fichasNestaPasta
    const DraggablePastaAccordionItem: React.FC<DraggablePastaAccordionItemProps> = ({ pasta, fichasNestaPasta: rotinasNestaPasta, dndListeners }) => { const rotinasOrdenadasNaPasta = useMemo(() => [...rotinasNestaPasta].sort((a, b) => (a.ordemNaPasta ?? 0) - (b.ordemNaPasta ?? 0)), [rotinasNestaPasta]); return ( <AccordionItem value={pasta._id} key={pasta._id} className="border dark:border-slate-700 rounded-lg shadow-sm bg-white dark:bg-slate-800/50 overflow-hidden"> <div className="flex items-center justify-between px-4 py-1 hover:bg-slate-100 dark:hover:bg-slate-700/80 rounded-t-lg transition-colors"> <AccordionTrigger className="flex-grow py-2 px-0 hover:no-underline text-slate-800 dark:text-slate-100"> <div className="flex items-center gap-2"> <span {...dndListeners} className="p-1.5 cursor-grab touch-none" title="Reordenar Pasta"><GripVertical className="w-4 h-4 text-slate-400 hover:text-slate-600 dark:text-slate-500 dark:hover:text-slate-300" /></span> <FolderOpen className="w-5 h-5 text-blue-500 dark:text-sky-500" /> <span className="font-medium text-left">{pasta.nome}</span> <Badge variant="secondary" className="ml-2 bg-blue-100 text-blue-700 dark:bg-sky-700 dark:text-sky-100">{rotinasOrdenadasNaPasta.length} rotina(s)</Badge> </div> </AccordionTrigger> <div className="flex items-center gap-1 flex-shrink-0 ml-2"> <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild><Button variant="ghost" size="icon" className="h-7 w-7 text-slate-500 hover:text-yellow-600 dark:text-slate-400 dark:hover:text-amber-400" onClick={(e) => { e.stopPropagation(); handleOpenPastaModal(pasta);}} title="Editar Pasta"> <Edit className="w-4 h-4"/> </Button></TooltipTrigger><TooltipContent><p>Editar Pasta</p></TooltipContent></Tooltip></TooltipProvider> <TooltipProvider delayDuration={100}><Tooltip><TooltipTrigger asChild><Button variant="ghost" size="icon" className="h-7 w-7 text-slate-500 hover:text-red-600 dark:text-slate-400 dark:hover:text-rose-500" onClick={(e) => { e.stopPropagation(); handleDeletePastaClick(pasta);}} title="Excluir Pasta" disabled={deletePastaMutation.isPending && pastaParaExcluir?._id === pasta._id}>{deletePastaMutation.isPending && pastaParaExcluir?._id === pasta._id ? (<Loader2 className="w-4 h-4 animate-spin" />) : (<Trash2 className="w-4 h-4"/>)}</Button></TooltipTrigger><TooltipContent><p>Excluir Pasta</p></TooltipContent></Tooltip></TooltipProvider> </div> </div> <AccordionContent className="px-4 py-3 border-t dark:border-slate-700 bg-slate-50 dark:bg-slate-800/30"> {rotinasOrdenadasNaPasta.length > 0 ? ( <SortableContext items={rotinasOrdenadasNaPasta.map(r => r._id)} strategy={verticalListSortingStrategy}> <div className="space-y-3"> {rotinasOrdenadasNaPasta.map(rotina => renderRotinaModeloCard(rotina, pasta._id))} </div> </SortableContext> ) : ( <p className="text-sm text-center text-slate-500 dark:text-slate-400 py-3">Nenhuma rotina modelo nesta pasta.</p> )} </AccordionContent> </AccordionItem> ); };

    return (
        <TooltipProvider>
            <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>
                <div className="container mx-auto py-8 px-4 bg-slate-50 dark:bg-slate-900 min-h-screen">
                    <Card className="mb-8 shadow-lg dark:bg-slate-800">
                        <CardHeader className="border-b dark:border-slate-700 bg-slate-100 dark:bg-slate-700/50 p-4 rounded-t-lg">
                            <CardTitle className="flex flex-col sm:flex-row items-start sm:items-center justify-between text-xl font-semibold text-slate-800 dark:text-slate-100 gap-2">
                                <span className="flex items-center"><Folder className="w-6 h-6 mr-2 text-blue-600 dark:text-sky-500"/>Rotinas de Treino Modelo</span>
                                <div className="flex items-center gap-2 self-start sm:self-center">
                                    <Button size="sm" variant="outline" onClick={() => handleOpenPastaModal()} className="border-blue-500 text-blue-600 hover:bg-blue-50 dark:border-sky-500 dark:text-sky-400 dark:hover:bg-sky-900/50 text-sm"><FolderPlus className="w-4 h-4 mr-2" /> Nova Pasta</Button>
                                    <Button size="sm" onClick={handleOpenCreateRotinaModal} className="bg-blue-600 hover:bg-blue-700 dark:bg-sky-600 dark:hover:dark:bg-sky-700 text-white text-sm"> <Dumbbell className="w-4 h-4 mr-2" /> Nova Rotina Modelo </Button>
                                </div>
                            </CardTitle>
                        </CardHeader>
                        <CardContent className="pt-6">
                             {isLoadingPastas && <LoadingSpinner text="Carregando pastas..." />}
                            {!isLoadingPastas && orderedPastas.length > 0 && ( <SortableContext items={orderedPastas.map(p => p._id)} strategy={verticalListSortingStrategy}> <Accordion type="multiple" className="w-full space-y-3 mb-6" value={openAccordionPastaItems} onValueChange={setOpenAccordionPastaItems}> {orderedPastas.map(pasta => { const rotinasNestaPasta = orderedRotinasModelo.filter(r => (typeof r.pastaId === 'string' && r.pastaId === pasta._id) || (typeof r.pastaId === 'object' && r.pastaId !== null && r.pastaId._id === pasta._id) ); return ( <SortablePastaItem key={pasta._id} id={pasta._id} data={{ type: "pasta", pasta: pasta }}> <DraggablePastaAccordionItem pasta={pasta} fichasNestaPasta={rotinasNestaPasta} /> </SortablePastaItem> ); })} </Accordion> </SortableContext> )}
                            {rotinasModeloSemPasta.length > 0 && ( <><h4 className="text-md font-semibold text-slate-700 dark:text-slate-300 mb-3 mt-4 pt-4 border-t dark:border-slate-700">Rotinas Sem Pasta</h4> <div className="space-y-4"> {rotinasModeloSemPasta.map(rotina => renderRotinaModeloCard(rotina, null))} </div></> )}
                            {!isLoadingPastas && orderedRotinasModelo.length === 0 && orderedPastas.length === 0 && (<p className="text-center text-slate-500 dark:text-slate-400 py-6">Nenhuma rotina modelo ou pasta cadastrada.</p>)}
                        </CardContent>
                    </Card>
                    <Card className="shadow-lg dark:bg-slate-800">
                        <CardHeader className="border-b dark:border-slate-700 bg-slate-100 dark:bg-slate-700/50 p-4 rounded-t-lg">
                            <CardTitle className="text-xl font-semibold text-slate-800 dark:text-slate-100 flex items-center"><Users className="w-5 h-5 mr-2 text-teal-600 dark:text-teal-500"/>Rotinas de Treino Individuais</CardTitle>
                        </CardHeader>
                        <CardContent className="pt-2 px-0 sm:px-2 md:px-4">
                            {Object.keys(rotinasIndividuaisAgrupadas).length > 0 ? ( <Accordion type="multiple" className="w-full" value={openAccordionAlunoItems} onValueChange={setOpenAccordionAlunoItems}> {Object.entries(rotinasIndividuaisAgrupadas) .sort(([, dataA], [, dataB]) => dataA.alunoNome.localeCompare(dataB.alunoNome)) .map(([alunoId, data]) => ( <AccordionItem value={alunoId} key={alunoId} className="border-b dark:border-slate-700 last:border-b-0"> <AccordionTrigger className="py-4 px-3 hover:bg-slate-100 dark:hover:bg-slate-700/80 rounded-t-md text-left text-slate-700 dark:text-slate-200 transition-colors"> <div className="flex items-center gap-2"> <User className="w-4 h-4 text-teal-600 dark:text-teal-500" /> <span className="font-medium ">{data.alunoNome}</span> <Badge variant="outline" className="ml-2 border-teal-500 text-teal-600 dark:border-teal-600 dark:text-teal-400">{data.rotinas.length} rotina(s)</Badge> </div> </AccordionTrigger> <AccordionContent className="bg-slate-50 dark:bg-slate-800/30 px-0 py-0 rounded-b-md"> {data.rotinas.sort((a,b) => new Date(b.criadoEm).getTime() - new Date(a.criadoEm).getTime()).map(rotina => renderRotinaIndividualItem(rotina, alunoId))} </AccordionContent> </AccordionItem> ))} </Accordion> ) : (<p className="text-center text-slate-500 dark:text-slate-400 py-6">Nenhuma rotina individual atribu√≠da.</p>)}
                        </CardContent>
                    </Card>
                    {isRotinaModalOpen && ( <RotinaFormModal open={isRotinaModalOpen} onClose={handleCloseRotinaModal} onSuccess={handleSuccessRotinaModal} alunos={alunos || []} rotinaParaEditar={rotinaParaEditar} /> )}
                    {isViewModalOpen && rotinaParaVisualizar && ( <FichaViewModal isOpen={isViewModalOpen} onClose={() => { setIsViewModalOpen(false); setRotinaParaVisualizar(null); }} ficha={rotinaParaVisualizar} onUseOuCopiarFicha={handleTriggerUseOrCopyRotina} onEditFicha={handleTriggerEditRotinaFromView}/> )}
                    {isAssociarModeloModalOpen && rotinaModeloParaAssociar && ( <AssociarModeloAlunoModal isOpen={isAssociarModeloModalOpen} onClose={() => setIsAssociarModeloModalOpen(false)} fichaModeloId={rotinaModeloParaAssociar.id} fichaModeloTitulo={rotinaModeloParaAssociar.titulo}/> )}
                    {isPastaModalOpen && ( <PastaFormModal isOpen={isPastaModalOpen} onClose={() => { setIsPastaModalOpen(false); setPastaParaEditarState(null); }} onSave={handleSavePasta} initialData={pastaParaEditarState} isLoading={isLoadingSavePasta}/> )}
                    <ModalConfirmacao isOpen={isConfirmDeletePastaOpen} onClose={closeDeletePastaDialog} onConfirm={confirmDeletePastaAction} titulo={confirmDeletePastaOptions.titulo} mensagem={confirmDeletePastaOptions.mensagem} textoConfirmar={confirmDeletePastaOptions.textoConfirmar} textoCancelar={confirmDeletePastaOptions.textoCancelar} isLoadingConfirm={deletePastaMutation.isPending}/>
                </div>
            </DndContext>
        </TooltipProvider>
    );
}


==== ./client/src/pages/workouts/[id].tsx ====

import { useEffect, useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Link, useLocation } from "wouter";
import { ArrowLeft, ChevronDown, ChevronUp, Dumbbell, Plus, Trash2 } from "lucide-react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

interface WorkoutDetailProps {
  id: string;
}

export default function WorkoutDetail({ id }: WorkoutDetailProps) {
  const workoutId = parseInt(id);
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState("details");
  
  // Form state
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [duration, setDuration] = useState("");
  const [status, setStatus] = useState("active");
  
  // Exercises management
  const [addExerciseDialogOpen, setAddExerciseDialogOpen] = useState(false);
  const [selectedExercise, setSelectedExercise] = useState<number | null>(null);
  const [sets, setSets] = useState("");
  const [reps, setReps] = useState("");
  const [restTime, setRestTime] = useState("");
  const [notes, setNotes] = useState("");
  
  const trainerId = 1; // Using default trainer ID

  // Fetch workout plan details
  const { data: workoutPlan, isLoading: isWorkoutLoading } = useQuery({
    queryKey: [`/api/workout-plans/${workoutId}`],
    queryFn: async () => {
      const res = await fetch(`/api/workout-plans/${workoutId}`);
      if (!res.ok) throw new Error("Failed to fetch workout plan");
      return res.json();
    }
  });

  // Fetch workout exercises
  const { data: workoutExercises, isLoading: isExercisesLoading, refetch: refetchExercises } = useQuery({
    queryKey: [`/api/workout-plans/${workoutId}/exercises`],
    queryFn: async () => {
      const res = await fetch(`/api/workout-plans/${workoutId}/exercises`);
      if (!res.ok) throw new Error("Failed to fetch workout exercises");
      return res.json();
    },
    enabled: !!workoutId
  });

  // Fetch all available exercises
  const { data: exerciseLibrary, isLoading: isLibraryLoading } = useQuery({
    queryKey: ["/api/exercises"],
    queryFn: async () => {
      const res = await fetch("/api/exercises");
      if (!res.ok) throw new Error("Failed to fetch exercises");
      return res.json();
    }
  });

  // Set form values once workout plan data is loaded
  useEffect(() => {
    if (workoutPlan) {
      setName(workoutPlan.name);
      setDescription(workoutPlan.description || "");
      setDuration(workoutPlan.duration.toString());
      setStatus(workoutPlan.status);
    }
  }, [workoutPlan]);

  // Get exercise details by ID
  const getExerciseDetails = (id: number) => {
    if (!exerciseLibrary) return null;
    return exerciseLibrary.find((ex: any) => ex.id === id);
  };

  // Handle form submission
  const handleSave = async () => {
    if (!name.trim()) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Workout name is required"
      });
      return;
    }
    
    try {
      await apiRequest("PUT", `/api/workout-plans/${workoutId}`, {
        name,
        description,
        duration: parseInt(duration),
        status,
        trainerId
      });
      
      await queryClient.invalidateQueries({ queryKey: [`/api/workout-plans/${workoutId}`] });
      await queryClient.invalidateQueries({ queryKey: ["/api/workout-plans"] });
      
      toast({
        title: "Success",
        description: "Workout plan has been updated"
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update workout plan"
      });
    }
  };

  // Handle adding a new exercise to the workout
  const handleAddExercise = async () => {
    if (!selectedExercise) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Please select an exercise"
      });
      return;
    }
    
    try {
      const nextOrder = workoutExercises ? workoutExercises.length + 1 : 1;
      
      await apiRequest("POST", `/api/workout-exercises`, {
        workoutPlanId: workoutId,
        exerciseId: selectedExercise,
        sets: sets ? parseInt(sets) : null,
        reps: reps ? parseInt(reps) : null,
        rest: restTime ? parseInt(restTime) : null,
        notes,
        order: nextOrder
      });
      
      await refetchExercises();
      
      // Reset form
      setSelectedExercise(null);
      setSets("");
      setReps("");
      setRestTime("");
      setNotes("");
      setAddExerciseDialogOpen(false);
      
      toast({
        title: "Success",
        description: "Exercise added to workout plan"
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to add exercise"
      });
    }
  };

  // Handle removing an exercise from the workout
  const handleRemoveExercise = async (exerciseId: number) => {
    try {
      await apiRequest("DELETE", `/api/workout-exercises/${exerciseId}`, undefined);
      await refetchExercises();
      
      toast({
        title: "Success",
        description: "Exercise removed from workout plan"
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to remove exercise"
      });
    }
  };

  // Loading state
  if (isWorkoutLoading) {
    return (
      <div className="p-4 md:p-6 lg:p-8">
        <div className="animate-pulse">
          <div className="h-6 w-32 bg-gray-200 rounded mb-6"></div>
          <Card className="border border-gray-100">
            <CardHeader className="px-6 pt-6 pb-4">
              <div className="h-7 bg-gray-200 rounded w-48 mb-2"></div>
              <div className="h-4 bg-gray-200 rounded w-64"></div>
            </CardHeader>
            <CardContent className="px-6 pb-6">
              <div className="space-y-4">
                <div className="space-y-2">
                  <div className="h-4 bg-gray-200 rounded w-32"></div>
                  <div className="h-10 bg-gray-200 rounded"></div>
                </div>
                <div className="space-y-2">
                  <div className="h-4 bg-gray-200 rounded w-32"></div>
                  <div className="h-24 bg-gray-200 rounded"></div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  // Not found state
  if (!workoutPlan && !isWorkoutLoading) {
    return (
      <div className="p-4 md:p-6 lg:p-8">
        <div className="text-center py-12">
          <h2 className="text-xl font-semibold mb-2">Workout plan not found</h2>
          <p className="text-gray-500 mb-6">The workout plan you're looking for doesn't exist or has been removed.</p>
          <Link href="/workouts">
            <Button>
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Workouts
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 md:p-6 lg:p-8">
      <Link
        href="/workouts"
        className="inline-flex items-center mb-6 text-sm text-primary hover:text-primary-dark"
      >
        <ArrowLeft className="w-4 h-4 mr-1" />
        Back to Workouts
      </Link>

      <Card className="border border-gray-100 mb-6">
        <CardHeader className="px-6 pt-6 pb-4 flex flex-col md:flex-row md:items-start md:justify-between gap-4">
          <div>
            <CardTitle className="text-xl font-semibold">Edit Workout Plan</CardTitle>
            <CardDescription>
              Update workout details and exercises
            </CardDescription>
          </div>
          <div className="flex gap-2">
            <Button variant="outline" onClick={() => navigate("/workouts")}>
              Cancel
            </Button>
            <Button onClick={handleSave}>
              Save Changes
            </Button>
          </div>
        </CardHeader>
        <CardContent className="px-6 pb-6">
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="mb-6">
              <TabsTrigger value="details">Plan Details</TabsTrigger>
              <TabsTrigger value="exercises">Exercises</TabsTrigger>
              <TabsTrigger value="students">Assigned Students</TabsTrigger>
            </TabsList>
            
            <TabsContent value="details" className="mt-0">
              <div className="space-y-4">
                <div className="grid gap-4 sm:grid-cols-2">
                  <div className="space-y-2">
                    <Label htmlFor="name">Workout Name*</Label>
                    <Input 
                      id="name" 
                      value={name} 
                      onChange={(e) => setName(e.target.value)}
                      placeholder="e.g. Strength Training" 
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="status">Status</Label>
                    <Select value={status} onValueChange={setStatus}>
                      <SelectTrigger id="status">
                        <SelectValue placeholder="Select status" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="active">Active</SelectItem>
                        <SelectItem value="draft">Draft</SelectItem>
                        <SelectItem value="archived">Archived</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea 
                    id="description" 
                    value={description} 
                    onChange={(e) => setDescription(e.target.value)}
                    placeholder="Describe the workout plan" 
                    rows={3}
                  />
                </div>
                
                <div className="space-y-2 max-w-xs">
                  <Label htmlFor="duration">Duration (weeks)</Label>
                  <Input 
                    id="duration" 
                    type="number" 
                    min="1" 
                    value={duration} 
                    onChange={(e) => setDuration(e.target.value)}
                  />
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="exercises" className="mt-0">
              <div className="flex justify-between items-center mb-4">
                <h3 className="font-medium">Exercise List</h3>
                <Dialog open={addExerciseDialogOpen} onOpenChange={setAddExerciseDialogOpen}>
                  <DialogTrigger asChild>
                    <Button size="sm">
                      <Plus className="h-4 w-4 mr-2" />
                      Add Exercise
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Add Exercise to Workout</DialogTitle>
                      <DialogDescription>
                        Select an exercise and specify sets, reps, and rest time.
                      </DialogDescription>
                    </DialogHeader>
                    
                    <div className="space-y-4 py-2">
                      <div className="space-y-2">
                        <Label htmlFor="exercise">Exercise*</Label>
                        <Select value={selectedExercise?.toString() || ""} onValueChange={(value) => setSelectedExercise(parseInt(value))}>
                          <SelectTrigger id="exercise">
                            <SelectValue placeholder="Select an exercise" />
                          </SelectTrigger>
                          <SelectContent>
                            {exerciseLibrary?.map((exercise: any) => (
                              <SelectItem key={exercise.id} value={exercise.id.toString()}>
                                {exercise.name} ({exercise.muscleGroup})
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div className="grid grid-cols-2 gap-4">
                        <div className="space-y-2">
                          <Label htmlFor="sets">Sets</Label>
                          <Input 
                            id="sets" 
                            type="number" 
                            min="1" 
                            value={sets} 
                            onChange={(e) => setSets(e.target.value)}
                          />
                        </div>
                        <div className="space-y-2">
                          <Label htmlFor="reps">Reps</Label>
                          <Input 
                            id="reps" 
                            type="number" 
                            min="1" 
                            value={reps} 
                            onChange={(e) => setReps(e.target.value)}
                          />
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="rest">Rest Time (seconds)</Label>
                        <Input 
                          id="rest" 
                          type="number" 
                          min="0" 
                          value={restTime} 
                          onChange={(e) => setRestTime(e.target.value)}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="notes">Notes</Label>
                        <Textarea 
                          id="notes" 
                          value={notes} 
                          onChange={(e) => setNotes(e.target.value)}
                          placeholder="Additional instructions or tips" 
                          rows={2}
                        />
                      </div>
                    </div>
                    
                    <DialogFooter>
                      <Button variant="outline" onClick={() => setAddExerciseDialogOpen(false)}>
                        Cancel
                      </Button>
                      <Button onClick={handleAddExercise}>
                        Add to Workout
                      </Button>
                    </DialogFooter>
                  </DialogContent>
                </Dialog>
              </div>
              
              {isExercisesLoading ? (
                <div className="animate-pulse space-y-4">
                  {[1, 2, 3].map((i) => (
                    <div key={i} className="h-16 bg-gray-100 rounded-lg"></div>
                  ))}
                </div>
              ) : (
                <>
                  {(!workoutExercises || workoutExercises.length === 0) ? (
                    <div className="text-center py-12 bg-gray-50 rounded-lg">
                      <Dumbbell className="h-12 w-12 text-gray-400 mx-auto mb-3" />
                      <h3 className="text-lg font-medium text-gray-900 mb-1">No Exercises Added</h3>
                      <p className="text-gray-500 mb-4">This workout plan doesn't have any exercises yet.</p>
                      <Button onClick={() => setAddExerciseDialogOpen(true)}>
                        <Plus className="h-4 w-4 mr-2" />
                        Add First Exercise
                      </Button>
                    </div>
                  ) : (
                    <div className="border rounded-lg overflow-hidden">
                      <Table>
                        <TableHeader className="bg-gray-50">
                          <TableRow>
                            <TableHead className="w-12">#</TableHead>
                            <TableHead>Exercise</TableHead>
                            <TableHead>Muscle Group</TableHead>
                            <TableHead>Sets</TableHead>
                            <TableHead>Reps</TableHead>
                            <TableHead>Rest</TableHead>
                            <TableHead className="text-right">Actions</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          {workoutExercises.map((ex: any, index: number) => {
                            const exerciseDetails = getExerciseDetails(ex.exerciseId);
                            return (
                              <TableRow key={ex.id}>
                                <TableCell className="font-medium">{index + 1}</TableCell>
                                <TableCell>{exerciseDetails?.name || "Unknown Exercise"}</TableCell>
                                <TableCell>{exerciseDetails?.muscleGroup || "-"}</TableCell>
                                <TableCell>{ex.sets || "-"}</TableCell>
                                <TableCell>{ex.reps || "-"}</TableCell>
                                <TableCell>{ex.rest ? `${ex.rest}s` : "-"}</TableCell>
                                <TableCell className="text-right">
                                  <div className="flex justify-end space-x-2">
                                    <Button 
                                      variant="ghost" 
                                      size="icon"
                                      className="h-8 w-8 text-gray-500 hover:text-gray-700"
                                      onClick={() => {}}
                                    >
                                      <ChevronUp className="h-4 w-4" />
                                    </Button>
                                    <Button 
                                      variant="ghost" 
                                      size="icon"
                                      className="h-8 w-8 text-gray-500 hover:text-gray-700"
                                      onClick={() => {}}
                                    >
                                      <ChevronDown className="h-4 w-4" />
                                    </Button>
                                    <Button 
                                      variant="ghost" 
                                      size="icon"
                                      className="h-8 w-8 text-red-500 hover:text-red-700 hover:bg-red-50"
                                      onClick={() => handleRemoveExercise(ex.id)}
                                    >
                                      <Trash2 className="h-4 w-4" />
                                    </Button>
                                  </div>
                                </TableCell>
                              </TableRow>
                            );
                          })}
                        </TableBody>
                      </Table>
                    </div>
                  )}
                </>
              )}
            </TabsContent>
            
            <TabsContent value="students" className="mt-0">
              <div className="flex justify-between items-center mb-4">
                <h3 className="font-medium">Students Using This Plan</h3>
                <Button size="sm" variant="outline">
                  <Plus className="h-4 w-4 mr-2" />
                  Assign to Student
                </Button>
              </div>
              
              <div className="text-center py-12 bg-gray-50 rounded-lg">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400 mx-auto mb-3">
                  <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
                  <circle cx="9" cy="7" r="4" />
                  <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
                  <path d="M16 3.13a4 4 0 0 1 0 7.75" />
                </svg>
                <h3 className="text-lg font-medium text-gray-900 mb-1">No Students Assigned</h3>
                <p className="text-gray-500 mb-4">This workout hasn't been assigned to any students yet.</p>
                <Button variant="outline">
                  <Plus className="h-4 w-4 mr-2" />
                  Assign to Student
                </Button>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}

==== ./client/src/pages/workouts/index.tsx ====

// client/src/pages/workouts/index.tsx
import React from 'react';
import { Link } from 'wouter'; 
import { ArrowLeft } from 'lucide-react'; 

export default function WorkoutsIndex() {
  
  // --- CORRIGIR A EXTENS√ÉO DO ARQUIVO AQUI ---
  const imagePath = '/em-desenvolvimento.jpeg'; // Usar .jpeg
  // --- FIM DA CORRE√á√ÉO ---

  return (
    <div className="flex flex-col items-center justify-center text-center p-8 min-h-[calc(100vh-150px)]"> 
      
      <img 
        src={imagePath}                     
        alt="Ferramenta em desenvolvimento" 
        className="max-w-xs w-full h-auto mb-6" 
      />

           <p className="text-gray-500 mb-8">
        Esta se√ß√£o de Treinos est√° sendo preparada. Volte em breve!
      </p>

      <Link 
        href="/" 
        className="inline-flex items-center px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors text-sm font-medium"
      >
        <ArrowLeft className="w-4 h-4 mr-2" />
        Voltar para o Painel
      </Link>

    </div>
  );
}
==== ./client/src/pages/workouts/new.tsx ====

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { WorkoutForm } from "@/forms/workout-form";
import { Link } from "wouter";
import { ChevronLeft } from "lucide-react";

export default function NewWorkout() {
  return (
    <div className="p-4 md:p-6 lg:p-8">
      <Link
        href="/workouts"
        className="inline-flex items-center mb-4 text-sm text-primary hover:text-primary-dark"
      >
        <ChevronLeft className="w-4 h-4 mr-1" />
        Back to Workouts
      </Link>
      <Card className="max-w-2xl mx-auto border border-gray-100">
        <CardHeader className="px-6 pt-6 pb-4">
          <CardTitle className="text-xl font-semibold">Create New Workout Plan</CardTitle>
          <CardDescription>
            Design a workout plan for your students with exercises, sets, and reps.
          </CardDescription>
        </CardHeader>
        <CardContent className="px-6 pb-6">
          <WorkoutForm />
        </CardContent>
      </Card>
    </div>
  );
}

==== ./client/src/types/aluno.ts ====

export interface Aluno {
    _id: string;
    nome: string;
    email: string;
    phone?: string;
    birthDate: string;
    gender: string;
    goal: string;
    weight: number;
    height: number;
    startDate: string;
    status: string;
    notes?: string;
    trainerId: number;
  }
  
==== ./client/src/types/exercicio.ts ====

// client/src/types/exercicio.ts

// Define e exporta a interface Exercicio
export interface Exercicio { 
    _id: string; 
    nome: string;
    grupoMuscular: string;
    descricao?: string;
    categoria?: string;
    imageUrl?: string;
    videoUrl?: string; 
    isCustom: boolean;
    creatorId?: string; 
    favoritedBy?: string[]; 
    isFavorited?: boolean; 
    createdAt?: string; 
    updatedAt?: string; 
  }