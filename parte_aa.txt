
==== ./client/src/App.tsx ====

// client/src/App.tsx
import React, { Suspense, lazy, useContext } from 'react';
import { Switch, Route, Redirect, useLocation, RouteProps, Params } from "wouter";
import { QueryClientProvider } from "@tanstack/react-query";
import { ThemeProvider } from "next-themes";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import MainLayout from "@/components/layout/main-layout";
import Dashboard from "@/pages/dashboard";
import StudentsIndex from "@/pages/alunos/index";
import NewStudent from "@/pages/alunos/new";
import StudentDetail from "@/pages/alunos/[id]";
import EditStudentPage from "@/pages/alunos/edit";
import ExercisesIndex from "@/pages/exercises/index";
import SessionsPage from "@/pages/sessoes/index";
import TreinosPage from "@/pages/treinos/index";
const ProfileEditPage = lazy(() => import('@/pages/perfil/editar'));
import NotFound from "@/pages/not-found";
import LoginPage from "@/pages/login"; // Login de Personal/Admin
import { UserProvider, UserContext } from "@/context/UserContext";
import { AlunoProvider, useAluno } from "@/context/AlunoContext";
import { queryClient } from "./lib/queryClient";
import { Loader2 } from "lucide-react";

// Páginas de Admin
const CriarPersonalPage = lazy(() => import("@/pages/admin/CriarPersonalPage"));
const ListarPersonaisPage = lazy(() => import("@/pages/admin/ListarPersonaisPage"));
const GerenciarConvitesPage = lazy(() => import("@/pages/admin/GerenciarConvitesPage"));

// Páginas Públicas
const CadastroPersonalPorConvitePage = lazy(() => import("@/pages/public/CadastroPersonalPorConvitePage"));
const CadastroAlunoPorConvitePersonalPage = lazy(() => import("@/pages/public/CadastroAlunoPorConvitePersonalPage"));
const AlunoLoginPage = lazy(() => import("@/pages/public/AlunoLoginPage"));

// Páginas do Aluno
const AlunoDashboardPage = lazy(() => import('@/pages/alunos/AlunoDashboardPage'));
const AlunoFichaDetalhePage = lazy(() => import('@/pages/alunos/AlunoFichaDetalhePage'));
const AlunoHistoricoPage = lazy(() => import('@/pages/alunos/AlunoHistoricoPage')); // <<< ADICIONADO IMPORT LAZY

interface CustomRouteProps extends Omit<RouteProps, 'component' | 'children'> {
  component?: React.ComponentType<any>;
  children?: React.ReactNode | ((params: Params) => React.ReactNode);
}

const ProtectedRoute: React.FC<CustomRouteProps> = ({ component: Component, children, ...rest }) => {
  const { user, isLoading: isUserContextLoading } = useContext(UserContext);
  if (isUserContextLoading) {
    return <div className="flex h-screen w-full items-center justify-center"><Loader2 className="h-10 w-10 animate-spin text-primary" /></div>;
  }
  if (!user) return <Redirect to="/login" />;
  if (Component) return <Route {...rest} component={Component} />;
  return <Route {...rest}>{children}</Route>;
};

const AdminRoute: React.FC<CustomRouteProps> = ({ component: Component, children, ...rest }) => {
  const { user, isLoading: isUserContextLoading } = useContext(UserContext);
  if (isUserContextLoading) {
    return <div className="flex h-screen w-full items-center justify-center"><Loader2 className="h-10 w-10 animate-spin text-primary" /></div>;
  }
  if (!user) return <Redirect to="/login" />;
  if (user.role !== 'Admin') return <Redirect to="/" />;
  if (Component) return <Route {...rest} component={Component} />;
  return <Route {...rest}>{children}</Route>;
};

const AlunoProtectedRoute: React.FC<CustomRouteProps> = ({ component: Component, children, ...rest }) => {
  const { aluno, isLoadingAluno } = useAluno();
  if (isLoadingAluno) {
    return <div className="flex h-screen w-full items-center justify-center"><Loader2 className="h-10 w-10 animate-spin text-primary" /> Carregando dados do aluno...</div>;
  }
  if (!aluno) return <Redirect to="/aluno/login" />;
  if (Component) return <Route {...rest} component={Component} />;
  return <Route {...rest}>{children}</Route>;
};


function AppContent() {
  const { user, isLoading: isUserContextLoading } = useContext(UserContext);
  const { aluno, isLoadingAluno } = useAluno();
  const [location] = useLocation();

  const isAuthLoading = isUserContextLoading || isLoadingAluno;
  const noUserOrAluno = !user && !aluno;
  const isPublicAuthRoute = location === "/login" ||
                            location === "/aluno/login" ||
                            location.startsWith("/cadastrar-personal/convite/") ||
                            location.startsWith("/convite-aluno/");

  if (isAuthLoading && noUserOrAluno && !isPublicAuthRoute) {
    return <div className="flex h-screen w-full items-center justify-center"><Loader2 className="h-10 w-10 animate-spin text-primary" /> Verificando sessão...</div>;
  }

  if (user) { // Se um Personal/Admin está logado
    if (isPublicAuthRoute && location !== "/login") return <Redirect to="/" />;
    return (
      <MainLayout>
        <Suspense fallback={<div className="flex h-full flex-1 items-center justify-center"><Loader2 className="h-8 w-8 animate-spin text-primary" /></div>}>
          <Switch>
            <ProtectedRoute path="/" component={Dashboard} />
            <ProtectedRoute path="/alunos" component={StudentsIndex} />
            <ProtectedRoute path="/alunos/novo" component={NewStudent} />
            <ProtectedRoute path="/alunos/:id">{(params: Params) => <StudentDetail id={params.id} />}</ProtectedRoute>
            <ProtectedRoute path="/alunos/editar/:id">{(params: Params) => <EditStudentPage id={params.id} />}</ProtectedRoute>
            <ProtectedRoute path="/treinos" component={TreinosPage} />
            <ProtectedRoute path="/exercises" component={ExercisesIndex} />
            <ProtectedRoute path="/sessoes" component={SessionsPage} />
            <ProtectedRoute path="/perfil/editar" component={ProfileEditPage} />

            <AdminRoute path="/admin/criar-personal" component={CriarPersonalPage} />
            <AdminRoute path="/admin/gerenciar-personais" component={ListarPersonaisPage} />
            <AdminRoute path="/admin/convites" component={GerenciarConvitesPage} />

            <Route component={NotFound} />
          </Switch>
        </Suspense>
      </MainLayout>
    );
  } else if (aluno) { // Se um Aluno está logado
     if (isPublicAuthRoute && location !== "/aluno/login") return <Redirect to="/aluno/dashboard" />;
    return (
      <MainLayout>
        <Suspense fallback={<div className="flex h-full flex-1 items-center justify-center"><Loader2 className="h-8 w-8 animate-spin text-primary" /></div>}>
          <Switch>
            <AlunoProtectedRoute path="/aluno/dashboard" component={AlunoDashboardPage} />
            <AlunoProtectedRoute path="/aluno/ficha/:fichaId" component={AlunoFichaDetalhePage} />
            <AlunoProtectedRoute path="/aluno/historico" component={AlunoHistoricoPage} /> {/* <<< ADICIONADA ROTA PROTEGIDA */}
            <Route> <Redirect to="/aluno/dashboard" /> </Route> {/* Fallback para rotas não encontradas na área do aluno */}
          </Switch>
        </Suspense>
      </MainLayout>
    );
  } else {
    // Ninguém logado - Rotas Públicas
    return (
      <Suspense fallback={<div className="flex h-screen w-full items-center justify-center"><Loader2 className="h-10 w-10 animate-spin text-primary" /></div>}>
        <Switch>
          <Route path="/login" component={LoginPage} />
          <Route path="/cadastrar-personal/convite/:tokenDeConvite" component={CadastroPersonalPorConvitePage} />
          <Route path="/convite-aluno/:tokenPersonal" component={CadastroAlunoPorConvitePersonalPage} />
          <Route path="/aluno/login" component={AlunoLoginPage} />
          <Route>
            {!isPublicAuthRoute ? <Redirect to="/login" /> : <LoginPage />}
          </Route>
        </Switch>
      </Suspense>
    );
  }
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider attribute="class" defaultTheme="light" enableSystem>
        <TooltipProvider>
          <UserProvider>
            <AlunoProvider>
              <Toaster />
              <AppContent />
            </AlunoProvider>
          </UserProvider>
        </TooltipProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

export default App;
==== ./client/src/components/ErrorMessage.tsx ====

// client/src/components/ErrorMessage.tsx
import { AlertTriangle } from "lucide-react";

interface ErrorMessageProps {
  title?: string;
  message: string;
}

export default function ErrorMessage({ title = "Erro", message }: ErrorMessageProps) {
  return (
    <div className="bg-red-100 border border-red-300 text-red-800 p-4 rounded-md flex items-start space-x-2">
      <AlertTriangle className="w-5 h-5 mt-0.5 text-red-600" />
      <div>
        <p className="font-semibold">{title}</p>
        <p className="text-sm">{message}</p>
      </div>
    </div>
  );
}

==== ./client/src/components/LoadingSpinner.tsx ====

import { Loader2 } from "lucide-react";

// 1. Definir uma interface para as props
interface LoadingSpinnerProps {
  text?: string; // A prop 'text' é opcional (pode usar só o ícone)
}

// 2. Usar a interface de props e desestruturar 'text'
export default function LoadingSpinner({ text }: LoadingSpinnerProps) {
  return (
    // 3. Ajustar o layout para acomodar o texto (flex-col) e adicionar o texto
    <div className="flex flex-col justify-center items-center h-32 gap-3"> {/* Adicionado flex-col e gap */}
      <Loader2 className="h-6 w-6 animate-spin text-primary" />
      {/* 4. Renderizar o texto apenas se ele for fornecido */}
      {text && <p className="text-sm text-muted-foreground">{text}</p>}
    </div>
  );
}
==== ./client/src/components/alunos/FrequenciaSemanal.tsx ====

// Caminho: ./client/src/components/alunos/FrequenciaSemanal.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { CheckCircle2, AlertCircle, CalendarDays } from 'lucide-react';
import { format, getDay, isSameDay, startOfWeek, addDays, isToday as dateIsToday } from 'date-fns';
import { ptBR } from 'date-fns/locale';

// Interface para a sessão como recebida da API (apenas os campos que usaremos)
interface SessaoConcluida {
  _id: string;
  sessionDate: string | Date; // Pode vir como string ISO ou já como objeto Date
  tipoCompromisso?: string; // Opcional, caso queira diferenciar tipos de sessão no futuro
}

interface FrequenciaSemanalProps {
  sessoesConcluidasNaSemana: SessaoConcluida[];
  isLoading?: boolean;
  error?: Error | null;
}

const DIAS_DA_SEMANA_ABREVIADOS = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];
// Para a lógica de 'weekStartsOn: 1' (Segunda como início)
const DIAS_DA_SEMANA_LABEL_ORDENADO = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom'];

const FrequenciaSemanal: React.FC<FrequenciaSemanalProps> = ({ 
  sessoesConcluidasNaSemana,
  isLoading = false,
  error = null 
}) => {
  
  const hoje = new Date();
  // Segunda-feira como início da semana
  const inicioDaSemanaAtual = startOfWeek(hoje, { weekStartsOn: 1 });

  const diasParaRenderizar = DIAS_DA_SEMANA_LABEL_ORDENADO.map((_, index) => {
    // Se o início da semana é Segunda (index 0 do nosso array ordenado),
    // e addDays(inicioDaSemanaAtual, 0) é Segunda,
    // addDays(inicioDaSemanaAtual, 1) é Terça, etc.
    return addDays(inicioDaSemanaAtual, index);
  });

  const foiDiaTreinado = (dia: Date): boolean => {
    return sessoesConcluidasNaSemana.some(sessao => 
      isSameDay(new Date(sessao.sessionDate), dia)
    );
  };

  if (isLoading) {
    return (
      <Card className="shadow">
        <CardHeader>
          <CardTitle className="flex items-center text-lg">
            <CalendarDays className="w-5 h-5 mr-2 text-primary" />
            Frequência Semanal
          </CardTitle>
        </CardHeader>
        <CardContent className="text-center py-6">
          <p className="text-sm text-muted-foreground">Carregando frequência...</p>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="shadow border-destructive/50">
        <CardHeader>
          <CardTitle className="flex items-center text-lg text-destructive">
            <AlertCircle className="w-5 h-5 mr-2" />
            Frequência Semanal
          </CardTitle>
        </CardHeader>
        <CardContent className="text-center py-6">
          <p className="text-sm text-destructive">Erro ao carregar frequência.</p>
          {/* <p className="text-xs text-muted-foreground">{error.message}</p> */}
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow-md">
      <CardHeader>
        <CardTitle className="flex items-center text-lg">
          <CalendarDays className="w-5 h-5 mr-2 text-primary" />
          Frequência Semanal
        </CardTitle>
        <CardDescription>Seus treinos concluídos nesta semana.</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="flex justify-around items-center py-2">
          {diasParaRenderizar.map((dia, index) => {
            const treinou = foiDiaTreinado(dia);
            const ehHoje = dateIsToday(dia);
            const diaLabel = DIAS_DA_SEMANA_LABEL_ORDENADO[index];

            return (
              <div key={diaLabel} className="flex flex-col items-center space-y-1">
                <span className={`text-xs font-medium ${ehHoje ? 'text-primary dark:text-sky-400' : 'text-muted-foreground'}`}>
                  {diaLabel}
                </span>
                <div 
                  className={`
                    w-8 h-8 rounded-full flex items-center justify-center border-2
                    ${treinou 
                      ? 'bg-green-500 border-green-600 dark:bg-green-600 dark:border-green-700' 
                      : 'bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600'}
                    ${ehHoje && !treinou ? 'border-primary dark:border-sky-500 ring-2 ring-primary/50 dark:ring-sky-500/50' : ''}
                    ${ehHoje && treinou ? 'ring-2 ring-green-500/50 dark:ring-green-600/50' : ''}
                  `}
                  title={treinou ? `Treino concluído em ${format(dia, 'dd/MM')}` : `Sem treino concluído em ${format(dia, 'dd/MM')}`}
                >
                  {treinou && <CheckCircle2 className="w-4 h-4 text-white" />}
                </div>
                <span className={`text-xs font-bold ${ehHoje ? 'text-primary dark:text-sky-400' : 'text-foreground'}`}>
                  {format(dia, 'dd')}
                </span>
              </div>
            );
          })}
        </div>
        {sessoesConcluidasNaSemana.length === 0 && (
          <p className="text-center text-sm text-muted-foreground mt-3">
            Nenhum treino concluído esta semana ainda. Vamos lá!
          </p>
        )}
      </CardContent>
    </Card>
  );
};

export default FrequenciaSemanal;
==== ./client/src/components/buttons/ExerciseDeleteButton.tsx ====

// client/src/components/buttons/ExerciseDeleteButton.tsx
import { useState } from "react";
import { Trash, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  AlertDialog,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogCancel,
  AlertDialogAction,
} from "@/components/ui/alert-dialog";
import { useToast } from "@/hooks/use-toast"; // <<< USA O HOOK
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";

interface Props {
  exercicioId: string;
  onDeleted: () => void;
}

export default function ExerciseDeleteButton({ exercicioId, onDeleted }: Props) {
  const { toast } = useToast(); // <<< USA O HOOK
  const queryClient = useQueryClient();
  const [isAlertOpen, setIsAlertOpen] = useState(false);

  const deleteMutation = useMutation< { message: string }, Error, string >({
    mutationFn: (idToDelete) => apiRequest<{ message: string }>("DELETE", `/api/exercicios/${idToDelete}`),
    onSuccess: (data) => {
      toast({ title: "Sucesso!", description: data.message || "Exercício excluído." }); // Chama toast do hook
      onDeleted();
      queryClient.invalidateQueries({ queryKey: ['/api/exercicios/meus'] });
      setIsAlertOpen(false);
    },
    onError: (error) => {
      toast({ // Chama toast do hook
        variant: "destructive",
        title: "Erro ao Excluir",
        description: error.message || "Não foi possível excluir o exercício.",
      });
    },
  });

  const handleConfirmDelete = () => {
    deleteMutation.mutate(exercicioId);
  };

  return (
     <AlertDialog open={isAlertOpen} onOpenChange={setIsAlertOpen}>
      <AlertDialogTrigger asChild>
         <Button
           variant="ghost"
           size="icon"
           className="text-destructive hover:text-destructive hover:bg-destructive/10 h-8 w-8" // Ajuste visual
           title="Excluir Exercício"
         >
           <Trash className="w-4 h-4" />
         </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
         <AlertDialogHeader>
           <AlertDialogTitle>Excluir Exercício</AlertDialogTitle>
           <AlertDialogDescription>
             Tem certeza que deseja excluir este exercício? Os treinos que o utilizam podem ser afetados. Esta ação não poderá ser desfeita.
           </AlertDialogDescription>
         </AlertDialogHeader>
         <AlertDialogFooter>
           <AlertDialogCancel disabled={deleteMutation.isPending}>Cancelar</AlertDialogCancel>
           <AlertDialogAction
              onClick={handleConfirmDelete}
              disabled={deleteMutation.isPending}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
           >
             {deleteMutation.isPending ? ( <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> Excluindo...</> ) : 'Excluir'}
           </AlertDialogAction>
         </AlertDialogFooter>
      </AlertDialogContent>
     </AlertDialog>
  );
}
==== ./client/src/components/dialogs/AlunoViewModal.tsx ====

import React from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Aluno } from "@/types/aluno";

interface AlunoViewModalProps {
  aluno: Aluno;
  trigger?: React.ReactNode;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}

const AlunoViewModal: React.FC<AlunoViewModalProps> = ({
  aluno,
  trigger,
  open,
  onOpenChange,
}) => {
  const formatDateBR = (dateStr: string) =>
    new Intl.DateTimeFormat("pt-BR").format(new Date(dateStr));

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>}
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Detalhes de {aluno.nome}</DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="perfil" className="w-full">
          <TabsList className="mb-4">
            <TabsTrigger value="perfil">Perfil</TabsTrigger>
            <TabsTrigger value="treino" disabled>Treino Atual</TabsTrigger>
          </TabsList>

          <TabsContent value="perfil">
            <ScrollArea className="h-[300px] pr-4">
              <div className="space-y-2 text-sm">
                <p><strong>Email:</strong> {aluno.email}</p>
                <p><strong>Telefone:</strong> {aluno.phone || "Não informado"}</p>
                <p><strong>Data de nascimento:</strong> {formatDateBR(aluno.birthDate)}</p>
                <p><strong>Gênero:</strong> {aluno.gender}</p>
                <p><strong>Objetivo:</strong> {aluno.goal}</p>
                <p><strong>Peso:</strong> {aluno.weight} kg</p>
                <p><strong>Altura:</strong> {aluno.height} cm</p>
                <p><strong>Data de início:</strong> {formatDateBR(aluno.startDate)}</p>
                <p>
                  <strong>Status:</strong>{" "}
                  <Badge variant="outline" className="bg-green-100 text-green-800">
                    {aluno.status === "active" ? "Ativo" : "Inativo"}
                  </Badge>
                </p>
                <p><strong>Observações:</strong> {aluno.notes || "Nenhuma"}</p>
              </div>
            </ScrollArea>
          </TabsContent>

          <TabsContent value="treino">
            <div className="text-center text-muted-foreground">
              Vinculação de treinos em breve.
            </div>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};

export default AlunoViewModal;

==== ./client/src/components/dialogs/AssociarModeloAlunoModal.tsx ====

// client/src/components/dialogs/AssociarModeloAlunoModal.tsx
// ATUALIZADO: Adicionados mais logs no handleSubmit para depurar a chamada API

import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2, Users } from 'lucide-react';
import { Aluno } from '@/types/aluno';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { useQuery, useQueryClient as useTanstackQueryClient } from '@tanstack/react-query';

interface AssociarModeloAlunoModalProps {
  isOpen: boolean;
  onClose: () => void;
  fichaModeloId: string | null;
  fichaModeloTitulo: string | null;
  // Removido onModeloAssociado da prop, a lógica de sucesso será tratada aqui
}

interface AssociacaoResponse {
    _id: string;
    titulo: string;
    tipo: 'individual';
    alunoId: { _id: string; nome: string; };
}

const AssociarModeloAlunoModal: React.FC<AssociarModeloAlunoModalProps> = ({
  isOpen,
  onClose,
  fichaModeloId,
  fichaModeloTitulo,
}) => {
  const [selectedAlunoId, setSelectedAlunoId] = useState<string | undefined>(undefined);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  const queryClient = useTanstackQueryClient();

  const { data: alunos = [], isLoading: isLoadingAlunos } = useQuery<Aluno[], Error>({
    queryKey: ["/api/alunos/associar-modal"], // Chave ligeiramente diferente para evitar conflitos se houver outra query /api/alunos
    queryFn: async () => {
      console.log("[AssociarModeloAlunoModal] Buscando alunos para o modal...");
      const data = await apiRequest<Aluno[]>("GET", "/api/alunos");
      console.log(`[AssociarModeloAlunoModal] ${data.length} alunos recebidos.`);
      return Array.isArray(data) ? data : [];
    },
    enabled: isOpen, // Só busca quando o modal está aberto
    staleTime: 1000 * 60 * 5, // Cache de 5 minutos
  });

  useEffect(() => {
    if (isOpen) {
      setSelectedAlunoId(undefined); // Reseta ao abrir/mudar ficha
    }
  }, [isOpen, fichaModeloId]);

  const handleSubmit = async () => {
    if (!fichaModeloId || !selectedAlunoId) {
      toast({
        variant: "destructive",
        title: "Seleção Incompleta",
        description: "Por favor, selecione um aluno.",
      });
      return;
    }

    setIsSubmitting(true);
    const payload = {
        fichaModeloId,
        alunoId: selectedAlunoId
    };
    const apiPath = "/api/treinos/associar-modelo";

    console.log(`[AssociarModeloAlunoModal] Tentando POST para: ${apiPath}`);
    console.log("[AssociarModeloAlunoModal] Payload:", JSON.stringify(payload, null, 2));

    try {
      // Chamada real à API
      const novaFichaIndividual = await apiRequest<AssociacaoResponse>("POST", apiPath, payload);
      
      console.log("[AssociarModeloAlunoModal] SUCESSO na chamada API. Resposta:", novaFichaIndividual);

      toast({
        title: "Sucesso!",
        description: `Ficha "${novaFichaIndividual.titulo}" criada para ${novaFichaIndividual.alunoId.nome}.`,
      });

      // Invalidar queries para atualizar as listas
      console.log("[AssociarModeloAlunoModal] Invalidando queries: /api/treinos e fichasAluno para", selectedAlunoId);
      queryClient.invalidateQueries({ queryKey: ["/api/treinos"] });
      queryClient.invalidateQueries({ queryKey: ["fichasAluno", selectedAlunoId] });

      onClose(); // Fecha o modal

    } catch (error: any) {
      console.error("[AssociarModeloAlunoModal] ERRO na chamada apiRequest:", error);
      console.error("[AssociarModeloAlunoModal] Detalhes do erro:", error.message, error.response?.data);
      toast({
        variant: "destructive",
        title: "Erro ao Associar",
        description: error.message || "Não foi possível criar a ficha individual a partir do modelo.",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen || !fichaModeloId || !fichaModeloTitulo) {
    return null;
  }

  return (
    <Dialog open={isOpen} onOpenChange={(openStatus) => !openStatus && onClose()}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center">
            <Users className="w-5 h-5 mr-2 text-primary" />
            Associar Modelo: {fichaModeloTitulo}
          </DialogTitle>
          <DialogDescription>
            Selecione um aluno para criar uma ficha individual baseada neste modelo.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          <div>
            <label htmlFor="aluno-select-associar" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Selecionar Aluno*
            </label>
            {isLoadingAlunos ? (
              <div className="flex items-center space-x-2 text-sm text-muted-foreground">
                <Loader2 className="h-4 w-4 animate-spin" />
                <span>Carregando alunos...</span>
              </div>
            ) : alunos.length === 0 ? (
                <p className="text-sm text-muted-foreground">Nenhum aluno cadastrado para selecionar.</p>
            ) : (
              <Select
                value={selectedAlunoId}
                onValueChange={setSelectedAlunoId}
                disabled={isSubmitting}
              >
                <SelectTrigger id="aluno-select-associar" className="w-full">
                  <SelectValue placeholder="Escolha um aluno..." />
                </SelectTrigger>
                <SelectContent>
                  {alunos.map((aluno) => (
                    <SelectItem key={aluno._id} value={aluno._id}>
                      {aluno.nome} ({aluno.email})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            )}
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose} disabled={isSubmitting}>
            Cancelar
          </Button>
          <Button
            onClick={handleSubmit}
            disabled={isSubmitting || isLoadingAlunos || !selectedAlunoId || alunos.length === 0}
          >
            {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Associar e Criar Ficha
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default AssociarModeloAlunoModal;

==== ./client/src/components/dialogs/EditFichaModal.tsx ====

import { useEffect, useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";

interface EditFichaModalProps {
  isOpen: boolean;
  onClose: () => void;
  fichaData: { // Dados necessários para edição
    _id: string;
    titulo: string;
    descricao?: string;
  } | null;
  onSave: (id: string, data: { titulo: string; descricao?: string }) => Promise<void>; // Função para salvar
  isLoading: boolean; // Estado de loading da mutation
}

export default function EditFichaModal({
  isOpen,
  onClose,
  fichaData,
  onSave,
  isLoading,
}: EditFichaModalProps) {
  const [titulo, setTitulo] = useState("");
  const [descricao, setDescricao] = useState("");

  // Atualiza o estado interno quando fichaData muda (ao abrir o modal)
  useEffect(() => {
    if (fichaData) {
      setTitulo(fichaData.titulo);
      setDescricao(fichaData.descricao || "");
    } else {
      // Reseta se não houver dados
      setTitulo("");
      setDescricao("");
    }
  }, [fichaData]);

  const handleSaveClick = async () => {
    if (!fichaData) return; // Segurança extra

    // Validação simples no frontend
    if (!titulo.trim()) {
      alert("O título não pode ficar em branco."); // Adicione um toast se necessário
      return;
    }

    try {
      await onSave(fichaData._id, { titulo: titulo.trim(), descricao });
      // Feedback e fechamento do modal tratados no sucesso da mutation
    } catch (error) {
      console.error("Erro ao salvar:", error);
      alert("Erro ao salvar as alterações. Tente novamente.");
    }
  };

  // Não renderiza nada se não estiver aberto ou sem dados
  if (!isOpen || !fichaData) {
    return null;
  }

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Editar Ficha de Treino</DialogTitle>
          <DialogDescription>Altere o título e a descrição da ficha.</DialogDescription>
        </DialogHeader>

        <div className="space-y-4 py-4">
          {/* Título */}
          <div>
            <Label htmlFor="edit-titulo-ficha">Título*</Label>
            <Input
              id="edit-titulo-ficha"
              value={titulo}
              onChange={(e) => setTitulo(e.target.value)}
              placeholder="Título da ficha"
              disabled={isLoading}
            />
          </div>

          {/* Descrição */}
          <div>
            <Label htmlFor="edit-descricao-ficha">Descrição</Label>
            <Textarea
              id="edit-descricao-ficha"
              value={descricao}
              onChange={(e) => setDescricao(e.target.value)}
              placeholder="Descrição (opcional)"
              disabled={isLoading}
            />
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            Cancelar
          </Button>
          <Button onClick={handleSaveClick} disabled={isLoading}>
            Salvar
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
==== ./client/src/components/dialogs/ExerciseEditModal.tsx ====

// client/src/components/dialogs/ExerciseEditModal.tsx
import React, { useEffect, useState } from "react"; // Import React
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Pencil, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast"; // <<< USA O HOOK
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
  SelectValue,
} from "@/components/ui/select";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Badge } from "@/components/ui/badge";

// Interfaces
interface ExercicioData {
  _id: string;
  nome: string;
  descricao?: string;
  categoria?: string;
  grupoMuscular?: string;
  tipo?: string;
  urlVideo?: string;
}
interface Props {
  exercicio: ExercicioData;
  onUpdated: () => void;
}
type UpdateExercicioPayload = Omit<ExercicioData, '_id'>;
interface UpdatedExercicioResponse extends ExercicioData {}

const NONE_FILTER_VALUE = "none"; // Valor para opção "Nenhum/Nenhuma"

export default function ExerciseEditModal(props: Props) {
  const { exercicio, onUpdated } = props;
  const { toast } = useToast(); // <<< USA O HOOK
  const queryClient = useQueryClient();
  const [open, setOpen] = useState(false);

  // Estados do formulário
  const [nome, setNome] = useState(exercicio.nome);
  const [descricao, setDescricao] = useState(exercicio.descricao || "");
  const [categoria, setCategoria] = useState(exercicio.categoria || NONE_FILTER_VALUE);
  const [grupoMuscular, setGrupoMuscular] = useState(exercicio.grupoMuscular || NONE_FILTER_VALUE);
  const [tipo, setTipo] = useState(exercicio.tipo || NONE_FILTER_VALUE);
  const [urlVideo, setUrlVideo] = useState(exercicio.urlVideo || "");

  // Resetar estado quando o modal abrir ou o exercício mudar
  useEffect(() => {
      if (exercicio && open) {
          setNome(exercicio.nome);
          setDescricao(exercicio.descricao || "");
          setCategoria(exercicio.categoria || NONE_FILTER_VALUE);
          setGrupoMuscular(exercicio.grupoMuscular || NONE_FILTER_VALUE);
          setTipo(exercicio.tipo || NONE_FILTER_VALUE);
          setUrlVideo(exercicio.urlVideo || "");
      }
      // Não reseta ao fechar para manter os dados se o usuário cancelar e reabrir
  }, [exercicio, open]);

  // Formata URL do vídeo
  const formatVideoUrl = (url: string): string | undefined => {
    if (!url) return undefined;
    let embedUrl: string | undefined = undefined;
    if (url.includes("youtu.be/")) {
      const id = url.split("youtu.be/")[1]?.split(/[?&]/)[0];
      if (id) {
        const time = url.includes("?t=") ? url.split("?t=")[1]?.split("&")[0] : "";
        embedUrl = `https://www.youtube.com/embed/${id}${time ? `?start=${time}` : ""}`;
      }
    } else if (url.includes("youtube.com/watch?v=")) {
        const id = url.split("v=")[1]?.split("&")[0];
         if (id) {
            const time = url.includes("?t=") ? url.split("?t=")[1]?.split("&")[0] : "";
            embedUrl = `https://www.youtube.com/embed/${id}${time ? `?start=${time}` : ""}`;
         }
    } else if (url.includes("drive.google.com/file/d/")) {
      const id = url.split("/d/")[1]?.split("/")[0];
      if (id) {
         embedUrl = `https://drive.google.com/file/d/${id}/preview`;
      }
    }
    if (!embedUrl && (url.startsWith('http://') || url.startsWith('https://'))) {
        return url;
    }
    return embedUrl;
  }

  // Mutação para atualizar
  const updateMutation = useMutation<
    UpdatedExercicioResponse, Error, UpdateExercicioPayload
  >({
    mutationFn: (payload) => apiRequest<UpdatedExercicioResponse>("PUT", `/api/exercicios/${exercicio._id}`, payload),
    onSuccess: (data) => {
      toast({ title: "Sucesso!", description: `Exercício "${data.nome}" atualizado.` }); // Chama toast do hook
      onUpdated();
      queryClient.invalidateQueries({ queryKey: ['/api/exercicios/meus'] });
      setOpen(false);
    },
    onError: (error) => {
      toast({ // Chama toast do hook
        variant: "destructive",
        title: "Erro ao Atualizar",
        description: error.message || "Não foi possível salvar as alterações.",
      });
    },
  })

  // Handler de submit
  const handleSubmit = () => {
     if (!nome.trim()) {
       toast({ title: "Erro de Validação", description: "O nome é obrigatório.", variant: "destructive" }); // Chama toast do hook
       return;
     }
    const finalVideoUrl = formatVideoUrl(urlVideo);
    const payload: UpdateExercicioPayload = {
      nome: nome.trim(),
      descricao: descricao.trim() || undefined,
      categoria: categoria === NONE_FILTER_VALUE ? undefined : categoria,
      grupoMuscular: grupoMuscular === NONE_FILTER_VALUE ? undefined : grupoMuscular,
      tipo: tipo === NONE_FILTER_VALUE ? undefined : tipo,
      urlVideo: finalVideoUrl || undefined,
    };
    updateMutation.mutate(payload);
  }

  // Definição de cores (mantido)
  const corGrupo: Record<string, string> = { /* ... */ };
  const corTipo: Record<string, string> = { /* ... */ };
  const isLoading = updateMutation.isPending;

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon" className="h-8 w-8 text-gray-500 hover:text-blue-600" title="Editar Exercício">
          <Pencil className="w-4 h-4" />
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-lg overflow-y-auto max-h-[80vh]">
        <DialogHeader>
          <DialogTitle>Editar Exercício</DialogTitle>
          <DialogDescription>Atualize os dados do exercício abaixo.</DialogDescription>
        </DialogHeader>
        <div className="flex gap-2 mb-2 flex-wrap -mt-2">
           {grupoMuscular && grupoMuscular !== NONE_FILTER_VALUE && ( <Badge variant="outline" className={corGrupo[grupoMuscular] || "border-border"}>{grupoMuscular}</Badge> )}
           {tipo && tipo !== NONE_FILTER_VALUE && ( <Badge variant="outline" className={corTipo[tipo] || "border-border"}>{tipo}</Badge> )}
        </div>
        <div className="flex flex-col gap-4 py-4">
             <div><Label htmlFor={`edit-nome-${exercicio._id}`}>Nome*</Label><Input id={`edit-nome-${exercicio._id}`} value={nome} onChange={(e) => setNome(e.target.value)} disabled={isLoading} required /></div>
             <div><Label htmlFor={`edit-grupo-${exercicio._id}`}>Grupo Muscular</Label><Select value={grupoMuscular} onValueChange={setGrupoMuscular} disabled={isLoading}><SelectTrigger id={`edit-grupo-${exercicio._id}`}><SelectValue placeholder="Selecione..." /></SelectTrigger><SelectContent><SelectItem value={NONE_FILTER_VALUE}>Nenhum</SelectItem><SelectItem value="Peitoral">Peitoral</SelectItem>{/*...outros*/}</SelectContent></Select></div>
             <div><Label htmlFor={`edit-tipo-${exercicio._id}`}>Tipo</Label><Select value={tipo} onValueChange={setTipo} disabled={isLoading}><SelectTrigger id={`edit-tipo-${exercicio._id}`}><SelectValue placeholder="Selecione..." /></SelectTrigger><SelectContent><SelectItem value={NONE_FILTER_VALUE}>Nenhum</SelectItem><SelectItem value="Musculação">Musculação</SelectItem>{/*...outros*/}</SelectContent></Select></div>
             <div><Label htmlFor={`edit-categoria-${exercicio._id}`}>Categoria</Label><Select value={categoria} onValueChange={setCategoria} disabled={isLoading}><SelectTrigger id={`edit-categoria-${exercicio._id}`}><SelectValue placeholder="Selecione..." /></SelectTrigger><SelectContent><SelectItem value={NONE_FILTER_VALUE}>Nenhuma</SelectItem><SelectItem value="Superior">Superior</SelectItem>{/*...outros*/}</SelectContent></Select></div>
             <div><Label htmlFor={`edit-descricao-${exercicio._id}`}>Descrição</Label><Textarea id={`edit-descricao-${exercicio._id}`} value={descricao} onChange={(e) => setDescricao(e.target.value)} disabled={isLoading} /></div>
             <div><Label htmlFor={`edit-urlVideo-${exercicio._id}`}>URL do Vídeo</Label><Input id={`edit-urlVideo-${exercicio._id}`} value={urlVideo} onChange={(e) => setUrlVideo(e.target.value)} disabled={isLoading} /></div>
        </div>
        <DialogFooter className="mt-4 flex justify-end gap-2">
          <Button variant="outline" onClick={() => setOpen(false)} disabled={isLoading}>Cancelar</Button>
          <Button onClick={handleSubmit} disabled={isLoading || !nome.trim()}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isLoading ? "Salvando..." : "Salvar Alterações"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
==== ./client/src/components/dialogs/ExerciseFormModal.tsx ====

import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Plus } from "lucide-react";
import { useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectTrigger,
  SelectContent,
  SelectItem,
  SelectValue,
} from "@/components/ui/select";
import { apiRequest } from "@/lib/queryClient"; // Importado apiRequest
import { useMutation, useQueryClient } from "@tanstack/react-query"; // Importado para usar mutação

interface Props {
  onCreated: () => void; // Callback para atualizar a lista na página pai
}

// Interface para os dados do exercício a serem enviados
interface ExercicioPayload {
  nome: string;
  descricao?: string;
  grupoMuscular?: string;
  tipo?: string;
  categoria?: string;
  urlVideo?: string;
}

// Interface para a resposta da API (pode incluir o _id do exercício criado)
interface ExercicioCriadoResponse {
  _id: string;
  // ... outros campos que a API retornar ...
}

export default function ExerciseFormModal({ onCreated }: Props) {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [open, setOpen] = useState(false);
  const [nome, setNome] = useState("");
  const [descricao, setDescricao] = useState("");
  const [grupoMuscular, setGrupoMuscular] = useState("");
  const [tipo, setTipo] = useState("");
  const [categoria, setCategoria] = useState("");
  const [urlVideo, setUrlVideo] = useState("");

  // Função de formatação de URL (sem alterações)
  const formatVideoUrl = (url: string): string | undefined => {
    if (!url) return undefined; // Retorna undefined se a URL estiver vazia
    if (url.includes("youtu.be/")) {
      const id = url.split("youtu.be/")[1].split(/[?&]/)[0];
      const time = url.includes("?t=") ? url.split("?t=")[1].split("&")[0] : "";
      return `https://www.youtube.com/embed/${id}${time ? `?start=${time}` : ""}`;
    }
     if (url.includes("youtube.com/watch?v=")) {
        const id = url.split("v=")[1].split("&")[0];
        const time = url.includes("?t=") ? url.split("?t=")[1].split("&")[0] : "";
        return `https://www.youtube.com/embed/${id}${time ? `?start=${time}` : ""}`;
    }
    if (url.includes("drive.google.com/file/d/")) {
      const id = url.split("/d/")[1].split("/")[0];
      return `https://drive.google.com/file/d/${id}/preview`;
    }
    // Retorna a URL original se não for um formato conhecido ou se for outro tipo de URL válida
    return url.startsWith('http://') || url.startsWith('https://') ? url : undefined;
  };

  // --- Mutação com React Query ---
  const createExerciseMutation = useMutation<
    ExercicioCriadoResponse,
    Error,
    ExercicioPayload
  >({
    mutationFn: (newExerciseData) => {
      // USA apiRequest para fazer o POST
      return apiRequest<ExercicioCriadoResponse>("POST", "/api/exercicios", newExerciseData);
    },
    onSuccess: () => {
      setOpen(false); // Fecha o modal
      // Limpa os campos do formulário
      setNome("");
      setDescricao("");
      setGrupoMuscular("");
      setTipo("");
      setCategoria("");
      setUrlVideo("");
      onCreated(); // Chama o callback para atualizar a lista na página pai
      toast({ title: "Exercício criado com sucesso!" });
      // Opcional: Invalidar queries relevantes se necessário
      queryClient.invalidateQueries({ queryKey: ['/api/exercicios/meus'] }); // Invalida a query dos "Meus Exercícios"
    },
    onError: (error) => {
       // O toast de erro já está sendo tratado aqui pela mutação
       toast({
            title: "Erro ao criar exercício",
            description: error.message || "Não foi possível salvar o exercício.",
            variant: "destructive"
       });
    },
  }); // <<<<<< Certifique-se que esta chave e parêntese estão fechando corretamente useMutation

  // handleSubmit agora usa a mutação
  const handleSubmit = () => {
     // Validação básica
    if (!nome.trim()) {
       toast({ title: "Erro de Validação", description: "O nome do exercício é obrigatório.", variant: "destructive" });
       return;
    }

    const finalVideoUrl = formatVideoUrl(urlVideo);

    const payload: ExercicioPayload = {
      nome: nome.trim(),
      // Inclui os campos apenas se tiverem valor, para não enviar strings vazias desnecessárias
      ...(descricao.trim() && { descricao: descricao.trim() }),
      ...(grupoMuscular && { grupoMuscular }),
      ...(tipo && { tipo }),
      ...(categoria && { categoria }),
      ...(finalVideoUrl && { urlVideo: finalVideoUrl }),
    };

    // Chama a mutação do React Query
    createExerciseMutation.mutate(payload);
  }; // <<<< Certifique-se que este ponto e vírgula está aqui fechando handleSubmit


  // Lógica dos badges - Verifique se não há erros de digitação aqui
  const corGrupo: Record<string, string> = {
    Peitoral: "bg-red-200", Costas: "bg-blue-200", Pernas: "bg-green-200",
    Ombros: "bg-yellow-200", Bíceps: "bg-purple-200", Tríceps: "bg-pink-200",
    Abdômen: "bg-orange-200", Outros: "bg-gray-200",
  }; // <<<< Ponto e vírgula aqui
  const corCategoria: Record<string, string> = {
    Superior: "bg-emerald-200", Inferior: "bg-lime-200", Core: "bg-cyan-200",
    Cardio: "bg-fuchsia-200", Reabilitação: "bg-rose-200", Outros: "bg-slate-200",
  }; // <<<< Ponto e vírgula aqui

  // Linha ~145 (aproximadamente)
  const badgeGrupo = grupoMuscular ? (
    <span className={`text-xs font-medium px-2 py-0.5 rounded ${corGrupo[grupoMuscular] || "bg-muted"}`}>
      {grupoMuscular}
    </span>
  ) : null; // <<<< Ponto e vírgula aqui

  // Linha ~146 (aproximadamente)
  const badgeCategoria = categoria ? (
    <span className={`text-xs font-medium px-2 py-0.5 rounded ${corCategoria[categoria] || "bg-muted"}`}>
      {categoria}
    </span>
  ) : null; // <<<< Ponto e vírgula aqui

  const isLoading = createExerciseMutation.isPending;

  // Início do JSX retornado pelo componente
  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>
          <Plus className="w-4 h-4 mr-2" />
          Criar Exercício
        </Button>
      </DialogTrigger>

      <DialogContent className="max-w-lg overflow-y-auto max-h-[80vh]">
        <DialogHeader>
          <DialogTitle>Novo Exercício</DialogTitle>
          <DialogDescription>
            Preencha os campos abaixo para adicionar um novo exercício personalizado.
          </DialogDescription>
        </DialogHeader>

        <div className="flex gap-2 mb-2 flex-wrap">
          {badgeGrupo}
          {badgeCategoria}
        </div>

        {/* Campos do formulário */}
        <div className="flex flex-col gap-4">
          <div>
            <Label>Nome*</Label>
            <Input
              placeholder="Nome do exercício"
              value={nome}
              onChange={(e) => setNome(e.target.value)}
              disabled={isLoading}
            />
          </div>
          <div>
            <Label>Grupo Muscular</Label>
            <Select onValueChange={setGrupoMuscular} value={grupoMuscular} disabled={isLoading}>
              <SelectTrigger>
                <SelectValue placeholder="Selecione o grupo muscular" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Peitoral">Peitoral</SelectItem>
                <SelectItem value="Costas">Costas</SelectItem>
                <SelectItem value="Pernas">Pernas</SelectItem>
                <SelectItem value="Ombros">Ombros</SelectItem>
                <SelectItem value="Bíceps">Bíceps</SelectItem>
                <SelectItem value="Tríceps">Tríceps</SelectItem>
                <SelectItem value="Abdômen">Abdômen</SelectItem>
                <SelectItem value="Outros">Outros</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label>Tipo</Label>
            <Select onValueChange={setTipo} value={tipo} disabled={isLoading}>
              <SelectTrigger>
                <SelectValue placeholder="Selecione o tipo do exercício" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Musculação">Musculação</SelectItem>
                <SelectItem value="Calistenia">Calistenia</SelectItem>
                <SelectItem value="Funcional">Funcional</SelectItem>
                <SelectItem value="Cardio">Cardio</SelectItem>
                <SelectItem value="Alongamento">Alongamento</SelectItem>
                <SelectItem value="Outros">Outros</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label>Categoria</Label>
            <Select onValueChange={setCategoria} value={categoria} disabled={isLoading}>
              <SelectTrigger>
                <SelectValue placeholder="Selecione a categoria" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Superior">Superior</SelectItem>
                <SelectItem value="Inferior">Inferior</SelectItem>
                <SelectItem value="Core">Core</SelectItem>
                <SelectItem value="Cardio">Cardio</SelectItem>
                <SelectItem value="Reabilitação">Reabilitação</SelectItem>
                <SelectItem value="Outros">Outros</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div>
            <Label>Descrição (opcional)</Label>
            <Textarea
              placeholder="Descrição detalhada do exercício"
              value={descricao}
              onChange={(e) => setDescricao(e.target.value)}
              disabled={isLoading}
            />
          </div>
          <div>
            <Label>URL do Vídeo (opcional)</Label>
            <Input
              placeholder="https://youtube.com/... ou https://drive.google.com/..."
              value={urlVideo}
              onChange={(e) => setUrlVideo(e.target.value)}
              disabled={isLoading}
            />
          </div>
        </div>

        <DialogFooter className="mt-4">
           <Button variant="outline" onClick={() => setOpen(false)} disabled={isLoading}>
                Cancelar
           </Button>
          <Button onClick={handleSubmit} disabled={isLoading || !nome.trim()}>
            {isLoading ? "Salvando..." : "Salvar"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
} // <<<< Certifique-se que esta chave fecha o componente corretamente
==== ./client/src/components/dialogs/FichaViewModal.tsx ====

// client/src/components/dialogs/FichaViewModal.tsx
import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
    CalendarDays, Info, ListChecks, User, Dumbbell, CopyPlus, Edit, 
    CheckCircle, FileText, Archive, Activity, Clock, Hash, AlignLeft 
} from 'lucide-react';

// Importar tipos da estrutura de rotina
import type { 
    RotinaListagemItem, 
    DiaDeTreinoDetalhado, 
    ExercicioEmDiaDeTreinoDetalhado 
} from '@/types/treinoOuRotinaTypes'; // Certifique-se que o caminho está correto

// Interface que o FichaViewModal espera para sua prop 'ficha'.
// Esta interface deve ser compatível com o que a TreinosPage.tsx passa.
export interface FichaTreinoView { 
  _id: string;
  titulo: string;
  descricao?: string | null;
  tipo: "modelo" | "individual";
  alunoId?: { _id: string; nome: string; email?: string; } | string | null; 
  criadorId?: { _id: string; nome: string; email?: string; } | string | null;
  criadoEm?: string;
  atualizadoEm?: string;
  statusModelo?: "ativo" | "rascunho" | "arquivado" | null; // Nome consistente
  tipoOrganizacaoRotina?: RotinaListagemItem['tipoOrganizacaoRotina']; // Campo da Rotina
  diasDeTreino?: DiaDeTreinoDetalhado[]; // Campo da Rotina
  
  // Campo 'exercicios' legado - usado como fallback se diasDeTreino não estiver presente
  exercicios?: ExercicioEmDiaDeTreinoDetalhado[]; 
}

interface FichaViewModalProps {
  isOpen: boolean;
  onClose: () => void;
  ficha: FichaTreinoView | null; 
  onUseOuCopiarFicha?: (fichaId: string, fichaTitulo: string, tipoFichaOriginal: "modelo" | "individual") => void;
  onEditFicha?: (fichaRecebida: FichaTreinoView) => void;
}

const TIPOS_ORGANIZACAO_ROTINA_BACKEND_VIEW = ['diasDaSemana', 'numerico', 'livre'] as const;
const OPCOES_TIPO_DOS_TREINOS_VIEW: { value: typeof TIPOS_ORGANIZACAO_ROTINA_BACKEND_VIEW[number]; label: string }[] = [ 
    { value: 'diasDaSemana', label: 'Dia da Semana' }, 
    { value: 'numerico', label: 'Numérico' }, 
    { value: 'livre', label: 'Livre' } 
];

const FichaViewModal: React.FC<FichaViewModalProps> = ({
  isOpen,
  onClose,
  ficha: rotina, // Usando 'rotina' internamente para clareza, como no seu arquivo original
  onUseOuCopiarFicha,
  onEditFicha,
}) => {
  
  // console.log("[FichaViewModal] Props recebidas, rotina (ficha):", rotina ? JSON.parse(JSON.stringify(rotina)) : null);

  if (!isOpen || !rotina) {
    return null;
  }

  const getNomeExercicio = (ex: ExercicioEmDiaDeTreinoDetalhado): string => {
    if (typeof ex.exercicioId === 'object' && ex.exercicioId && ex.exercicioId.nome) { return ex.exercicioId.nome; }
    if (typeof ex.exercicioId === 'string') { return `Exercício (ID: ${ex.exercicioId.substring(0, 6)}...)`; }
    return 'Exercício Desconhecido';
  };

  const getGrupoMuscularExercicio = (ex: ExercicioEmDiaDeTreinoDetalhado): string | undefined => {
    if (typeof ex.exercicioId === 'object' && ex.exercicioId && ex.exercicioId.grupoMuscular) { return ex.exercicioId.grupoMuscular; }
    return undefined;
  };

  const formatDate = (dateString?: string): string => { if (!dateString) return 'Não informada'; try { return new Date(dateString).toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric', timeZone: 'UTC' }); } catch (e) { return dateString; } };
  const nomeAlunoExibicao = typeof rotina.alunoId === 'object' && rotina.alunoId?.nome ? rotina.alunoId.nome : rotina.tipo === 'individual' && typeof rotina.alunoId === 'string' ? `Aluno (ID: ${rotina.alunoId.substring(0,4)}...)` : rotina.tipo === 'individual' ? 'Aluno (Vazio)' : 'Não aplicável';
  const tituloModal = rotina.titulo.replace(/\s\(Aluno:.*?\)/, '');
  const handleUseOuCopiarClick = () => { if (onUseOuCopiarFicha) { onUseOuCopiarFicha(rotina._id, rotina.titulo, rotina.tipo); } };
  const handleEditFichaClick = () => { if (onEditFicha) { onEditFicha(rotina); } };
  const useCopyButtonText = rotina.tipo === 'modelo' ? "Usar este Modelo" : "Copiar para Aluno";
  
  const getStatusBadgeVisual = (statusParam?: FichaTreinoView['statusModelo']) => { // Renomeado param para evitar conflito
    if (!statusParam) return null; 
    let icon = null; let colorClasses = ""; let text = ""; 
    switch (statusParam) { 
        case "ativo": icon = <CheckCircle className="w-3.5 h-3.5 mr-1.5" />; colorClasses = "bg-green-100 text-green-800 dark:bg-green-800/30 dark:text-green-300 border-green-300 dark:border-green-700"; text = "Ativo"; break; 
        case "rascunho": icon = <FileText className="w-3.5 h-3.5 mr-1.5" />; colorClasses = "bg-yellow-100 text-yellow-800 dark:bg-yellow-800/30 dark:text-yellow-300 border-yellow-300 dark:border-yellow-700"; text = "Rascunho"; break; 
        case "arquivado": icon = <Archive className="w-3.5 h-3.5 mr-1.5" />; colorClasses = "bg-gray-100 text-gray-700 dark:bg-gray-700/30 dark:text-gray-400 border-gray-300 dark:border-gray-600"; text = "Arquivado"; break; 
        default: return <Badge variant="outline" className="text-sm px-2 py-1">{String(statusParam)}</Badge>; 
    } 
    return (<Badge variant="outline" className={`text-sm px-2 py-1 ${colorClasses} inline-flex items-center`}>{icon}{text}</Badge>); 
  };

  const getTipoOrganizacaoLabel = (tipo?: FichaTreinoView['tipoOrganizacaoRotina']): string => { if (!tipo) return 'Não especificado'; const opcao = OPCOES_TIPO_DOS_TREINOS_VIEW.find(op => op.value === tipo); return opcao ? opcao.label.split('(')[0].trim() : tipo; };

  const hasDiasDeTreinoConfigurados = rotina.diasDeTreino && rotina.diasDeTreino.length > 0;
  // console.log("[FichaViewModal] hasDiasDeTreinoConfigurados:", hasDiasDeTreinoConfigurados);
  // if (hasDiasDeTreinoConfigurados && rotina.diasDeTreino) { console.log("[FichaViewModal] rotina.diasDeTreino:", JSON.parse(JSON.stringify(rotina.diasDeTreino))); } 
  // else { console.log("[FichaViewModal] rotina.diasDeTreino NÃO existe ou está vazio. Verificando rotina.exercicios (legado):", rotina.exercicios); }

  return (
    <Dialog open={isOpen} onOpenChange={(openState) => !openState && onClose()}>
      <DialogContent className="sm:max-w-2xl w-[95vw] h-[90vh] max-h-[90vh] flex flex-col p-0">
        <DialogHeader className="p-6 pb-4 border-b shrink-0">
          <DialogTitle className="text-2xl font-semibold text-primary flex items-center"> <ListChecks className="w-7 h-7 mr-3 text-primary" /> Detalhes da Rotina: {tituloModal} {rotina.tipo === 'individual' && nomeAlunoExibicao !== 'Não especificado' && nomeAlunoExibicao !== 'Aluno (Vazio)' && ( <span className="text-lg text-muted-foreground ml-2">(Aluno: {nomeAlunoExibicao})</span> )} </DialogTitle>
          {rotina.descricao && ( <DialogDescription className="pt-1">{rotina.descricao}</DialogDescription> )}
        </DialogHeader>

        <ScrollArea className="flex-grow py-4 px-6">
          <div className="space-y-6">
            <div className="space-y-3 p-4 border rounded-lg bg-muted/30 dark:bg-muted/10">
              <div className="flex items-center text-sm"> <Info className="w-5 h-5 mr-2 text-muted-foreground" /> <span className="font-medium mr-2 text-gray-700 dark:text-gray-300">Tipo:</span> <Badge variant={rotina.tipo === 'modelo' ? 'secondary' : 'default'}> {rotina.tipo === 'modelo' ? 'Modelo de Treino' : 'Treino Individual'} </Badge> </div>
              {rotina.tipoOrganizacaoRotina && ( <div className="flex items-center text-sm"> {rotina.tipoOrganizacaoRotina === 'diasDaSemana' ? <CalendarDays className="w-5 h-5 mr-2 text-muted-foreground" /> : rotina.tipoOrganizacaoRotina === 'numerico' ? <Hash className="w-5 h-5 mr-2 text-muted-foreground" /> : <AlignLeft className="w-5 h-5 mr-2 text-muted-foreground" /> } <span className="font-medium mr-2 text-gray-700 dark:text-gray-300">Organização:</span> <span className="text-gray-600 dark:text-gray-400">{getTipoOrganizacaoLabel(rotina.tipoOrganizacaoRotina)}</span> </div> )}
              {rotina.tipo === 'modelo' && rotina.statusModelo && ( <div className="flex items-center text-sm"> <Activity className="w-5 h-5 mr-2 text-muted-foreground" /> <span className="font-medium mr-2 text-gray-700 dark:text-gray-300">Status:</span> {getStatusBadgeVisual(rotina.statusModelo)} </div> )}
              {rotina.tipo === 'individual' && rotina.alunoId && ( <div className="flex items-center text-sm"> <User className="w-5 h-5 mr-2 text-muted-foreground" /> <span className="font-medium mr-2 text-gray-700 dark:text-gray-300">Aluno:</span> <span className="text-gray-600 dark:text-gray-400">{nomeAlunoExibicao}</span> </div> )}
              {rotina.criadoEm && ( <div className="flex items-center text-sm"> <Clock className="w-5 h-5 mr-2 text-muted-foreground" /> <span className="font-medium mr-2 text-gray-700 dark:text-gray-300">Criação:</span> <span className="text-gray-600 dark:text-gray-400">{formatDate(rotina.criadoEm)}</span> </div> )}
              {rotina.atualizadoEm && rotina.atualizadoEm !== rotina.criadoEm && ( <div className="flex items-center text-sm"> <Clock className="w-5 h-5 mr-2 text-muted-foreground" /> <span className="font-medium mr-2 text-gray-700 dark:text-gray-300">Atualização:</span> <span className="text-gray-600 dark:text-gray-400">{formatDate(rotina.atualizadoEm)}</span> </div> )}
            </div>

            <div>
              <h3 className="text-lg font-semibold mb-3 text-gray-800 dark:text-gray-200 flex items-center"> <Dumbbell className="w-5 h-5 mr-2 text-gray-700 dark:text-gray-300" /> Programação dos Treinos </h3>
              {/* console.log("[FichaViewModal] JSX - Verificando hasDiasDeTreinoConfigurados:", hasDiasDeTreinoConfigurados) */}
              
              {hasDiasDeTreinoConfigurados && rotina.diasDeTreino ? (
                <Accordion type="multiple" className="w-full space-y-3" defaultValue={(rotina.diasDeTreino || []).map((d,i) => d._id || `dia-view-key-${i}` )}>
                  {(rotina.diasDeTreino)
                    .sort((a, b) => a.ordemNaRotina - b.ordemNaRotina)
                    .map((dia, diaIndex) => {
                      // console.log(`[FichaViewModal] Renderizando Dia: ${dia.identificadorDia}`, dia);
                      return (
                        <AccordionItem key={dia._id || `dia-view-${diaIndex}`} value={dia._id || `dia-view-key-${diaIndex}`} className="border rounded-lg bg-card dark:bg-gray-800 shadow-sm" >
                          <AccordionTrigger className="px-4 py-3 hover:no-underline text-base hover:bg-muted/50 dark:hover:bg-gray-700/50 rounded-t-lg">
                            <div className="flex-1 text-left"> <span className="font-semibold text-primary">{dia.identificadorDia}</span> {dia.nomeSubFicha && <span className="ml-2 text-sm text-muted-foreground">- {dia.nomeSubFicha}</span>} </div>
                          </AccordionTrigger>
                          <AccordionContent className="px-4 pt-3 pb-4 border-t dark:border-gray-700">
                            {dia.exerciciosDoDia && dia.exerciciosDoDia.length > 0 ? (
                              <div className="space-y-2">
                                {dia.exerciciosDoDia
                                  .sort((a,b) => a.ordemNoDia - b.ordemNoDia)
                                  .map((ex, exIndex) => {
                                    // CORREÇÃO DA KEY DO EXERCÍCIO:
                                    const exercicioKey = ex._id || (typeof ex.exercicioId === 'object' ? ex.exercicioId._id : ex.exercicioId) || `ex-view-${diaIndex}-${exIndex}`;
                                    return (
                                      <div key={exercicioKey} className="p-3 border rounded-md bg-slate-50 dark:bg-slate-700/60 shadow-sm">
                                        <p className="font-medium text-sm text-slate-800 dark:text-slate-100">{getNomeExercicio(ex)}</p>
                                        {getGrupoMuscularExercicio(ex) && ( <Badge variant="outline" className="mt-1 mb-1.5 text-xs border-sky-300 text-sky-700 bg-sky-50 dark:border-sky-700 dark:text-sky-300 dark:bg-sky-900/30">{getGrupoMuscularExercicio(ex)}</Badge> )}
                                        <div className="grid grid-cols-2 gap-x-3 gap-y-1 mt-1.5 text-xs text-muted-foreground dark:text-slate-400">
                                          {ex.series && <div><strong>Séries:</strong> {ex.series}</div>}
                                          {ex.repeticoes && <div><strong>Reps:</strong> {ex.repeticoes}</div>}
                                          {ex.carga && <div><strong>Carga:</strong> {ex.carga}</div>}
                                          {ex.descanso && <div><strong>Desc:</strong> {ex.descanso}</div>}
                                        </div>
                                        {ex.observacoes && <p className="mt-1.5 pt-1.5 border-t border-slate-200 dark:border-slate-600 text-xs text-muted-foreground dark:text-slate-400"><strong>Obs:</strong> {ex.observacoes}</p>}
                                        {!ex.series && !ex.repeticoes && !ex.carga && !ex.descanso && !ex.observacoes && (<p className="italic text-xs mt-1">Sem detalhes adicionais.</p>)}
                                      </div>
                                    );
                                  })}
                              </div>
                            ) : ( <p className="text-sm text-muted-foreground text-center py-4 italic"> Nenhum exercício cadastrado para este dia. </p> )}
                          </AccordionContent>
                        </AccordionItem>
                      );
                    })}
                </Accordion>
              ) : rotina.exercicios && rotina.exercicios.length > 0 ? ( // Fallback para estrutura antiga de 'exercicios' planos
                <Accordion type="multiple" className="w-full space-y-2">
                    {(rotina.exercicios) 
                    .sort((a, b) => (a.ordemNoDia ?? Infinity) - (b.ordemNoDia ?? Infinity))
                    .map((ex, index) => {
                       // CORREÇÃO DA KEY DO EXERCÍCIO (Fallback):
                       const exercicioKeyFallback = ex._id || (typeof ex.exercicioId === 'object' && ex.exercicioId?._id) || (typeof ex.exercicioId === 'string' ? ex.exercicioId : `ex-view-flat-${index}`);
                       return (
                        <AccordionItem
                          key={exercicioKeyFallback}
                          value={`item-view-flat-${index}`} // Value para AccordionItem pode ser diferente da key
                          className="border rounded-md bg-background dark:bg-gray-800 shadow-sm"
                        >
                          <AccordionTrigger className="px-4 py-3 hover:no-underline text-sm hover:bg-muted/50 dark:hover:bg-gray-700/50 rounded-t-md">
                              <div className="flex-1 text-left">
                              <span className="font-medium text-gray-800 dark:text-gray-100">{getNomeExercicio(ex)}</span>
                              {(ex.series || ex.repeticoes) && ( <span className="ml-2 text-xs text-blue-600 dark:text-blue-400">({ex.series || 'Série?'}x{ex.repeticoes || 'Rep?'})</span> )}
                              {getGrupoMuscularExercicio(ex) && ( <Badge variant="outline" className="ml-2 text-xs border-sky-300 text-sky-700 bg-sky-50 dark:border-sky-700 dark:text-sky-300 dark:bg-sky-900/30">{getGrupoMuscularExercicio(ex)}</Badge> )}
                              </div>
                          </AccordionTrigger>
                          <AccordionContent className="px-4 pt-0 pb-4">
                              <div className="pt-3 border-t dark:border-gray-700 space-y-1.5 text-xs text-muted-foreground dark:text-gray-400">
                              {ex.series && <p><strong>Séries:</strong> {ex.series}</p>}
                              {ex.repeticoes && <p><strong>Repetições:</strong> {ex.repeticoes}</p>}
                              {ex.carga && <p><strong>Carga:</strong> {ex.carga}</p>}
                              {ex.descanso && <p><strong>Descanso:</strong> {ex.descanso}</p>}
                              {ex.observacoes && <p className="mt-1 pt-1 border-t dark:border-gray-700"><strong>Obs:</strong> {ex.observacoes}</p>}
                              {!ex.series && !ex.repeticoes && !ex.carga && !ex.descanso && !ex.observacoes && (<p className="italic">Nenhum detalhe.</p>)}
                              </div>
                          </AccordionContent>
                        </AccordionItem>
                       );
                    })}
                </Accordion>
              ) : ( <p className="text-sm text-muted-foreground text-center py-6"> Nenhum dia de treino ou exercício configurado para esta rotina. </p> )}
            </div>
          </div>
        </ScrollArea>

        <DialogFooter className="p-6 pt-4 border-t flex flex-col sm:flex-row sm:justify-between items-center shrink-0">
            <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
                {onUseOuCopiarFicha && ( <Button onClick={handleUseOuCopiarClick} className="bg-green-600 hover:bg-green-700 text-white order-1 sm:order-none mt-2 sm:mt-0 w-full sm:w-auto"> <CopyPlus className="w-4 h-4 mr-2" /> {useCopyButtonText} </Button> )}
                {onEditFicha && ( <Button variant="default" onClick={handleEditFichaClick} className="order-2 sm:order-none w-full sm:w-auto mt-2 sm:mt-0"> <Edit className="w-4 h-4 mr-2" /> Editar {rotina.tipo === 'modelo' ? 'Rotina' : 'Ficha'} </Button> )}
            </div>
            <Button variant="outline" onClick={onClose} className="order-last sm:order-none w-full sm:w-auto mt-2 sm:mt-0 ml-auto"> Fechar </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default FichaViewModal;
==== ./client/src/components/dialogs/PastaFormModal.tsx ====

// client/src/components/dialogs/PastaFormModal.tsx
// NOVO ARQUIVO

import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

// Interface para os dados da pasta que o modal manipula
export interface PastaFormData {
  nome: string;
}

// Interface para os dados de uma pasta existente (para edição)
export interface PastaExistente extends PastaFormData {
  _id: string;
}

interface PastaFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (data: PastaFormData, pastaId?: string) => Promise<void>; // Retorna Promise para lidar com async
  initialData?: PastaExistente | null; // Para edição
  isLoading?: boolean; // Para controlar o estado de carregamento externo, se necessário
}

const PastaFormModal: React.FC<PastaFormModalProps> = ({
  isOpen,
  onClose,
  onSave,
  initialData,
  isLoading: isLoadingProp = false, // Default para false
}) => {
  const [nomePasta, setNomePasta] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const isEditing = !!initialData;

  useEffect(() => {
    if (isOpen) {
      if (isEditing && initialData) {
        setNomePasta(initialData.nome);
      } else {
        setNomePasta(''); // Limpa para nova pasta
      }
    }
  }, [isOpen, isEditing, initialData]);

  const handleSubmit = async () => {
    if (!nomePasta.trim()) {
      toast({
        variant: "destructive",
        title: "Erro de Validação",
        description: "O nome da pasta não pode ficar em branco.",
      });
      return;
    }

    setIsSubmitting(true);
    try {
      await onSave({ nome: nomePasta.trim() }, initialData?._id);
      // onClose e toast de sucesso são geralmente chamados pela função onSave na página pai
    } catch (error: any) {
      // O toast de erro também é geralmente tratado na página pai,
      // mas podemos adicionar um genérico aqui se onSave não tratar.
      console.error("Erro ao salvar pasta:", error);
      toast({
        variant: "destructive",
        title: "Erro",
        description: `Não foi possível ${isEditing ? 'atualizar' : 'criar'} a pasta.`,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen) {
    return null;
  }

  const modalTitle = isEditing ? "Editar Pasta de Treinos" : "Nova Pasta de Treinos";
  const modalDescription = isEditing
    ? "Altere o nome da sua pasta de fichas modelo."
    : "Crie uma nova pasta para organizar suas fichas de treino modelo.";
  const buttonText = isEditing ? "Salvar Alterações" : "Criar Pasta";
  const loadingButtonText = isEditing ? "Salvando..." : "Criando...";

  const actualLoading = isLoadingProp || isSubmitting;

  return (
    <Dialog open={isOpen} onOpenChange={(openStatus) => !openStatus && onClose()}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>{modalTitle}</DialogTitle>
          <DialogDescription>{modalDescription}</DialogDescription>
        </DialogHeader>
        <div className="py-4 space-y-2">
          <Label htmlFor="nome-pasta">Nome da Pasta*</Label>
          <Input
            id="nome-pasta"
            value={nomePasta}
            onChange={(e) => setNomePasta(e.target.value)}
            placeholder="Ex: Treinos de Força, Membros Superiores"
            disabled={actualLoading}
          />
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={onClose} disabled={actualLoading}>
            Cancelar
          </Button>
          <Button onClick={handleSubmit} disabled={actualLoading || !nomePasta.trim()}>
            {actualLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {actualLoading ? loadingButtonText : buttonText}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default PastaFormModal;

==== ./client/src/components/dialogs/RotinaFormModal.tsx ====

// client/src/components/dialogs/RotinaFormModal.tsx
import React, { useEffect, useState, useMemo, useCallback } from 'react'; // Adicionado useCallback
import {
  Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription, DialogClose,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import {
  Select, SelectContent, SelectItem, SelectTrigger, SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from '@/lib/queryClient';
import { useMutation, useQuery, useQueryClient, QueryKey } from "@tanstack/react-query";
import { Loader2, CalendarIcon, Folder as FolderIcon, Activity, PlusCircle, Trash2, GripVertical, Edit, ListPlus, XCircle, Search } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Aluno } from '@/types/aluno';

import type { RotinaListagemItem, DiaDeTreinoDetalhado, ExercicioEmDiaDeTreinoDetalhado as ExercicioDetalhadoAPIType } from '@/types/treinoOuRotinaTypes';
import SelectExerciseModal, { BibliotecaExercicio } from './SelectExerciseModal';

import { format, parseISO, isValid as isDateValid, startOfToday } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import * as z from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from "@/components/ui/form";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";

const TIPOS_ORGANIZACAO_ROTINA_BACKEND = ['diasDaSemana', 'numerico', 'livre'] as const;
type TipoOrganizacaoRotinaBackend = typeof TIPOS_ORGANIZACAO_ROTINA_BACKEND[number];

const OPCOES_TIPO_DOS_TREINOS: { value: TipoOrganizacaoRotinaBackend; label: string }[] = [
    { value: 'diasDaSemana', label: 'Dia da Semana (Ex: Segunda, Terça...)' },
    { value: 'numerico', label: 'Numérico (Ex: Treino 1, Treino 2...)' },
    { value: 'livre', label: 'Livre (Nomes personalizados)' }
];

const diasDaSemanaOptions = [
    { value: "Segunda-feira", label: "Segunda-feira" }, { value: "Terça-feira", label: "Terça-feira" },
    { value: "Quarta-feira", label: "Quarta-feira" }, { value: "Quinta-feira", label: "Quinta-feira" },
    { value: "Sexta-feira", label: "Sexta-feira" }, { value: "Sábado", label: "Sábado" }, { value: "Domingo", label: "Domingo" },
];

const diaDeTreinoFormSchema = z.object({
    identificadorDia: z.string().min(1, "Identificador do dia é obrigatório.").max(50),
    nomeSubFicha: z.string().max(100).optional().nullable(),
});
type DiaDeTreinoFormValues = z.infer<typeof diaDeTreinoFormSchema>;

interface ExercicioNoDiaState {
  tempIdExercicio: string;
  exercicioId: string;
  nomeExercicio: string;
  grupoMuscular?: string;
  categoria?: string;
  series?: string;
  repeticoes?: string;
  carga?: string;
  descanso?: string;
  observacoes?: string;
  ordemNoDia: number;
  _idSubDocExercicio?: string; // Para manter o ID do subdocumento ao editar
}

interface DiaDeTreinoStateItem extends DiaDeTreinoFormValues {
    tempId: string;
    ordemNaRotina: number;
    exerciciosDoDia: ExercicioNoDiaState[];
    _id?: string; // Para manter o ID do subdocumento ao editar
}

const rotinaMetadataSchema = z.object({
  titulo: z.string().min(1, { message: "Título da rotina é obrigatório." }).max(100),
  descricao: z.string().max(500).optional().nullable(),
  tipo: z.enum(["modelo", "individual"]),
  tipoOrganizacaoRotina: z.enum(TIPOS_ORGANIZACAO_ROTINA_BACKEND, { errorMap: () => ({ message: "Selecione como os treinos são divididos." }) }).default('numerico'),
  alunoId: z.string().optional().nullable(), 
  pastaId: z.string().nullable().optional(),
  statusModelo: z.enum(["ativo", "rascunho", "arquivado"]).optional().nullable(),
  dataValidade: z.date().optional().nullable(), 
  totalSessoesRotinaPlanejadas: z.preprocess( (val) => (String(val ?? '').trim() === "" ? null : Number(String(val ?? '').trim())), z.number().int().min(0, "Deve ser 0 ou maior.").nullable().optional() ),
}).refine(data => !(data.tipo === 'individual' && (!data.alunoId || data.alunoId.trim() === '')), { message: "Aluno é obrigatório para rotinas individuais.", path: ["alunoId"] }).refine(data => !(data.tipo === 'modelo' && !data.statusModelo), { message: "Status é obrigatório para rotinas modelo.", path: ["statusModelo"] });

type RotinaMetadataFormValues = z.infer<typeof rotinaMetadataSchema>;

export interface RotinaParaEditar {
  _id?: string;
  titulo?: string;
  descricao?: string | null;
  tipo?: "modelo" | "individual";
  tipoOrganizacaoRotina?: TipoOrganizacaoRotinaBackend;
  alunoId?: string | { _id: string; nome: string; } | null;
  pastaId?: string | { _id: string; nome: string; } | null;
  statusModelo?: "ativo" | "rascunho" | "arquivado" | null;
  dataValidade?: string | Date | null;
  totalSessoesRotinaPlanejadas?: number | null;
  diasDeTreino?: DiaDeTreinoDetalhado[];
}

interface Pasta { // Adicionado tipo Pasta se não estiver globalmente disponível
    _id: string;
    nome: string;
}

interface RotinaFormModalProps {
  open: boolean;
  onClose: () => void;
  onSuccess: (rotinaSalva: RotinaListagemItem) => void;
  alunos: Aluno[];
  rotinaParaEditar?: RotinaParaEditar | null;
  alunoId?: string; // Adicionado para pré-selecionar aluno ao criar do contexto do aluno
}

const TREINOS_QUERY_KEY: QueryKey = ["/api/treinos"];

export default function RotinaFormModal({
  open, onClose, onSuccess, alunos: alunosProp, rotinaParaEditar, alunoId: alunoIdProp,
}: RotinaFormModalProps) {
  const { toast } = useToast();
  const queryClientHook = useQueryClient();
  const isEditing = !!rotinaParaEditar?._id;

  console.log(`[RotinaFormModal] Inicializado. isEditing: ${isEditing}, rotinaParaEditar:`, rotinaParaEditar ? JSON.parse(JSON.stringify(rotinaParaEditar)) : null);


  const [diasDeTreinoState, setDiasDeTreinoState] = useState<DiaDeTreinoStateItem[]>([]);
  const [showDiaForm, setShowDiaForm] = useState(false);
  const [diaFormValues, setDiaFormValues] = useState<DiaDeTreinoFormValues>({ identificadorDia: '', nomeSubFicha: '' });
  const [editingDiaTempId, setEditingDiaTempId] = useState<string | null>(null);

  const [isSelectExerciseModalOpen, setIsSelectExerciseModalOpen] = useState(false);
  const [diaAtivoParaAdicionarExercicio, setDiaAtivoParaAdicionarExercicio] = useState<string | null>(null);

  const form = useForm<RotinaMetadataFormValues>({
    resolver: zodResolver(rotinaMetadataSchema),
    defaultValues: {
      titulo: "", descricao: null, tipo: alunoIdProp ? "individual" : "modelo", tipoOrganizacaoRotina: "numerico",
      alunoId: alunoIdProp || null, pastaId: null, statusModelo: alunoIdProp ? null : "rascunho",
      dataValidade: null, totalSessoesRotinaPlanejadas: null,
    },
  });

  const watchedTipoOrganizacao = form.watch('tipoOrganizacaoRotina');
  const watchedTipoRotina = form.watch('tipo');

  useEffect(() => { if (showDiaForm) { setDiaFormValues(prev => ({ ...prev, identificadorDia: '' })); } }, [watchedTipoOrganizacao, showDiaForm]);

  const { data: pastas = [], isLoading: isLoadingPastas } = useQuery<Pasta[], Error>({ queryKey: ["pastasParaRotinaForm", watchedTipoRotina], queryFn: () => apiRequest<Pasta[]>("GET", "/api/pastas/treinos"), enabled: open && watchedTipoRotina === "modelo", });
  const { data: alunosFetched = [], isLoading: isLoadingAlunos } = useQuery<Aluno[], Error>({ queryKey: ["alunosParaRotinaForm", watchedTipoRotina], queryFn: async () => apiRequest<Aluno[]>("GET", "/api/alunos").then(data => Array.isArray(data) ? data : []), enabled: open && watchedTipoRotina === 'individual', initialData: watchedTipoRotina === 'individual' ? alunosProp : undefined, });
  const alunosDisponiveis = watchedTipoRotina === 'individual' ? (alunosFetched.length > 0 ? alunosFetched : alunosProp) : alunosProp;

  useEffect(() => {
    console.log(`[RotinaFormModal] useEffect principal disparado. open: ${open}, isEditing: ${isEditing}`);
    if (open) {
      if (isEditing && rotinaParaEditar) {
        console.log("[RotinaFormModal] Modo Edição. RotinaParaEditar:", JSON.parse(JSON.stringify(rotinaParaEditar)));
        let dataValidadeDate: Date | null = null;
        if (rotinaParaEditar.dataValidade) {
            if (typeof rotinaParaEditar.dataValidade === 'string') { const parsed = parseISO(rotinaParaEditar.dataValidade); if (isDateValid(parsed)) dataValidadeDate = parsed; }
            else if (rotinaParaEditar.dataValidade instanceof Date && isDateValid(rotinaParaEditar.dataValidade)) { dataValidadeDate = rotinaParaEditar.dataValidade; }
        }
        form.reset({
          titulo: rotinaParaEditar.titulo || "", descricao: rotinaParaEditar.descricao || null, tipo: rotinaParaEditar.tipo || (alunoIdProp ? "individual" : "modelo"),
          tipoOrganizacaoRotina: rotinaParaEditar.tipoOrganizacaoRotina || "numerico",
          alunoId: typeof rotinaParaEditar.alunoId === 'object' && rotinaParaEditar.alunoId ? rotinaParaEditar.alunoId._id : (rotinaParaEditar.alunoId as string | null) || alunoIdProp || null,
          pastaId: typeof rotinaParaEditar.pastaId === 'object' && rotinaParaEditar.pastaId ? rotinaParaEditar.pastaId._id : (rotinaParaEditar.pastaId as string | null),
          statusModelo: rotinaParaEditar.statusModelo || (rotinaParaEditar.tipo === 'modelo' ? "rascunho" : null),
          dataValidade: dataValidadeDate, totalSessoesRotinaPlanejadas: rotinaParaEditar.totalSessoesRotinaPlanejadas ?? null,
        });

        console.log("[RotinaFormModal] Dias de treino da rotinaParaEditar:", rotinaParaEditar.diasDeTreino ? JSON.parse(JSON.stringify(rotinaParaEditar.diasDeTreino)) : 'undefined');

        const diasEdit = (rotinaParaEditar.diasDeTreino || []).map((diaApi, index) => {
            const exerciciosFormatados: ExercicioNoDiaState[] = (diaApi.exerciciosDoDia || []).map((exApi: ExercicioDetalhadoAPIType, exIndex) => ({
                tempIdExercicio: exApi._id || `edit-ex-${index}-${exIndex}-${Date.now()}`,
                exercicioId: typeof exApi.exercicioId === 'string' ? exApi.exercicioId : exApi.exercicioId._id,
                nomeExercicio: typeof exApi.exercicioId === 'string' ? 'Exercício Inválido/Removido' : exApi.exercicioId.nome,
                grupoMuscular: typeof exApi.exercicioId === 'object' ? exApi.exercicioId.grupoMuscular : undefined,
                categoria: typeof exApi.exercicioId === 'object' ? exApi.exercicioId.categoria : undefined,
                series: exApi.series, repeticoes: exApi.repeticoes, carga: exApi.carga,
                descanso: exApi.descanso, observacoes: exApi.observacoes,
                ordemNoDia: exApi.ordemNoDia ?? exIndex, _idSubDocExercicio: exApi._id,
            }));
            return { _id: diaApi._id, identificadorDia: diaApi.identificadorDia, nomeSubFicha: diaApi.nomeSubFicha || null, tempId: diaApi._id || `edit-dia-${index}-${Date.now()}`, ordemNaRotina: diaApi.ordemNaRotina ?? index, exerciciosDoDia: exerciciosFormatados };
        });
        console.log("[RotinaFormModal] diasEdit (estado interno antes de set):", JSON.parse(JSON.stringify(diasEdit)));
        setDiasDeTreinoState(diasEdit);
      } else {
        console.log("[RotinaFormModal] Modo Criação.");
        form.reset({ 
            titulo: "", descricao: null, 
            tipo: alunoIdProp ? "individual" : "modelo", 
            tipoOrganizacaoRotina: "numerico", 
            alunoId: alunoIdProp || null, 
            pastaId: null, 
            statusModelo: alunoIdProp ? null : "rascunho", 
            dataValidade: null, 
            totalSessoesRotinaPlanejadas: null, 
        });
        setDiasDeTreinoState([]);
      }
      setShowDiaForm(false); setDiaFormValues({ identificadorDia: '', nomeSubFicha: '' }); setEditingDiaTempId(null);
      setIsSelectExerciseModalOpen(false); setDiaAtivoParaAdicionarExercicio(null);
    }
  }, [open, isEditing, rotinaParaEditar, form, alunoIdProp]); // Adicionado alunoIdProp às dependências

  useEffect(() => {
    const currentTipoWatched = form.watch("tipo");
    console.log(`[RotinaFormModal] Tipo de rotina alterado para: ${currentTipoWatched}`);
    if (currentTipoWatched === 'modelo') {
        form.setValue('alunoId', null); form.setValue('dataValidade', null); form.setValue('totalSessoesRotinaPlanejadas', null);
        if (!form.getValues('statusModelo') && (!isEditing || (rotinaParaEditar && rotinaParaEditar.tipo !== 'modelo'))) {
            form.setValue('statusModelo', 'rascunho');
        }
    } else if (currentTipoWatched === 'individual') {
        form.setValue('pastaId', null); form.setValue('statusModelo', null);
        if (alunoIdProp && !form.getValues('alunoId')) { // Se estiver no contexto de um aluno, pré-seleciona
            form.setValue('alunoId', alunoIdProp);
        }
    }
    if (!form.getValues('tipoOrganizacaoRotina')) {
        form.setValue('tipoOrganizacaoRotina', 'numerico');
    }
  }, [form.watch("tipo"), form, isEditing, rotinaParaEditar, alunoIdProp]); // Adicionado alunoIdProp

  const handleDiaInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => { const { name, value } = e.target; setDiaFormValues(prev => ({ ...prev, [name]: value })); };

  const handleAddOrUpdateDia = () => {
    if (!diaFormValues.identificadorDia || !diaFormValues.identificadorDia.trim()) {
        toast({ title: "Erro", description: "O identificador do dia é obrigatório.", variant: "destructive" }); return;
    }
    if (form.getValues('tipoOrganizacaoRotina') === 'diasDaSemana' && !editingDiaTempId) {
        const diaJaExiste = diasDeTreinoState.some(dia => dia.identificadorDia.toLowerCase() === diaFormValues.identificadorDia.toLowerCase());
        if (diaJaExiste) {
            toast({ title: "Erro", description: `O dia "${diaFormValues.identificadorDia}" já foi adicionado.`, variant: "destructive" });
            return;
        }
    }
    setDiasDeTreinoState(prevDias => {
        const newOrUpdatedDias = [...prevDias];
        if (editingDiaTempId) {
            const index = newOrUpdatedDias.findIndex(d => d.tempId === editingDiaTempId);
            if (index > -1) { newOrUpdatedDias[index] = { ...newOrUpdatedDias[index], identificadorDia: diaFormValues.identificadorDia, nomeSubFicha: diaFormValues.nomeSubFicha || null }; }
        } else {
            newOrUpdatedDias.push({ ...diaFormValues, tempId: `new-dia-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`, ordemNaRotina: newOrUpdatedDias.length, exerciciosDoDia: [] });
        }
        const finalDias = newOrUpdatedDias.map((d, i) => ({ ...d, ordemNaRotina: i }));
        console.log("[RotinaFormModal] Dias de treino atualizados (handleAddOrUpdateDia):", JSON.parse(JSON.stringify(finalDias)));
        return finalDias;
    });
    setShowDiaForm(false); setDiaFormValues({ identificadorDia: '', nomeSubFicha: '' }); setEditingDiaTempId(null);
  };

  const handleEditDia = (dia: DiaDeTreinoStateItem) => { setDiaFormValues({ identificadorDia: dia.identificadorDia, nomeSubFicha: dia.nomeSubFicha || '' }); setEditingDiaTempId(dia.tempId); setShowDiaForm(true); };

  const handleRemoveDia = (tempIdToRemove: string) => {
    setDiasDeTreinoState(prevDias => {
        const finalDias = prevDias.filter(d => d.tempId !== tempIdToRemove).map((d, index) => ({ ...d, ordemNaRotina: index }));
        console.log("[RotinaFormModal] Dias de treino atualizados (handleRemoveDia):", JSON.parse(JSON.stringify(finalDias)));
        return finalDias;
    });
  };

  const handleOpenSelectExerciseModal = (diaTempId: string) => { setDiaAtivoParaAdicionarExercicio(diaTempId); setIsSelectExerciseModalOpen(true); };

  const handleExercisesSelected = useCallback((exerciciosSelecionadosDaLib: BibliotecaExercicio[]) => {
    if (!diaAtivoParaAdicionarExercicio) return;
    setDiasDeTreinoState(prevDias =>
        prevDias.map(dia => {
            if (dia.tempId === diaAtivoParaAdicionarExercicio) {
                const novosExercicios: ExercicioNoDiaState[] = exerciciosSelecionadosDaLib.map((exLib, index) => ({
                    tempIdExercicio: `new-ex-${dia.tempId}-${Date.now()}-${index}`,
                    exercicioId: exLib._id, nomeExercicio: exLib.nome, grupoMuscular: exLib.grupoMuscular,
                    categoria: exLib.categoria, ordemNoDia: dia.exerciciosDoDia.length + index,
                    series: '', repeticoes: '', carga: '', descanso: '', observacoes: '',
                }));
                const diaAtualizado = { ...dia, exerciciosDoDia: [...dia.exerciciosDoDia, ...novosExercicios] };
                console.log(`[RotinaFormModal] Exercícios adicionados ao dia ${dia.identificadorDia}:`, JSON.parse(JSON.stringify(novosExercicios)));
                return diaAtualizado;
            }
            return dia;
        })
    );
    setIsSelectExerciseModalOpen(false); setDiaAtivoParaAdicionarExercicio(null);
  }, [diaAtivoParaAdicionarExercicio]);

  const handleExercicioDetailChange = (
    diaTempId: string,
    exercicioTempId: string,
    fieldName: keyof Omit<ExercicioNoDiaState, 'exercicioId' | 'nomeExercicio' | 'tempIdExercicio' | 'ordemNoDia' | 'grupoMuscular' | 'categoria' | '_idSubDocExercicio'>,
    value: string
  ) => {
    setDiasDeTreinoState(prevDias =>
      prevDias.map(dia => {
        if (dia.tempId === diaTempId) {
          return {
            ...dia,
            exerciciosDoDia: dia.exerciciosDoDia.map(ex => {
              if (ex.tempIdExercicio === exercicioTempId) {
                return { ...ex, [fieldName]: value };
              }
              return ex;
            }),
          };
        }
        return dia;
      })
    );
  };

  const handleRemoveExercicioFromDia = (diaTempId: string, exercicioTempId: string) => {
    setDiasDeTreinoState(prevDias =>
      prevDias.map(dia => {
        if (dia.tempId === diaTempId) {
          return {
            ...dia,
            exerciciosDoDia: dia.exerciciosDoDia
              .filter(ex => ex.tempIdExercicio !== exercicioTempId)
              .map((ex, index) => ({ ...ex, ordemNoDia: index })),
          };
        }
        return dia;
      })
    );
  };

  const mutation = useMutation<RotinaListagemItem, Error, RotinaMetadataFormValues>({
    mutationFn: async (formDataFromHook) => {
      const payload: any = { ...formDataFromHook };
      payload.dataValidade = formDataFromHook.dataValidade ? format(formDataFromHook.dataValidade, "yyyy-MM-dd'T'HH:mm:ss.SSSxxx") : null; // Formato ISO com timezone
      if (formDataFromHook.tipo === 'modelo') { payload.alunoId = undefined; payload.totalSessoesRotinaPlanejadas = undefined; if (!payload.statusModelo) payload.statusModelo = "rascunho"; }
      else { payload.pastaId = undefined; payload.statusModelo = undefined; if (!payload.alunoId) { throw new Error("Aluno é obrigatório para rotinas individuais."); } }

      payload.diasDeTreino = diasDeTreinoState.map(dia => ({
          _id: dia._id, // Envia o _id se estiver editando um dia existente
          identificadorDia: dia.identificadorDia,
          nomeSubFicha: dia.nomeSubFicha || undefined,
          ordemNaRotina: dia.ordemNaRotina,
          exerciciosDoDia: (dia.exerciciosDoDia || []).map(exState => ({
              _id: exState._idSubDocExercicio, // Envia o _id se estiver editando um exercício existente no dia
              exercicioId: exState.exercicioId,
              series: exState.series,
              repeticoes: exState.repeticoes,
              carga: exState.carga,
              descanso: exState.descanso,
              observacoes: exState.observacoes,
              ordemNoDia: exState.ordemNoDia,
          })),
      }));
      const endpoint = isEditing ? `/api/treinos/${rotinaParaEditar?._id}` : "/api/treinos";
      const method = isEditing ? "PUT" : "POST";
      console.log(`[RotinaFormModal] FRONTEND PAYLOAD (${method} ${endpoint}):`, JSON.parse(JSON.stringify(payload)));
      return apiRequest<RotinaListagemItem>(method, endpoint, payload);
    },
    onSuccess: (savedRotina) => {
        toast({ title: "Sucesso!", description: `Rotina "${savedRotina.titulo}" ${isEditing ? 'atualizada' : 'criada'} com sucesso.`});
        queryClientHook.invalidateQueries({ queryKey: TREINOS_QUERY_KEY });
        if (isEditing && rotinaParaEditar?._id) { queryClientHook.invalidateQueries({ queryKey: [`/api/treinos/${rotinaParaEditar._id}`] }); }
        if (form.getValues("tipo") === 'modelo') { queryClientHook.invalidateQueries({ queryKey: ["/api/pastas/treinos"] }); }
        
        const alunoIdAfetado = form.getValues("alunoId") || (typeof rotinaParaEditar?.alunoId === 'object' && rotinaParaEditar.alunoId?._id) || rotinaParaEditar?.alunoId;
        if (alunoIdAfetado && typeof alunoIdAfetado === 'string') {
            queryClientHook.invalidateQueries({ queryKey: ["fichasAluno", alunoIdAfetado] });
        }
        onSuccess(savedRotina);
        onClose();
    },
    onError: (error: Error) => {
        console.error("Erro ao salvar rotina:", error);
        toast({ variant: "destructive", title: `Erro ao ${isEditing ? 'Atualizar' : 'Criar'} Rotina`, description: error.message || "Ocorreu um problema." });
    },
  });

  function onSubmit(data: RotinaMetadataFormValues) { 
    console.log("[RotinaFormModal] onSubmit chamado com data do form:", data);
    console.log("[RotinaFormModal] Estado diasDeTreinoState no momento do submit:", JSON.parse(JSON.stringify(diasDeTreinoState)));
    mutation.mutate(data); 
}
  const diasDaSemanaUtilizados = useMemo(() => { if (watchedTipoOrganizacao === 'diasDaSemana') { return diasDeTreinoState.filter(dia => !editingDiaTempId || dia.tempId !== editingDiaTempId).map(dia => dia.identificadorDia); } return []; }, [diasDeTreinoState, editingDiaTempId, watchedTipoOrganizacao]);

  if (!open) return null;
  console.log("[RotinaFormModal] Renderizando. diasDeTreinoState atual:", JSON.parse(JSON.stringify(diasDeTreinoState)));

  return (
    <Dialog open={open} onOpenChange={(openStatus) => { if (!openStatus) onClose(); }}>
      <DialogContent className="sm:max-w-3xl w-[95vw] md:w-[80vw] lg:w-[70vw] xl:w-[60vw] max-h-[95vh] flex flex-col p-0">
        <DialogHeader className="p-4 md:p-6 pb-4 border-b bg-background z-10 shrink-0">
          <DialogTitle>{isEditing ? "Editar Rotina de Treino" : "Nova Rotina de Treino"}</DialogTitle>
          <DialogDescription>{isEditing ? "Atualize os detalhes da rotina e seus dias de treino." : "Defina os detalhes da rotina e adicione os dias de treino."}</DialogDescription>
        </DialogHeader>

        <div className="flex-grow overflow-y-auto">
            <Form {...form}>
            <form id="rotinaFormHandler" onSubmit={form.handleSubmit(onSubmit)} className="px-4 md:px-6 py-4 space-y-6">
                <FormField control={form.control} name="titulo" render={({ field }) => ( <FormItem><FormLabel>Nome da Rotina*</FormLabel><FormControl><Input placeholder="Ex: Programa de Hipertrofia Semanal" {...field} /></FormControl><FormMessage /></FormItem> )}/>
                <FormField control={form.control} name="tipoOrganizacaoRotina" render={({ field }) => ( <FormItem><FormLabel>Organização dos Dias de Treino*</FormLabel><Select onValueChange={(value) => { field.onChange(value); if (showDiaForm) { setDiaFormValues(prev => ({...prev, identificadorDia: ''})); } }} value={field.value ?? "numerico"} > <FormControl><SelectTrigger><SelectValue placeholder="Como os treinos serão divididos?" /></SelectTrigger></FormControl> <SelectContent> {OPCOES_TIPO_DOS_TREINOS.map(opcao => ( <SelectItem key={opcao.value} value={opcao.value}>{opcao.label}</SelectItem> ))} </SelectContent> </Select> <FormDescription className="text-xs">Define como os dias (Ex: A, B, C ou Seg, Ter, Qua) são gerenciados.</FormDescription> <FormMessage /> </FormItem> )}/>
                <FormField control={form.control} name="descricao" render={({ field }) => ( <FormItem><FormLabel>Observações/Instruções Gerais</FormLabel><FormControl><Textarea placeholder="Detalhes adicionais sobre a rotina, recomendações, etc." {...field} value={field.value ?? ""} rows={2} /></FormControl><FormMessage /></FormItem> )}/>
                <FormField control={form.control} name="tipo" render={({ field }) => ( <FormItem><FormLabel>Tipo de Rotina*</FormLabel><Select onValueChange={field.onChange} value={field.value} disabled={isEditing || !!alunoIdProp}><FormControl><SelectTrigger><SelectValue placeholder="Selecione o tipo" /></SelectTrigger></FormControl><SelectContent><SelectItem value="modelo">Modelo (Template)</SelectItem><SelectItem value="individual">Individual (Para um aluno)</SelectItem></SelectContent></Select>{(isEditing || !!alunoIdProp) && <FormDescription className="text-xs">O tipo da rotina não pode ser alterado neste contexto.</FormDescription>}<FormMessage /></FormItem> )}/>
                
                {watchedTipoRotina === 'modelo' && ( <> <FormField control={form.control} name="pastaId" render={({ field }) => ( <FormItem><FormLabel className="flex items-center"><FolderIcon className="w-4 h-4 mr-1.5 text-gray-500" /> Pasta de Modelos</FormLabel><Select  onValueChange={(value) => field.onChange(value === "nenhuma" ? null : value)}  value={field.value ?? "nenhuma"} disabled={isLoadingPastas} > <FormControl><SelectTrigger><SelectValue placeholder="Opcional: organizar em uma pasta" /></SelectTrigger></FormControl> <SelectContent> <SelectItem value="nenhuma">Nenhuma (Fora de pastas)</SelectItem> {isLoadingPastas && <div className="p-2 text-sm text-muted-foreground">Carregando pastas...</div>} {!isLoadingPastas && pastas.map(pasta => (<SelectItem key={pasta._id} value={pasta._id}>{pasta.nome}</SelectItem>))} </SelectContent> </Select> <FormMessage /> </FormItem> )}/> <FormField control={form.control} name="statusModelo" render={({ field }) => (  <FormItem> <FormLabel className="flex items-center"><Activity className="w-4 h-4 mr-1.5 text-gray-500" /> Status do Modelo*</FormLabel> <Select onValueChange={field.onChange} value={field.value ?? "rascunho"}> <FormControl><SelectTrigger><SelectValue placeholder="Status da rotina modelo" /></SelectTrigger></FormControl> <SelectContent> <SelectItem value="rascunho">Rascunho (Não visível para alunos)</SelectItem> <SelectItem value="ativo">Ativo (Pronto para uso)</SelectItem> <SelectItem value="arquivado">Arquivado (Antigo, não listado)</SelectItem> </SelectContent> </Select> <FormMessage /> </FormItem>  )}/> </> )}
                
                {watchedTipoRotina === 'individual' && ( <>
                <FormField control={form.control} name="alunoId" render={({ field }) => ( 
                    <FormItem> 
                        <FormLabel>Aluno*</FormLabel> 
                        <Select  onValueChange={field.onChange}  value={field.value ?? undefined}  disabled={isEditing || !!alunoIdProp || isLoadingAlunos} > 
                            <FormControl><SelectTrigger><SelectValue placeholder={isLoadingAlunos ? "Carregando..." : "Selecione o aluno"} /></SelectTrigger></FormControl> 
                            <SelectContent> 
                                {isLoadingAlunos && <div className="p-2 text-sm text-muted-foreground">Carregando alunos...</div>} 
                                {!isLoadingAlunos && alunosDisponiveis.length === 0 && <div className="p-2 text-sm text-muted-foreground">Nenhum aluno encontrado.</div>} 
                                {!isLoadingAlunos && alunosDisponiveis.map((aluno: Aluno) => (<SelectItem key={aluno._id} value={aluno._id}>{aluno.nome}</SelectItem>))} 
                            </SelectContent> 
                        </Select> 
                        {(isEditing || !!alunoIdProp) && <FormDescription className="text-xs">O aluno não pode ser alterado neste contexto.</FormDescription>} 
                        <FormMessage /> 
                    </FormItem> 
                )}/>
                <FormField control={form.control} name="dataValidade" render={({ field }) => (
                    <FormItem className="flex flex-col">
                        <FormLabel>Válido Até</FormLabel>
                        <Popover>
                            <PopoverTrigger asChild>
                                <Button
                                    variant="outline"
                                    className={`w-full pl-3 text-left font-normal ${!field.value && "text-muted-foreground"}`}
                                    ref={field.ref} 
                                >
                                    {field.value ? format(field.value, "PPP", { locale: ptBR }) : <span>Data de expiração (opcional)</span>}
                                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0" align="start">
                                <Calendar
                                    mode="single"
                                    selected={field.value ?? undefined}
                                    onSelect={field.onChange} 
                                    disabled={(date) => date < startOfToday()}
                                    initialFocus
                                />
                            </PopoverContent>
                        </Popover>
                        <FormMessage />
                    </FormItem>
                )}/>
                <FormField control={form.control} name="totalSessoesRotinaPlanejadas" render={({ field }) => (  <FormItem> <FormLabel>Nº de Sessões Planejadas</FormLabel> <FormControl> <Input  type="number"  placeholder="Ex: 12 (opcional)"  value={field.value === null || field.value === undefined ? "" : String(field.value)}  onChange={e => {  const val = e.target.value;  field.onChange(val.trim() === '' ? null : Number(val)); }}  min="0"  /> </FormControl> <FormDescription className="text-xs">Opcional. Defina um limite de sessões para esta rotina.</FormDescription> <FormMessage /> </FormItem>  )}/> 
                </> )}

                <div className="pt-6 mt-6 border-t dark:border-gray-700">
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold">Dias de Treino da Rotina</h3>
                        <Button type="button" size="sm" variant="outline" onClick={() => { setDiaFormValues({ identificadorDia: '', nomeSubFicha: '' }); setEditingDiaTempId(null); setShowDiaForm(true); }}>
                        <PlusCircle className="w-4 h-4 mr-2"/> Adicionar Dia de Treino
                        </Button>
                    </div>
                    {showDiaForm && (
                        <Card className="p-4 mb-4 border-dashed dark:border-gray-600 bg-slate-50 dark:bg-slate-800/30">
                        <CardContent className="p-0 space-y-4">
                            <div>
                                <Label htmlFor="identificadorDiaForm" className="text-sm font-medium">
                                    {watchedTipoOrganizacao === 'diasDaSemana' && "Selecione o Dia da Semana*"}
                                    {watchedTipoOrganizacao === 'numerico' && "Número do Dia* (Ex: 1)"}
                                    {watchedTipoOrganizacao === 'livre' && "Identificador do Dia* (Ex: Peito/Tríceps)"}
                                </Label>
                                {watchedTipoOrganizacao === 'diasDaSemana' ? (
                                    <Select value={diaFormValues.identificadorDia} onValueChange={(value) => { setDiaFormValues(prev => ({ ...prev, identificadorDia: value })); }} >
                                        <SelectTrigger className="mt-1"> <SelectValue placeholder="Selecione o dia" /> </SelectTrigger>
                                        <SelectContent> {diasDaSemanaOptions.map(opt => ( <SelectItem key={opt.value} value={opt.value} disabled={diasDaSemanaUtilizados.includes(opt.value) && diaFormValues.identificadorDia !== opt.value} > {opt.label} </SelectItem> ))} </SelectContent>
                                    </Select>
                                ) : watchedTipoOrganizacao === 'numerico' ? (
                                    <Input id="identificadorDiaForm" name="identificadorDia" type="number" value={diaFormValues.identificadorDia} onChange={handleDiaInputChange} placeholder={`Ex: ${diasDeTreinoState.filter(d => !editingDiaTempId || d.tempId !== editingDiaTempId).length + 1}`} className="mt-1" min="1" />
                                ) : (
                                    <Input id="identificadorDiaForm" name="identificadorDia" value={diaFormValues.identificadorDia} onChange={handleDiaInputChange} placeholder="Ex: Peito e Tríceps, Dia de Força" className="mt-1" />
                                )}
                                <p className="text-xs text-muted-foreground mt-1">
                                    {watchedTipoOrganizacao === 'diasDaSemana' && "Selecione um dia da semana."}
                                    {watchedTipoOrganizacao === 'numerico' && `Sugestão para próximo dia: ${diasDeTreinoState.filter(d => !editingDiaTempId || d.tempId !== editingDiaTempId).length + 1}`}
                                    {watchedTipoOrganizacao === 'livre' && "Use um nome curto e descritivo."}
                                </p>
                            </div>
                            <div>
                                <Label htmlFor="nomeSubFichaForm" className="text-sm font-medium">Nome Específico do Treino (Opcional)</Label>
                                <Input id="nomeSubFichaForm" name="nomeSubFicha" value={diaFormValues.nomeSubFicha ?? ""} onChange={handleDiaInputChange} placeholder="Ex: Foco em Peito e Tríceps" className="mt-1" />
                            </div>
                            <div className="flex justify-end gap-2 pt-2">
                              <Button type="button" variant="ghost" onClick={() => {setShowDiaForm(false); setEditingDiaTempId(null); setDiaFormValues({identificadorDia: '', nomeSubFicha: ''});}}>Cancelar</Button>
                              <Button type="button" onClick={handleAddOrUpdateDia}>{editingDiaTempId ? "Atualizar Dia" : "Confirmar Dia"}</Button>
                            </div>
                        </CardContent>
                        </Card>
                    )}
                    {diasDeTreinoState.length === 0 && !showDiaForm && ( <div className="text-center py-6"> <Activity className="mx-auto h-12 w-12 text-gray-400" /> <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-gray-100">Nenhum dia de treino adicionado</h3> <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">Comece adicionando o primeiro dia de treino da rotina.</p> </div> )}

                    {diasDeTreinoState.length > 0 && (
                        <Accordion type="multiple" className="w-full space-y-2" defaultValue={diasDeTreinoState.map(d => d.tempId)}>
                        {diasDeTreinoState.map((dia) => (
                            <AccordionItem key={dia.tempId} value={dia.tempId} className="border rounded-md bg-white dark:bg-slate-800/70 shadow-sm">
                            <AccordionTrigger className="px-3 py-2 hover:no-underline text-sm group">
                                <div className="flex items-center justify-between w-full">
                                <div className="flex items-center gap-2">
                                    <GripVertical className="w-4 h-4 text-muted-foreground cursor-grab group-hover:text-primary transition-colors" />
                                    <span className="font-medium text-gray-700 dark:text-gray-200">{dia.identificadorDia}</span>
                                    {dia.nomeSubFicha && <span className="text-xs text-gray-500 dark:text-gray-400">- {dia.nomeSubFicha}</span>}
                                </div>
                                <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                                    <Button type="button" variant="ghost" size="icon" className="h-7 w-7" onClick={(e) => {e.stopPropagation(); handleEditDia(dia);}} title="Editar dia"> <Edit className="w-3.5 h-3.5"/> </Button>
                                    <Button type="button" variant="ghost" size="icon" className="h-7 w-7 text-destructive hover:text-destructive" onClick={(e) => {e.stopPropagation(); handleRemoveDia(dia.tempId);}} title="Remover dia"> <Trash2 className="w-3.5 h-3.5"/> </Button>
                                </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-4 pb-3 pt-0 border-t border-gray-200 dark:border-slate-700/50">
                                <div className="pt-3 space-y-3">
                                    {dia.exerciciosDoDia && dia.exerciciosDoDia.length > 0 ? (
                                        dia.exerciciosDoDia.map(ex => (
                                            <Card key={ex.tempIdExercicio} className="p-3 bg-slate-50 dark:bg-slate-700/50">
                                                <div className="flex justify-between items-start mb-2">
                                                    <div>
                                                        <p className="text-sm font-medium">{ex.nomeExercicio}</p>
                                                        <p className="text-xs text-muted-foreground">
                                                            {ex.grupoMuscular}{ex.categoria && ` - ${ex.categoria}`}
                                                        </p>
                                                    </div>
                                                    <Button
                                                        type="button" variant="ghost" size="icon"
                                                        className="h-6 w-6 text-destructive hover:text-destructive shrink-0"
                                                        onClick={() => handleRemoveExercicioFromDia(dia.tempId, ex.tempIdExercicio)}
                                                        title="Remover exercício do dia"
                                                    >
                                                        <XCircle className="w-4 h-4" />
                                                    </Button>
                                                </div>
                                                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-x-2 gap-y-3 items-end">
                                                    <FormItem className="flex-grow"> <FormLabel htmlFor={`${ex.tempIdExercicio}-series`} className="text-xs mb-1 block">Séries</FormLabel> <Input id={`${ex.tempIdExercicio}-series`} value={ex.series || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'series', e.target.value)} placeholder="Ex: 3" className="text-xs h-8" /> </FormItem>
                                                    <FormItem className="flex-grow"> <FormLabel htmlFor={`${ex.tempIdExercicio}-repeticoes`} className="text-xs mb-1 block">Repetições</FormLabel> <Input id={`${ex.tempIdExercicio}-repeticoes`} value={ex.repeticoes || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'repeticoes', e.target.value)} placeholder="Ex: 10-12" className="text-xs h-8" /> </FormItem>
                                                    <FormItem className="flex-grow"> <FormLabel htmlFor={`${ex.tempIdExercicio}-carga`} className="text-xs mb-1 block">Carga</FormLabel> <Input id={`${ex.tempIdExercicio}-carga`} value={ex.carga || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'carga', e.target.value)} placeholder="Ex: 20kg" className="text-xs h-8" /> </FormItem>
                                                    <FormItem className="flex-grow"> <FormLabel htmlFor={`${ex.tempIdExercicio}-descanso`} className="text-xs mb-1 block">Descanso</FormLabel> <Input id={`${ex.tempIdExercicio}-descanso`} value={ex.descanso || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'descanso', e.target.value)} placeholder="Ex: 60s" className="text-xs h-8" /> </FormItem>
                                                    <FormItem className="col-span-2 sm:col-span-3 md:col-span-5"> <FormLabel htmlFor={`${ex.tempIdExercicio}-observacoes`} className="text-xs mb-1 block">Obs.</FormLabel> <Textarea id={`${ex.tempIdExercicio}-observacoes`} value={ex.observacoes || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'observacoes', e.target.value)} placeholder="Ex: Cadência 2020, até a falha..." className="text-xs min-h-[32px] py-1" rows={1} /> </FormItem>
                                                </div>
                                            </Card>
                                        ))
                                    ) : (
                                        <p className="text-xs text-muted-foreground italic text-center py-2"> Nenhum exercício adicionado a este dia. </p>
                                    )}
                                    <Button
                                        type="button" variant="outline" size="sm"
                                        className="w-full mt-2 border-dashed hover:border-solid"
                                        onClick={() => handleOpenSelectExerciseModal(dia.tempId)} >
                                        <ListPlus className="w-4 h-4 mr-2" /> Adicionar Exercício ao Dia: {dia.identificadorDia}
                                    </Button>
                                </div>
                            </AccordionContent>
                            </AccordionItem>
                        ))}
                        </Accordion>
                    )}
                </div>
            </form>
            </Form>
        </div>

        <DialogFooter className="p-4 md:p-6 pt-4 border-t bg-background z-10 shrink-0">
          <DialogClose asChild><Button variant="outline" type="button" disabled={mutation.isPending}>Cancelar</Button></DialogClose>
          <Button type="submit" form="rotinaFormHandler" disabled={mutation.isPending || (form.getValues("tipo") === "individual" && !form.getValues("alunoId") && !isEditing )}>
            {mutation.isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isEditing ? "Salvar Alterações" : "Criar Rotina"}
          </Button>
        </DialogFooter>
      </DialogContent>

      {isSelectExerciseModalOpen && diaAtivoParaAdicionarExercicio && (
        <SelectExerciseModal
            isOpen={isSelectExerciseModalOpen}
            onClose={() => { setIsSelectExerciseModalOpen(false); setDiaAtivoParaAdicionarExercicio(null); }}
            onExercisesSelect={handleExercisesSelected}
        />
      )}
    </Dialog>
  );
}

==== ./client/src/components/dialogs/SelectExerciseModal.tsx ====

// client/src/components/dialogs/SelectExerciseModal.tsx
// ATUALIZADO: Ajustes de layout para garantir a funcionalidade da barra de rolagem.

import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { fetchWithAuth } from '@/lib/apiClient';
import { Loader2, CheckCircle, FilterX } from 'lucide-react';

export interface BibliotecaExercicio {
  _id: string;
  nome: string;
  grupoMuscular?: string;
  categoria?: string;
}

interface SelectExerciseModalProps {
  isOpen: boolean;
  onClose: () => void;
  onExercisesSelect: (selecionados: BibliotecaExercicio[]) => void;
}

type AbaBiblioteca = "app" | "meus" | "favoritos";

const ALL_FILTER_VALUE = "all";

export default function SelectExerciseModal({
  isOpen,
  onClose,
  onExercisesSelect,
}: SelectExerciseModalProps) {
  const [exerciciosDaBiblioteca, setExerciciosDaBiblioteca] = useState<BibliotecaExercicio[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [abaSelecionada, setAbaSelecionada] = useState<AbaBiblioteca>("app");
  const [exerciciosSelecionados, setExerciciosSelecionados] = useState<BibliotecaExercicio[]>([]);
  const [grupoSelecionado, setGrupoSelecionado] = useState<string>(ALL_FILTER_VALUE);
  const [categoriaSelecionada, setCategoriaSelecionada] = useState<string>(ALL_FILTER_VALUE);

  const grupos = [
    "Peitoral", "Pernas", "Costas", "Ombros", "Bíceps", "Tríceps", "Abdômen",
    "Lombar", "Glúteos", "Panturrilha", "Cardio", "Corpo Inteiro", "Outro"
  ].sort((a,b) => a.localeCompare(b, 'pt-BR'));

  const tiposOuCategorias = ["Força", "Resistência", "Hipertrofia", "Potência", "Cardiovascular", "Flexibilidade", "Mobilidade", "Funcional", "Calistenia", "Outro"].sort((a,b) => a.localeCompare(b, 'pt-BR'));

  const fetchExerciciosDaBiblioteca = async (
      aba: AbaBiblioteca,
      grupo: string,
      categoriaFiltro: string
    ) => {
    setLoading(true);
    let rotaBase = "/api/exercicios/app";
    if (aba === "meus") rotaBase = "/api/exercicios/meus";
    else if (aba === "favoritos") rotaBase = "/api/exercicios/favoritos";

    const params = new URLSearchParams();
    if (grupo && grupo !== ALL_FILTER_VALUE) params.append('grupo', grupo);
    if (categoriaFiltro && categoriaFiltro !== ALL_FILTER_VALUE) params.append('categoria', categoriaFiltro);
    
    const rotaComFiltros = `${rotaBase}?${params.toString()}`;

    try {
      const data = await fetchWithAuth<BibliotecaExercicio[]>(rotaComFiltros);
      setExerciciosDaBiblioteca(Array.isArray(data) ? data : []);
    } catch (error) {
      console.error("Erro ao buscar exercícios da biblioteca:", error);
      setExerciciosDaBiblioteca([]);
      // TODO: Adicionar toast de erro
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (isOpen) {
      fetchExerciciosDaBiblioteca(abaSelecionada, grupoSelecionado, categoriaSelecionada);
      setExerciciosSelecionados([]);
    }
  }, [isOpen, abaSelecionada, grupoSelecionado, categoriaSelecionada]);

  const handleToggleSelecaoExercicio = (exercicio: BibliotecaExercicio) => {
    setExerciciosSelecionados((prevSelecionados) =>
      prevSelecionados.some(ex => ex._id === exercicio._id)
        ? prevSelecionados.filter(ex => ex._id !== exercicio._id)
        : [...prevSelecionados, exercicio]
    );
  };

  const handleSubmitSelecao = () => {
    onExercisesSelect(exerciciosSelecionados);
    onClose();
  };

  const exerciciosFiltradosEOrdenados = [...exerciciosDaBiblioteca]
    .filter(ex => ex.nome.toLowerCase().includes(searchTerm.toLowerCase()))
    .sort((a, b) => a.nome.localeCompare(b.nome, 'pt-BR', { sensitivity: 'base' }));

  const limparFiltrosDeTela = () => {
    setSearchTerm("");
    setGrupoSelecionado(ALL_FILTER_VALUE);
    setCategoriaSelecionada(ALL_FILTER_VALUE);
  };

  if (!isOpen) return null;

  return (
    <Dialog open={isOpen} onOpenChange={(openState) => !openState && onClose()}>
      {/* DialogContent com altura máxima e layout flexível */}
      <DialogContent className="sm:max-w-3xl w-[95vw] h-[90vh] max-h-[90vh] flex flex-col p-0">
        <DialogHeader className="p-6 pb-4 border-b shrink-0"> {/* shrink-0 para não encolher */}
          <DialogTitle>Selecionar Exercício(s) da Biblioteca</DialogTitle>
          <DialogDescription>
            Use as abas, filtros e a busca para encontrar exercícios e adicioná-los à ficha.
          </DialogDescription>
        </DialogHeader>

        {/* Container para Abas e Filtros */}
        <div className="px-6 pt-4 shrink-0"> {/* shrink-0 */}
          <Tabs defaultValue="app" onValueChange={(v) => setAbaSelecionada(v as AbaBiblioteca)} className="mb-2">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="app">App</TabsTrigger>
              <TabsTrigger value="meus">Meus Exercícios</TabsTrigger>
              <TabsTrigger value="favoritos">Favoritos</TabsTrigger>
            </TabsList>
          </Tabs>
        </div>

        <div className="flex flex-wrap gap-3 items-center bg-muted p-4 rounded-lg border-y mx-6 shrink-0"> {/* shrink-0 */}
           <Input
              placeholder="Buscar por nome..."
              value={searchTerm}
              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setSearchTerm(e.target.value)}
              className="flex-grow sm:flex-grow-0 sm:w-48 bg-background dark:bg-input"
           />
           <Select onValueChange={setGrupoSelecionado} value={grupoSelecionado}>
            <SelectTrigger className="w-full sm:w-[180px] bg-background dark:bg-input">
              <SelectValue placeholder="Grupo muscular" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value={ALL_FILTER_VALUE}>Todos os Grupos</SelectItem>
              {grupos.map((g) => <SelectItem key={g} value={g}>{g}</SelectItem>)}
            </SelectContent>
          </Select>
           <Select onValueChange={setCategoriaSelecionada} value={categoriaSelecionada}>
            <SelectTrigger className="w-full sm:w-[180px] bg-background dark:bg-input">
              <SelectValue placeholder="Tipo/Categoria" />
            </SelectTrigger>
            <SelectContent>
               <SelectItem value={ALL_FILTER_VALUE}>Todos os Tipos</SelectItem>
               {tiposOuCategorias.map((c) => <SelectItem key={c} value={c}>{c}</SelectItem>)}
            </SelectContent>
          </Select>
           <Button variant="ghost" onClick={limparFiltrosDeTela} size="sm" className="text-muted-foreground hover:text-foreground">
              <FilterX className="w-4 h-4 mr-1" />
              Limpar
           </Button>
        </div>

        {/* ScrollArea agora está em um container que pode crescer e tem overflow-y-auto */}
        <div className="flex-grow overflow-y-auto px-6 pt-4 pb-2"> {/* Adicionado pb-2 para espaço antes do footer */}
          <ScrollArea className="h-full"> {/* h-full para ocupar o espaço do pai */}
            {loading ? (
              <div className="flex justify-center items-center h-full min-h-[200px]">
                <Loader2 className="w-8 h-8 animate-spin text-primary" />
              </div>
            ) : exerciciosFiltradosEOrdenados.length === 0 ? (
              <p className="text-sm text-muted-foreground text-center py-10 min-h-[200px] flex items-center justify-center">
                Nenhum exercício encontrado {searchTerm || grupoSelecionado !== ALL_FILTER_VALUE || categoriaSelecionada !== ALL_FILTER_VALUE ? "para os filtros aplicados" : "nesta aba"}.
              </p>
            ) : (
              <div className="space-y-2">
                {exerciciosFiltradosEOrdenados.map((ex) => {
                  const isSelected = exerciciosSelecionados.some(sel => sel._id === ex._id);
                  return (
                    <div
                      key={ex._id}
                      onClick={() => handleToggleSelecaoExercicio(ex)}
                      className={`p-3 border rounded-md cursor-pointer flex justify-between items-center transition-colors duration-150 ease-in-out ${
                          isSelected 
                            ? "bg-primary/10 border-primary ring-2 ring-primary shadow-md dark:bg-primary/20" 
                            : "hover:bg-muted/50 dark:hover:bg-muted/20 bg-card"
                      }`}
                    >
                      <div>
                        <p className={`font-medium ${isSelected ? 'text-primary' : 'text-card-foreground'}`}>{ex.nome}</p>
                        <span className="text-xs text-muted-foreground mr-2">{ex.grupoMuscular || 'Não especificado'}</span>
                        <span className="text-xs text-muted-foreground">{ex.categoria || 'Não especificado'}</span>
                      </div>
                      {isSelected && <CheckCircle className="w-5 h-5 text-primary flex-shrink-0" />}
                    </div>
                  );
                })}
              </div>
            )}
          </ScrollArea>
        </div>

        <DialogFooter className="p-6 pt-4 border-t shrink-0"> {/* shrink-0 */}
          <p className="text-sm text-muted-foreground mr-auto self-center">
            {exerciciosSelecionados.length} selecionado(s)
          </p>
          <Button variant="outline" onClick={onClose}>Cancelar</Button>
          <Button onClick={handleSubmitSelecao} disabled={exerciciosSelecionados.length === 0}>
            Adicionar Selecionados
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
