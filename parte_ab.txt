
==== ./client/src/components/dialogs/SessionFormModal.tsx ====

import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";

interface Sessao {
  id: string;
  aluno: string;
  data: Date;
  hora: string;
  status: "confirmada" | "pendente" | "concluida" | "cancelada";
  observacoes?: string;
}

interface SessionFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (novaSessao: Sessao) => void;
}

export default function SessionFormModal({ isOpen, onClose, onSave }: SessionFormModalProps) {
  const [aluno, setAluno] = useState("");
  const [data, setData] = useState<Date | undefined>(new Date());
  const [hora, setHora] = useState("");
  const [status, setStatus] = useState<"confirmada" | "pendente" | "concluida" | "cancelada">("pendente");
  const [observacoes, setObservacoes] = useState("");

  const handleSalvar = () => {
    if (!aluno || !data || !hora) return alert("Preencha todos os campos obrigatórios.");

    const novaSessao: Sessao = {
      id: Date.now().toString(),
      aluno,
      data,
      hora,
      status,
      observacoes,
    };

    onSave(novaSessao);
    onClose();
    limparCampos();
  };

  const limparCampos = () => {
    setAluno("");
    setData(new Date());
    setHora("");
    setStatus("pendente");
    setObservacoes("");
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-lg">
        <DialogHeader>
          <DialogTitle>Nova Sessão</DialogTitle>
        </DialogHeader>
        <div className="space-y-4">
          <Input placeholder="Nome do aluno" value={aluno} onChange={(e) => setAluno(e.target.value)} />
          <div className="flex gap-2 items-center">
            <Calendar selected={data} onSelect={setData} mode="single" className="border rounded-md" />
            <Input type="time" value={hora} onChange={(e) => setHora(e.target.value)} className="w-1/2" />
          </div>
          <Select value={status} onValueChange={(value) => setStatus(value as any)}>
            <SelectTrigger>
              <SelectValue placeholder="Status da sessão" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="confirmada">Confirmada</SelectItem>
              <SelectItem value="pendente">Pendente</SelectItem>
              <SelectItem value="concluida">Concluída</SelectItem>
              <SelectItem value="cancelada">Cancelada</SelectItem>
            </SelectContent>
          </Select>
          <Input
            placeholder="Observações (opcional)"
            value={observacoes}
            onChange={(e) => setObservacoes(e.target.value)}
          />
          <Button onClick={handleSalvar} className="w-full">Salvar Sessão</Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}

==== ./client/src/components/dialogs/TreinoFormModal.tsx ====

// client/src/components/dialogs/TreinoFormModal.tsx
// Nota: O nome da função original no ficheiro fornecido era RotinaFormModal
import React, { useEffect, useState, useMemo, useCallback } from 'react';
import {
  Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter, DialogDescription, DialogClose,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import {
  Select, SelectContent, SelectItem, SelectTrigger, SelectValue,
} from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Calendar } from "@/components/ui/calendar";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from '@/lib/queryClient';
import { useMutation, useQuery, useQueryClient, QueryKey } from "@tanstack/react-query";
import { Loader2, CalendarIcon, Folder as FolderIcon, Activity, PlusCircle, Trash2, GripVertical, Edit, ListPlus, XCircle } from "lucide-react"; // Removido Search não utilizado
import { Card, CardContent } from "@/components/ui/card";
import { Aluno } from '@/types/aluno';

import type { RotinaListagemItem, DiaDeTreinoDetalhado } from '@/types/treinoOuRotinaTypes'; // Removido ExercicioDetalhadoAPIType não utilizado diretamente aqui
import SelectExerciseModal, { BibliotecaExercicio } from './SelectExerciseModal';

import { format, parseISO, isValid as isDateValid, startOfToday } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import * as z from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from "@/components/ui/form";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";

const TIPOS_ORGANIZACAO_ROTINA_BACKEND = ['diasDaSemana', 'numerico', 'livre'] as const;
type TipoOrganizacaoRotinaBackend = typeof TIPOS_ORGANIZACAO_ROTINA_BACKEND[number];

const OPCOES_TIPO_DOS_TREINOS: { value: TipoOrganizacaoRotinaBackend; label: string }[] = [
    { value: 'diasDaSemana', label: 'Dia da Semana (Ex: Segunda, Terça...)' },
    { value: 'numerico', label: 'Numérico (Ex: Treino 1, Treino 2...)' },
    { value: 'livre', label: 'Livre (Nomes personalizados)' }
];

const diasDaSemanaOptions = [
    { value: "Segunda-feira", label: "Segunda-feira" }, { value: "Terça-feira", label: "Terça-feira" },
    { value: "Quarta-feira", label: "Quarta-feira" }, { value: "Quinta-feira", label: "Quinta-feira" },
    { value: "Sexta-feira", label: "Sexta-feira" }, { value: "Sábado", label: "Sábado" }, { value: "Domingo", label: "Domingo" },
];

// Schema para os valores do formulário de um dia de treino (quando o pequeno formulário de adicionar/editar dia é mostrado)
const diaDeTreinoFormSchema = z.object({
    identificadorDia: z.string().min(1, "Identificador do dia é obrigatório.").max(50),
    nomeSubFicha: z.string().max(100).optional().nullable(),
});
type DiaDeTreinoFormValues = z.infer<typeof diaDeTreinoFormSchema>;

// Interface para o estado de um exercício dentro de um dia de treino (gerenciado no frontend)
interface ExercicioNoDiaState {
  tempIdExercicio: string; // ID temporário para manipulação no frontend
  exercicioId: string; // ID do exercício da biblioteca
  nomeExercicio: string;
  grupoMuscular?: string;
  categoria?: string;
  series?: string;
  repeticoes?: string;
  carga?: string;
  descanso?: string;
  observacoes?: string;
  ordemNoDia: number;
  _idSubDocExercicio?: string; // ID do subdocumento no MongoDB, se já existir (para PUT)
}

// Interface para o estado de um dia de treino (gerenciado no frontend)
interface DiaDeTreinoStateItem extends DiaDeTreinoFormValues {
    tempId: string; // ID temporário para manipulação no frontend
    ordemNaRotina: number;
    exerciciosDoDia: ExercicioNoDiaState[];
    _id?: string; // ID do subdocumento no MongoDB, se já existir (para PUT)
}

// Schema para os metadados da rotina (React Hook Form)
const rotinaMetadataSchema = z.object({
  titulo: z.string().min(1, { message: "Título da rotina é obrigatório." }).max(100),
  descricao: z.string().max(500).optional().nullable(),
  tipo: z.enum(["modelo", "individual"]),
  tipoOrganizacaoRotina: z.enum(TIPOS_ORGANIZACAO_ROTINA_BACKEND, { errorMap: () => ({ message: "Selecione como os treinos são divididos." }) }).default('numerico'),
  alunoId: z.string().optional().nullable(), 
  pastaId: z.string().nullable().optional(),
  statusModelo: z.enum(["ativo", "rascunho", "arquivado"]).optional().nullable(),
  dataValidade: z.date().optional().nullable(), 
  totalSessoesRotinaPlanejadas: z.preprocess( (val) => (String(val ?? '').trim() === "" ? null : Number(String(val ?? '').trim())), z.number().int().min(0, "Deve ser 0 ou maior.").nullable().optional() ),
}).refine(data => !(data.tipo === 'individual' && (!data.alunoId || data.alunoId.trim() === '')), { message: "Aluno é obrigatório para rotinas individuais.", path: ["alunoId"] })
  .refine(data => !(data.tipo === 'modelo' && !data.statusModelo), { message: "Status é obrigatório para rotinas modelo.", path: ["statusModelo"] });

type RotinaMetadataFormValues = z.infer<typeof rotinaMetadataSchema>;

// Interface para a prop rotinaParaEditar, como ela pode vir da página do aluno ou da página de modelos
export interface RotinaParaEditar {
  _id?: string;
  titulo?: string;
  descricao?: string | null;
  tipo?: "modelo" | "individual";
  tipoOrganizacaoRotina?: TipoOrganizacaoRotinaBackend;
  alunoId?: string | { _id: string; nome: string; } | null; // Pode vir populado ou só ID
  pastaId?: string | { _id: string; nome: string; } | null; // Pode vir populado ou só ID
  statusModelo?: "ativo" | "rascunho" | "arquivado" | null;
  dataValidade?: string | Date | null; // API pode retornar string, form usa Date
  totalSessoesRotinaPlanejadas?: number | null;
  diasDeTreino?: Array<{ // Estrutura como vem da API (pode ter _id)
    _id?: string;
    identificadorDia: string;
    nomeSubFicha?: string | null;
    ordemNaRotina: number;
    exerciciosDoDia?: Array<{
      _id?: string; // ID do subdocumento ExercicioEmDiaDeTreino
      exercicioId: string | { _id: string; nome: string; grupoMuscular?: string; categoria?: string; tipo?: string; urlVideo?: string; descricao?: string; }; // exercicioId pode ser string ou objeto populado
      series?: string; repeticoes?: string; carga?: string; descanso?: string; observacoes?: string; ordemNoDia: number;
    }>;
  }>;
  exercicios?: Array<{ // Estrutura legada (para compatibilidade se ainda usada)
    _id?: string;
    exercicioId: string | { _id: string; nome: string; grupoMuscular?: string; };
    series?: string; repeticoes?: string; carga?: string; descanso?: string; observacoes?: string; ordem?: number;
  }>;
}

interface Pasta { 
    _id: string;
    nome: string;
}

interface RotinaFormModalProps {
  open: boolean;
  onClose: () => void;
  onSuccess: (rotinaSalva: RotinaListagemItem) => void;
  alunos: Aluno[]; // Lista de alunos para o select (se tipo for individual e não houver alunoIdProp)
  rotinaParaEditar?: RotinaParaEditar | null; // Dados da rotina para edição
  alunoId?: string; // ID do aluno, se a rotina está sendo criada diretamente da página do aluno
}

// Estrutura do payload enviado para a API
type RotinaApiPayload = RotinaMetadataFormValues & {
  diasDeTreino: Array<{
    _id?: string; // ID do subdocumento DiaDeTreino (para PUT)
    identificadorDia: string;
    nomeSubFicha?: string | null;
    ordemNaRotina: number;
    exerciciosDoDia: Array<{
      _id?: string; // ID do subdocumento ExercicioEmDiaDeTreino (para PUT)
      exercicioId: string; // Apenas o ID do exercício da biblioteca
      series?: string;
      repeticoes?: string;
      carga?: string;
      descanso?: string;
      observacoes?: string;
      ordemNoDia: number;
    }>;
  }>;
  criadorId?: string; // Adicionado automaticamente pelo backend
};

const TREINOS_QUERY_KEY: QueryKey = ["/api/treinos"]; // Query key para invalidação

export default function TreinoFormModal({ // Renomeado de RotinaFormModal para TreinoFormModal para consistência
  open, onClose, onSuccess, alunos: alunosProp, rotinaParaEditar, alunoId: alunoIdProp,
}: RotinaFormModalProps) {
  const { toast } = useToast();
  const queryClientHook = useQueryClient();
  
  const isEditing = !!(rotinaParaEditar && rotinaParaEditar._id);

  // Estado para gerenciar os dias de treino e seus exercícios no frontend
  const [diasDeTreinoState, setDiasDeTreinoState] = useState<DiaDeTreinoStateItem[]>([]);
  // Estado para controlar a visibilidade e os valores do formulário de adicionar/editar dia
  const [showDiaForm, setShowDiaForm] = useState(false);
  const [diaFormValues, setDiaFormValues] = useState<DiaDeTreinoFormValues>({ identificadorDia: '', nomeSubFicha: '' });
  const [editingDiaTempId, setEditingDiaTempId] = useState<string | null>(null); // ID temporário do dia sendo editado

  // Estados para o modal de seleção de exercícios
  const [isSelectExerciseModalOpen, setIsSelectExerciseModalOpen] = useState(false);
  const [diaAtivoParaAdicionarExercicio, setDiaAtivoParaAdicionarExercicio] = useState<string | null>(null); // tempId do dia

  const form = useForm<RotinaMetadataFormValues>({
    resolver: zodResolver(rotinaMetadataSchema),
    defaultValues: {
      titulo: "", descricao: null, tipo: "modelo", tipoOrganizacaoRotina: "numerico",
      alunoId: null, pastaId: null, statusModelo: "rascunho",
      dataValidade: null, totalSessoesRotinaPlanejadas: null,
    },
  });

  const watchedTipoOrganizacao = form.watch('tipoOrganizacaoRotina');
  const watchedTipoRotina = form.watch('tipo');

  // Limpa o identificador do dia no formulário de dia se o tipo de organização mudar
  useEffect(() => { 
    if (showDiaForm) { 
      setDiaFormValues(prev => ({ ...prev, identificadorDia: '' })); 
    } 
  }, [watchedTipoOrganizacao, showDiaForm]);

  // Busca pastas (se tipo for modelo) e alunos (se tipo for individual)
  const { data: pastas = [], isLoading: isLoadingPastas } = useQuery<Pasta[], Error>({ 
    queryKey: ["pastasParaRotinaForm", watchedTipoRotina], 
    queryFn: () => apiRequest<Pasta[]>("GET", "/api/pastas/treinos"), 
    enabled: open && watchedTipoRotina === "modelo", 
  });
  const { data: alunosFetched = [], isLoading: isLoadingAlunos } = useQuery<Aluno[], Error>({ 
    queryKey: ["alunosParaRotinaForm", watchedTipoRotina], 
    queryFn: async () => apiRequest<Aluno[]>("GET", "/api/alunos").then(data => Array.isArray(data) ? data : []), 
    enabled: open && watchedTipoRotina === 'individual', 
    initialData: watchedTipoRotina === 'individual' ? alunosProp : undefined, 
  });
  const alunosDisponiveis = watchedTipoRotina === 'individual' ? (alunosFetched.length > 0 ? alunosFetched : alunosProp) : alunosProp;

  // useEffect principal para popular o formulário ao abrir ou ao mudar rotinaParaEditar
  useEffect(() => {
    // console.log("[TreinoFormModal DEBUG] useEffect principal. Props:");
    // console.log("  - open:", open);
    // const safeStringify = (obj: any) => JSON.stringify(obj, null, 2); // Simplificado para debug
    // console.log("  - rotinaParaEditar:", rotinaParaEditar ? safeStringify(rotinaParaEditar) : null);
    // console.log("  - alunoIdProp:", alunoIdProp);
    
    const currentIsEditing = !!(rotinaParaEditar && rotinaParaEditar._id);
    // console.log("  - isEditing (calculado DENTRO do useEffect):", currentIsEditing);

    if (open) {
      if (currentIsEditing && rotinaParaEditar) {
        // console.log("[TreinoFormModal DEBUG] MODO EDIÇÃO.");
        // console.log("  [DEBUG Edição] Dados de rotinaParaEditar:", safeStringify(rotinaParaEditar));

        let dataValidadeDate: Date | null = null;
        if (rotinaParaEditar.dataValidade) {
            if (typeof rotinaParaEditar.dataValidade === 'string') { 
                const parsed = parseISO(rotinaParaEditar.dataValidade); 
                if (isDateValid(parsed)) dataValidadeDate = parsed; 
            } else if (rotinaParaEditar.dataValidade instanceof Date && isDateValid(rotinaParaEditar.dataValidade)) { 
                dataValidadeDate = rotinaParaEditar.dataValidade; 
            }
        }
        
        const tipoDaRotina = rotinaParaEditar.tipo || "modelo"; 

        const alunoIdParaForm = tipoDaRotina === 'individual' 
            ? (typeof rotinaParaEditar.alunoId === 'object' && rotinaParaEditar.alunoId ? rotinaParaEditar.alunoId._id : (rotinaParaEditar.alunoId as string | null))
            : null;
        // Se alunoIdProp é fornecido (criando para aluno específico), ele tem precedência, mas aqui é edição.
        // Então, se é edição de individual, usa o alunoId da rotina.
        const finalAlunoId = tipoDaRotina === 'individual' ? alunoIdParaForm : null;


        const pastaIdParaForm = tipoDaRotina === 'modelo'
            ? (typeof rotinaParaEditar.pastaId === 'object' && rotinaParaEditar.pastaId ? rotinaParaEditar.pastaId._id : (rotinaParaEditar.pastaId as string | null))
            : null;
            
        form.reset({
          titulo: rotinaParaEditar.titulo || "", 
          descricao: rotinaParaEditar.descricao || null, 
          tipo: tipoDaRotina,
          tipoOrganizacaoRotina: rotinaParaEditar.tipoOrganizacaoRotina || "numerico",
          alunoId: finalAlunoId, 
          pastaId: pastaIdParaForm,
          statusModelo: tipoDaRotina === 'modelo' ? (rotinaParaEditar.statusModelo || "rascunho") : null,
          dataValidade: tipoDaRotina === 'individual' ? dataValidadeDate : null, 
          totalSessoesRotinaPlanejadas: tipoDaRotina === 'individual' ? (rotinaParaEditar.totalSessoesRotinaPlanejadas ?? null) : null,
        });
        // console.log("  [DEBUG Edição] form.reset executado com:", form.getValues());

        let diasParaEstado: DiaDeTreinoStateItem[] = [];
        if (rotinaParaEditar.diasDeTreino && rotinaParaEditar.diasDeTreino.length > 0) {
            // console.log("  [DEBUG Edição] Populando diasDeTreinoState a partir de rotinaParaEditar.diasDeTreino");
            diasParaEstado = rotinaParaEditar.diasDeTreino.map((diaApi, index) => {
                const exerciciosFormatados: ExercicioNoDiaState[] = (diaApi.exerciciosDoDia || []).map((exApi, exIndex) => {
                    const exercicioData = exApi.exercicioId; 
                    let idDoEx: string = `temp-invalid-id-${Date.now()}-${exIndex}`; 
                    let nomeDoEx: string = 'Exercício não carregado';
                    let grupoDoEx: string | undefined;
                    let categoriaDoEx: string | undefined;

                    if (typeof exercicioData === 'string') {
                        idDoEx = exercicioData;
                        // Idealmente, aqui você buscaria o nome do exercício na sua lista de exercícios se tivesse apenas o ID.
                        // Como não temos essa lista aqui, exibimos o ID.
                        nomeDoEx = `Exercício ID: ${idDoEx.substring(0,8)}... (Carregar nome)`; 
                    } else if (exercicioData && typeof exercicioData === 'object' && '_id' in exercicioData) { 
                        idDoEx = exercicioData._id;
                        nomeDoEx = exercicioData.nome;
                        grupoDoEx = exercicioData.grupoMuscular;
                        categoriaDoEx = exercicioData.categoria || exercicioData.tipo;
                    }
                    return {
                        tempIdExercicio: exApi._id || `edit-ex-${index}-${exIndex}-${Date.now()}`, // Usa _id do subdoc se existir
                        exercicioId: idDoEx, nomeExercicio: nomeDoEx, grupoMuscular: grupoDoEx, categoria: categoriaDoEx,
                        series: exApi.series, repeticoes: exApi.repeticoes, carga: exApi.carga,
                        descanso: exApi.descanso, observacoes: exApi.observacoes,
                        ordemNoDia: exApi.ordemNoDia ?? exIndex, _idSubDocExercicio: exApi._id, // Guarda o _id do subdoc
                    };
                });
                return { 
                    _id: diaApi._id, // Guarda o _id do subdoc DiaDeTreino
                    identificadorDia: diaApi.identificadorDia, nomeSubFicha: diaApi.nomeSubFicha || null, 
                    tempId: diaApi._id || `edit-dia-${index}-${Date.now()}`, // Usa _id do subdoc se existir
                    ordemNaRotina: diaApi.ordemNaRotina ?? index, 
                    exerciciosDoDia: exerciciosFormatados 
                };
            });
        } else if (rotinaParaEditar.exercicios && rotinaParaEditar.exercicios.length > 0 && tipoDaRotina === 'individual') {
            // console.log("  [DEBUG Edição] Populando diasDeTreinoState a partir da estrutura LEGADA 'exercicios'");
            const exerciciosLegadosFormatados: ExercicioNoDiaState[] = rotinaParaEditar.exercicios.map((exApi, index) => {
                const exercicioData = exApi.exercicioId;
                let idDoEx: string = `legacy-temp-invalid-id-${Date.now()}-${index}`;
                let nomeDoEx: string = 'Exercício legado não carregado';
                let grupoDoEx: string | undefined;

                if (typeof exercicioData === 'string') {
                    idDoEx = exercicioData;
                    nomeDoEx = `Exercício Legado ID: ${idDoEx.substring(0,8)}... (Carregar nome)`;
                } else if (exercicioData && typeof exercicioData === 'object' && '_id' in exercicioData) {
                    idDoEx = (exercicioData as any)._id; // Cast para any para acessar _id
                    nomeDoEx = (exercicioData as any).nome;
                    grupoDoEx = (exercicioData as any).grupoMuscular;
                }
                return {
                    tempIdExercicio: exApi._id || `legacy-ex-${index}-${Date.now()}`, // Usa _id do subdoc se existir
                    exercicioId: idDoEx, nomeExercicio: nomeDoEx, grupoMuscular: grupoDoEx,
                    series: exApi.series, repeticoes: exApi.repeticoes, carga: exApi.carga,
                    descanso: exApi.descanso, observacoes: exApi.observacoes,
                    ordemNoDia: exApi.ordem ?? index, _idSubDocExercicio: exApi._id, // Guarda o _id do subdoc
                };
            });
            diasParaEstado = [{
                _id: undefined, // Dia legado não tem _id próprio
                tempId: `legacy-dia-${Date.now()}`,
                identificadorDia: form.getValues('tipoOrganizacaoRotina') === 'numerico' ? "1" : "Treino Principal",
                nomeSubFicha: "Exercícios da ficha original",
                ordemNaRotina: 0,
                exerciciosDoDia: exerciciosLegadosFormatados,
            }];
        }
        // console.log("  [DEBUG Edição] diasParaEstado (final antes de setar):", safeStringify(diasParaEstado));
        setDiasDeTreinoState(diasParaEstado);

      } else { // Modo Criação
        // console.log("[TreinoFormModal DEBUG] MODO CRIAÇÃO.");
        const defaultTipo = alunoIdProp ? "individual" : "modelo";
        form.reset({ 
            titulo: "", descricao: null, tipo: defaultTipo, tipoOrganizacaoRotina: "numerico", 
            alunoId: alunoIdProp || null, pastaId: null, statusModelo: defaultTipo === 'modelo' ? "rascunho" : null, 
            dataValidade: null, totalSessoesRotinaPlanejadas: null, 
        });
        // console.log("  [DEBUG Criação] form.reset executado com:", form.getValues());
        setDiasDeTreinoState([]);
      }
      // Reseta estados de UI do formulário de dia e seleção de exercício
      setShowDiaForm(false); 
      setDiaFormValues({ identificadorDia: '', nomeSubFicha: '' }); 
      setEditingDiaTempId(null);
      setIsSelectExerciseModalOpen(false); 
      setDiaAtivoParaAdicionarExercicio(null);
    }
  }, [open, rotinaParaEditar, form, alunoIdProp]);


  // *** AJUSTE APLICADO AQUI ***
  // useEffect para sincronizar tipo e campos relacionados
  const currentWatchedTipo = form.watch("tipo"); // Assiste ao valor fora do useEffect

  useEffect(() => {
    const isCurrentlyEditingHook = !!(rotinaParaEditar && rotinaParaEditar._id);
    const currentFormValues = form.getValues(); // Pega os valores atuais uma vez

    // Garante que o tipo não seja alterado indevidamente
    if (isCurrentlyEditingHook && rotinaParaEditar?.tipo === 'individual' && currentWatchedTipo !== 'individual') {
        form.setValue("tipo", "individual", { shouldValidate: true, shouldDirty: true });
    } else if (!isCurrentlyEditingHook && alunoIdProp && currentWatchedTipo !== 'individual') { 
        form.setValue("tipo", "individual", { shouldValidate: true, shouldDirty: true });
    }
    
    // Usa form.getValues("tipo") para pegar o valor mais recente após possíveis setValue
    const finalTipo = form.getValues("tipo"); // Pega o tipo após a lógica acima

    if (finalTipo === 'modelo') {
        if (currentFormValues.alunoId !== null) form.setValue('alunoId', null, { shouldDirty: true });
        if (currentFormValues.dataValidade !== null) form.setValue('dataValidade', null, { shouldDirty: true });
        if (currentFormValues.totalSessoesRotinaPlanejadas !== null) form.setValue('totalSessoesRotinaPlanejadas', null, { shouldDirty: true });
        if (!currentFormValues.statusModelo) { 
            form.setValue('statusModelo', 'rascunho', { shouldDirty: true });
        }
    } else if (finalTipo === 'individual') {
        if (currentFormValues.pastaId !== null) form.setValue('pastaId', null, { shouldDirty: true });
        if (currentFormValues.statusModelo !== null) form.setValue('statusModelo', null, { shouldDirty: true });
        
        if (alunoIdProp && currentFormValues.alunoId !== alunoIdProp) { 
             form.setValue('alunoId', alunoIdProp, { shouldDirty: true, shouldValidate: true });
        } else if (!alunoIdProp && isCurrentlyEditingHook && rotinaParaEditar?.alunoId) {
            const alunoIdDaRotina = typeof rotinaParaEditar.alunoId === 'object' && rotinaParaEditar.alunoId !== null
                ? rotinaParaEditar.alunoId._id
                : rotinaParaEditar.alunoId as string | null;

            if (alunoIdDaRotina && currentFormValues.alunoId !== alunoIdDaRotina) {
                form.setValue('alunoId', alunoIdDaRotina, { shouldDirty: true, shouldValidate: true });
            }
        }
    }

    if (!currentFormValues.tipoOrganizacaoRotina) { 
        form.setValue('tipoOrganizacaoRotina', 'numerico', { shouldDirty: true }); 
    }
  }, [currentWatchedTipo, rotinaParaEditar, alunoIdProp, form]); // 'form' é estável.
  // *** FIM DO AJUSTE ***


  const handleDiaInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => { 
    const { name, value } = e.target; 
    setDiaFormValues(prev => ({ ...prev, [name]: value })); 
  };

  const handleAddOrUpdateDia = () => {
    if (!diaFormValues.identificadorDia || !diaFormValues.identificadorDia.trim()) { 
      toast({ title: "Erro", description: "O identificador do dia é obrigatório.", variant: "destructive" }); 
      return; 
    }
    // Verifica se o dia já existe (apenas para 'diasDaSemana' e se não estiver editando o mesmo dia)
    if (form.getValues('tipoOrganizacaoRotina') === 'diasDaSemana' && 
        (!editingDiaTempId || diasDeTreinoState.find(d => d.tempId === editingDiaTempId)?.identificadorDia !== diaFormValues.identificadorDia) ) {
        const diaJaExiste = diasDeTreinoState.some(dia => dia.identificadorDia.toLowerCase() === diaFormValues.identificadorDia.toLowerCase());
        if (diaJaExiste) { 
          toast({ title: "Erro", description: `O dia "${diaFormValues.identificadorDia}" já foi adicionado.`, variant: "destructive" }); 
          return; 
        }
    }

    setDiasDeTreinoState(prevDias => {
        const newOrUpdatedDias = [...prevDias];
        if (editingDiaTempId) { // Editando um dia existente
            const index = newOrUpdatedDias.findIndex(d => d.tempId === editingDiaTempId);
            if (index > -1) { 
              newOrUpdatedDias[index] = { 
                ...newOrUpdatedDias[index], 
                identificadorDia: diaFormValues.identificadorDia, 
                nomeSubFicha: diaFormValues.nomeSubFicha || null 
              }; 
            }
        } else { // Adicionando um novo dia
            newOrUpdatedDias.push({ 
              ...diaFormValues, 
              tempId: `new-dia-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`, 
              ordemNaRotina: newOrUpdatedDias.length, 
              exerciciosDoDia: [] 
            });
        }
        // Reordena e atualiza ordemNaRotina
        return newOrUpdatedDias.map((d, i) => ({ ...d, ordemNaRotina: i }));
    });
    setShowDiaForm(false); 
    setDiaFormValues({ identificadorDia: '', nomeSubFicha: '' }); 
    setEditingDiaTempId(null);
  };

  const handleEditDia = (dia: DiaDeTreinoStateItem) => { 
    setDiaFormValues({ identificadorDia: dia.identificadorDia, nomeSubFicha: dia.nomeSubFicha || '' }); 
    setEditingDiaTempId(dia.tempId); 
    setShowDiaForm(true); 
  };

  const handleRemoveDia = (tempIdToRemove: string) => { 
    setDiasDeTreinoState(prevDias => prevDias.filter(d => d.tempId !== tempIdToRemove).map((d, index) => ({ ...d, ordemNaRotina: index }))); 
  };

  const handleOpenSelectExerciseModal = (diaTempId: string) => { 
    setDiaAtivoParaAdicionarExercicio(diaTempId); 
    setIsSelectExerciseModalOpen(true); 
  };

  const handleExercisesSelected = useCallback((exerciciosSelecionadosDaLib: BibliotecaExercicio[]) => {
    if (!diaAtivoParaAdicionarExercicio) return;
    setDiasDeTreinoState(prevDias =>
        prevDias.map(dia => {
            if (dia.tempId === diaAtivoParaAdicionarExercicio) {
                const novosExercicios: ExercicioNoDiaState[] = exerciciosSelecionadosDaLib.map((exLib, index) => ({
                    tempIdExercicio: `new-ex-${dia.tempId}-${Date.now()}-${index}`,
                    exercicioId: exLib._id, 
                    nomeExercicio: exLib.nome, 
                    grupoMuscular: exLib.grupoMuscular,
                    categoria: exLib.categoria, 
                    ordemNoDia: dia.exerciciosDoDia.length + index,
                    series: '', repeticoes: '', carga: '', descanso: '', observacoes: '', // Campos vazios por padrão
                }));
                return { ...dia, exerciciosDoDia: [...dia.exerciciosDoDia, ...novosExercicios] };
            }
            return dia;
        })
    );
    setIsSelectExerciseModalOpen(false); 
    setDiaAtivoParaAdicionarExercicio(null);
  }, [diaAtivoParaAdicionarExercicio]);

  const handleExercicioDetailChange = ( 
    diaTempId: string, 
    exercicioTempId: string, 
    // Define explicitamente os campos que podem ser alterados
    fieldName: 'series' | 'repeticoes' | 'carga' | 'descanso' | 'observacoes', 
    value: string 
  ) => {
    setDiasDeTreinoState(prevDias => 
      prevDias.map(dia => 
        dia.tempId === diaTempId 
          ? { ...dia, exerciciosDoDia: dia.exerciciosDoDia.map(ex => 
              ex.tempIdExercicio === exercicioTempId 
                ? { ...ex, [fieldName]: value } 
                : ex 
            )} 
          : dia 
      )
    );
  };

  const handleRemoveExercicioFromDia = (diaTempId: string, exercicioTempId: string) => {
    setDiasDeTreinoState(prevDias => 
      prevDias.map(dia => 
        dia.tempId === diaTempId 
          ? { ...dia, exerciciosDoDia: dia.exerciciosDoDia.filter(ex => ex.tempIdExercicio !== exercicioTempId).map((ex, index) => ({ ...ex, ordemNoDia: index }))} 
          : dia 
      )
    );
  };

  const mutation = useMutation<RotinaListagemItem, Error, RotinaMetadataFormValues>({
    mutationFn: async (formDataFromHook) => {
      const payload: Partial<RotinaApiPayload> = { ...formDataFromHook };
      payload.dataValidade = formDataFromHook.dataValidade ? formDataFromHook.dataValidade : null; 
      
      if (formDataFromHook.tipo === 'modelo') { 
        payload.alunoId = undefined; // Garante que não envia alunoId para modelo
        payload.totalSessoesRotinaPlanejadas = undefined; 
        if (!payload.statusModelo) payload.statusModelo = "rascunho"; 
      } else { // Tipo individual
        payload.pastaId = undefined; // Garante que não envia pastaId para individual
        payload.statusModelo = undefined; 
        if (!payload.alunoId) { 
          throw new Error("Aluno é obrigatório para rotinas individuais."); 
        } 
      }

      payload.diasDeTreino = diasDeTreinoState.map(dia => ({
          _id: dia._id, // Envia _id do dia se existir (para PUT)
          identificadorDia: dia.identificadorDia,
          nomeSubFicha: dia.nomeSubFicha || undefined, // Envia undefined se for null ou vazio
          ordemNaRotina: dia.ordemNaRotina,
          exerciciosDoDia: (dia.exerciciosDoDia || []).map(exState => ({
              _id: exState._idSubDocExercicio, // Envia _id do exercício no dia se existir (para PUT)
              exercicioId: exState.exercicioId, // Apenas o ID do exercício da biblioteca
              series: exState.series, 
              repeticoes: exState.repeticoes, 
              carga: exState.carga,
              descanso: exState.descanso, 
              observacoes: exState.observacoes, 
              ordemNoDia: exState.ordemNoDia,
          })),
      }));
      
      delete (payload as any).exercicios; // Remove a estrutura legada se existir no payload

      const currentIsEditingForMutation = !!(rotinaParaEditar && rotinaParaEditar._id);
      const endpoint = currentIsEditingForMutation ? `/api/treinos/${rotinaParaEditar!._id}` : "/api/treinos";
      const method = currentIsEditingForMutation ? "PUT" : "POST";
      // console.log(`[TreinoFormModal DEBUG] PAYLOAD FINAL ENVIADO PARA API (${method} ${endpoint}):`, JSON.parse(JSON.stringify(payload)));
      return apiRequest<RotinaListagemItem>(method, endpoint, payload as RotinaApiPayload);
    },
    onSuccess: (savedRotina) => {
        const currentIsEditingOnSuccess = !!(rotinaParaEditar && rotinaParaEditar._id);
        toast({ title: "Sucesso!", description: `Rotina "${savedRotina.titulo}" ${currentIsEditingOnSuccess ? 'atualizada' : 'criada'} com sucesso.`});
        queryClientHook.invalidateQueries({ queryKey: TREINOS_QUERY_KEY }); // Invalida a lista geral
        if (currentIsEditingOnSuccess && rotinaParaEditar?._id) { 
          queryClientHook.invalidateQueries({ queryKey: [`/api/treinos/${rotinaParaEditar._id}`] }); // Invalida o cache específico da rotina
        }
        if (form.getValues("tipo") === 'modelo') { 
          queryClientHook.invalidateQueries({ queryKey: ["pastasParaRotinaForm"] }); // Invalida pastas se for modelo
           queryClientHook.invalidateQueries({ queryKey: ["/api/pastas/treinos"] });
        }
        
        const alunoIdAfetado = form.getValues("alunoId") || 
                              (typeof rotinaParaEditar?.alunoId === 'object' && rotinaParaEditar.alunoId?._id) || 
                              (typeof rotinaParaEditar?.alunoId === 'string' ? rotinaParaEditar.alunoId : null);
        if (alunoIdAfetado) {
            queryClientHook.invalidateQueries({ queryKey: ["fichasAluno", alunoIdAfetado] }); // Invalida as fichas do aluno
        }
        onSuccess(savedRotina);
        onClose(); // Fecha o modal
    },
    onError: (error: Error) => {
        const currentIsEditingOnError = !!(rotinaParaEditar && rotinaParaEditar._id);
        console.error("Erro ao salvar rotina:", error);
        toast({ variant: "destructive", title: `Erro ao ${currentIsEditingOnError ? 'Atualizar' : 'Criar'} Rotina`, description: error.message || "Ocorreu um problema." });
    },
  });

  function onSubmit(data: RotinaMetadataFormValues) { 
    // console.log("[TreinoFormModal DEBUG] onSubmit chamado com data do RHF:", data);
    // console.log("[TreinoFormModal DEBUG] Estado diasDeTreinoState no momento do submit:", JSON.parse(JSON.stringify(diasDeTreinoState)));
    mutation.mutate(data); 
  }
  
  // Memoiza os dias da semana já utilizados para desabilitar opções no select
  const diasDaSemanaUtilizados = useMemo(() => { 
    if (watchedTipoOrganizacao === 'diasDaSemana') { 
      return diasDeTreinoState
        // Não considera o dia que está sendo editado atualmente na lista de "já utilizados"
        .filter(dia => !editingDiaTempId || dia.tempId !== editingDiaTempId) 
        .map(dia => dia.identificadorDia); 
    } 
    return []; 
  }, [diasDeTreinoState, editingDiaTempId, watchedTipoOrganizacao]);

  if (!open) return null; // Não renderiza nada se o modal não estiver aberto

  return (
    <Dialog open={open} onOpenChange={(openStatus) => { if (!openStatus) onClose(); }}>
      <DialogContent className="sm:max-w-3xl w-[95vw] md:w-[80vw] lg:w-[70vw] xl:w-[60vw] max-h-[95vh] flex flex-col p-0">
        <DialogHeader className="p-4 md:p-6 pb-4 border-b bg-background z-10 shrink-0">
          <DialogTitle>{isEditing ? "Editar Rotina de Treino" : "Nova Rotina de Treino"}</DialogTitle>
          <DialogDescription>{isEditing ? "Atualize os detalhes da rotina e seus dias de treino." : "Defina os detalhes da rotina e adicione os dias de treino."}</DialogDescription>
        </DialogHeader>

        <div className="flex-grow overflow-y-auto"> {/* Área de scroll para o conteúdo do formulário */}
            <Form {...form}>
            <form id="rotinaFormHandler" onSubmit={form.handleSubmit(onSubmit)} className="px-4 md:px-6 py-4 space-y-6">
                {/* Campos de metadados da rotina */}
                <FormField control={form.control} name="titulo" render={({ field }) => ( <FormItem><FormLabel>Nome da Rotina*</FormLabel><FormControl><Input placeholder="Ex: Programa de Hipertrofia Semanal" {...field} /></FormControl><FormMessage /></FormItem> )}/>
                <FormField control={form.control} name="tipoOrganizacaoRotina" render={({ field }) => ( <FormItem><FormLabel>Organização dos Dias de Treino*</FormLabel><Select onValueChange={(value) => { field.onChange(value); if (showDiaForm) { setDiaFormValues(prev => ({...prev, identificadorDia: ''})); } }} value={field.value ?? "numerico"} > <FormControl><SelectTrigger><SelectValue placeholder="Como os treinos serão divididos?" /></SelectTrigger></FormControl> <SelectContent> {OPCOES_TIPO_DOS_TREINOS.map(opcao => ( <SelectItem key={opcao.value} value={opcao.value}>{opcao.label}</SelectItem> ))} </SelectContent> </Select> <FormDescription className="text-xs">Define como os dias (Ex: A, B, C ou Seg, Ter, Qua) são gerenciados.</FormDescription> <FormMessage /> </FormItem> )}/>
                <FormField control={form.control} name="descricao" render={({ field }) => ( <FormItem><FormLabel>Observações/Instruções Gerais</FormLabel><FormControl><Textarea placeholder="Detalhes adicionais sobre a rotina, recomendações, etc." {...field} value={field.value ?? ""} rows={2} /></FormControl><FormMessage /></FormItem> )}/>
                
                <FormField 
                  control={form.control} 
                  name="tipo" 
                  render={({ field }) => ( 
                    <FormItem>
                      <FormLabel>Tipo de Rotina*</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        value={field.value} 
                        // Desabilita a troca de tipo se estiver editando uma rotina individual já salva
                        // ou se um alunoId foi passado via prop (criando para aluno específico)
                        disabled={(isEditing && rotinaParaEditar?.tipo === 'individual') || !!alunoIdProp}
                      >
                        <FormControl><SelectTrigger><SelectValue placeholder="Selecione o tipo" /></SelectTrigger></FormControl>
                        <SelectContent>
                          <SelectItem value="modelo">Modelo (Template)</SelectItem>
                          <SelectItem value="individual">Individual (Para um aluno)</SelectItem>
                        </SelectContent>
                      </Select>
                      {((isEditing && rotinaParaEditar?.tipo === 'individual') || !!alunoIdProp) && 
                        <FormDescription className="text-xs">O tipo da rotina não pode ser alterado neste contexto.</FormDescription>
                      }
                      <FormMessage />
                    </FormItem> 
                  )}
                />
                
                {/* Campos específicos para tipo "modelo" */}
                {watchedTipoRotina === 'modelo' && ( <> 
                  <FormField control={form.control} name="pastaId" render={({ field }) => ( <FormItem><FormLabel className="flex items-center"><FolderIcon className="w-4 h-4 mr-1.5 text-gray-500" /> Pasta de Modelos</FormLabel><Select  onValueChange={(value) => field.onChange(value === "nenhuma" ? null : value)}  value={field.value ?? "nenhuma"} disabled={isLoadingPastas} > <FormControl><SelectTrigger><SelectValue placeholder="Opcional: organizar em uma pasta" /></SelectTrigger></FormControl> <SelectContent> <SelectItem value="nenhuma">Nenhuma (Fora de pastas)</SelectItem> {isLoadingPastas && <div className="p-2 text-sm text-muted-foreground">Carregando pastas...</div>} {!isLoadingPastas && pastas.map(pasta => (<SelectItem key={pasta._id} value={pasta._id}>{pasta.nome}</SelectItem>))} </SelectContent> </Select> <FormMessage /> </FormItem> )}/> 
                  <FormField control={form.control} name="statusModelo" render={({ field }) => (  <FormItem> <FormLabel className="flex items-center"><Activity className="w-4 h-4 mr-1.5 text-gray-500" /> Status do Modelo*</FormLabel> <Select onValueChange={field.onChange} value={field.value ?? "rascunho"}> <FormControl><SelectTrigger><SelectValue placeholder="Status da rotina modelo" /></SelectTrigger></FormControl> <SelectContent> <SelectItem value="rascunho">Rascunho (Não visível para alunos)</SelectItem> <SelectItem value="ativo">Ativo (Pronto para uso)</SelectItem> <SelectItem value="arquivado">Arquivado (Antigo, não listado)</SelectItem> </SelectContent> </Select> <FormMessage /> </FormItem>  )}/> 
                </> )}
                
                {/* Campos específicos para tipo "individual" */}
                {watchedTipoRotina === 'individual' && ( <>
                <FormField control={form.control} name="alunoId" render={({ field }) => ( 
                    <FormItem> 
                        <FormLabel>Aluno*</FormLabel> 
                        <Select  onValueChange={field.onChange}  value={field.value ?? undefined}  
                                 // Desabilita se estiver editando uma rotina que já tem aluno OU se alunoIdProp foi passado
                                 disabled={(isEditing && !!rotinaParaEditar?.alunoId) || !!alunoIdProp || isLoadingAlunos} 
                        > 
                            <FormControl><SelectTrigger><SelectValue placeholder={isLoadingAlunos ? "Carregando..." : "Selecione o aluno"} /></SelectTrigger></FormControl> 
                            <SelectContent> 
                                {isLoadingAlunos && <div className="p-2 text-sm text-muted-foreground">Carregando alunos...</div>} 
                                {!isLoadingAlunos && alunosDisponiveis.length === 0 && <div className="p-2 text-sm text-muted-foreground">Nenhum aluno encontrado.</div>} 
                                {!isLoadingAlunos && alunosDisponiveis.map((aluno: Aluno) => (<SelectItem key={aluno._id} value={aluno._id}>{aluno.nome}</SelectItem>))} 
                            </SelectContent> 
                        </Select> 
                        {((isEditing && !!rotinaParaEditar?.alunoId) || !!alunoIdProp) && 
                            <FormDescription className="text-xs">O aluno não pode ser alterado neste contexto.</FormDescription>
                        }
                        <FormMessage /> 
                    </FormItem> 
                )}/>
                <FormField control={form.control} name="dataValidade" render={({ field }) => (
                    <FormItem className="flex flex-col">
                        <FormLabel>Válido Até</FormLabel>
                        <Popover> <PopoverTrigger asChild>
                                <Button variant="outline" className={`w-full justify-start pl-3 text-left font-normal ${!field.value && "text-muted-foreground"}`} ref={field.ref} > {field.value ? format(field.value, "PPP", { locale: ptBR }) : <span>Data de expiração (opcional)</span>} <CalendarIcon className="ml-auto h-4 w-4 opacity-50" /> </Button>
                        </PopoverTrigger> <PopoverContent className="w-auto p-0" align="start"> <Calendar mode="single" selected={field.value ?? undefined} onSelect={field.onChange}  disabled={(date) => date < startOfToday()} initialFocus /> </PopoverContent> </Popover> <FormMessage />
                    </FormItem>
                )}/>
                <FormField control={form.control} name="totalSessoesRotinaPlanejadas" render={({ field }) => (  <FormItem> <FormLabel>Nº de Sessões Planejadas</FormLabel> <FormControl> <Input  type="number"  placeholder="Ex: 12 (opcional)"  value={field.value === null || field.value === undefined ? "" : String(field.value)}  onChange={e => {  const val = e.target.value;  field.onChange(val.trim() === '' ? null : Number(val)); }}  min="0"  /> </FormControl> <FormDescription className="text-xs">Opcional. Defina um limite de sessões para esta rotina.</FormDescription> <FormMessage /> </FormItem>  )}/> 
                </> )}
                
                {/* Seção de Dias de Treino */}
                <div className="pt-6 mt-6 border-t dark:border-gray-700">
                    <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold">Dias de Treino da Rotina</h3>
                        <Button type="button" size="sm" variant="outline" onClick={() => { setDiaFormValues({ identificadorDia: '', nomeSubFicha: '' }); setEditingDiaTempId(null); setShowDiaForm(true); }}>
                        <PlusCircle className="w-4 h-4 mr-2"/> Adicionar Dia de Treino
                        </Button>
                    </div>
                    {/* Formulário para adicionar/editar um dia de treino */}
                    {showDiaForm && (
                        <Card className="p-4 mb-4 border-dashed dark:border-gray-600 bg-slate-50 dark:bg-slate-800/30">
                        <CardContent className="p-0 space-y-4">
                            <div>
                                <Label htmlFor="identificadorDiaForm" className="text-sm font-medium">
                                    {watchedTipoOrganizacao === 'diasDaSemana' && "Selecione o Dia da Semana*"}
                                    {watchedTipoOrganizacao === 'numerico' && "Número do Dia* (Ex: 1)"}
                                    {watchedTipoOrganizacao === 'livre' && "Identificador do Dia* (Ex: Peito/Tríceps)"}
                                </Label>
                                {watchedTipoOrganizacao === 'diasDaSemana' ? (
                                    <Select value={diaFormValues.identificadorDia} onValueChange={(value) => { setDiaFormValues(prev => ({ ...prev, identificadorDia: value })); }} >
                                        <SelectTrigger className="mt-1"> <SelectValue placeholder="Selecione o dia" /> </SelectTrigger>
                                        <SelectContent> {diasDaSemanaOptions.map(opt => ( <SelectItem key={opt.value} value={opt.value} disabled={diasDaSemanaUtilizados.includes(opt.value) && diaFormValues.identificadorDia !== opt.value} > {opt.label} </SelectItem> ))} </SelectContent>
                                    </Select>
                                ) : watchedTipoOrganizacao === 'numerico' ? (
                                    <Input id="identificadorDiaForm" name="identificadorDia" type="number" value={diaFormValues.identificadorDia} onChange={handleDiaInputChange} placeholder={`Ex: ${diasDeTreinoState.filter(d => !editingDiaTempId || d.tempId !== editingDiaTempId).length + 1}`} className="mt-1" min="1" />
                                ) : ( // livre
                                    <Input id="identificadorDiaForm" name="identificadorDia" value={diaFormValues.identificadorDia} onChange={handleDiaInputChange} placeholder="Ex: Peito e Tríceps, Dia de Força" className="mt-1" />
                                )}
                                <p className="text-xs text-muted-foreground mt-1">
                                    {watchedTipoOrganizacao === 'diasDaSemana' && "Selecione um dia da semana."}
                                    {watchedTipoOrganizacao === 'numerico' && `Sugestão para próximo dia: ${diasDeTreinoState.filter(d => !editingDiaTempId || d.tempId !== editingDiaTempId).length + 1}`}
                                    {watchedTipoOrganizacao === 'livre' && "Use um nome curto e descritivo."}
                                </p>
                            </div>
                            <div>
                                <Label htmlFor="nomeSubFichaForm" className="text-sm font-medium">Nome Específico do Treino (Opcional)</Label>
                                <Input id="nomeSubFichaForm" name="nomeSubFicha" value={diaFormValues.nomeSubFicha ?? ""} onChange={handleDiaInputChange} placeholder="Ex: Foco em Peito e Tríceps" className="mt-1" />
                            </div>
                            <div className="flex justify-end gap-2 pt-2">
                              <Button type="button" variant="ghost" onClick={() => {setShowDiaForm(false); setEditingDiaTempId(null); setDiaFormValues({identificadorDia: '', nomeSubFicha: ''});}}>Cancelar</Button>
                              <Button type="button" onClick={handleAddOrUpdateDia}>{editingDiaTempId ? "Atualizar Dia" : "Confirmar Dia"}</Button>
                            </div>
                        </CardContent>
                        </Card>
                    )}
                    {/* Mensagem se não houver dias de treino */}
                    {diasDeTreinoState.length === 0 && !showDiaForm && ( <div className="text-center py-6"> <Activity className="mx-auto h-12 w-12 text-gray-400" /> <h3 className="mt-2 text-sm font-medium text-gray-900 dark:text-gray-100">Nenhum dia de treino adicionado</h3> <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">Comece adicionando o primeiro dia de treino da rotina.</p> </div> )}

                    {/* Lista de dias de treino (Accordion) */}
                    {diasDeTreinoState.length > 0 && (
                        <Accordion type="multiple" className="w-full space-y-2" defaultValue={diasDeTreinoState.map(d => d.tempId)}>
                        {diasDeTreinoState.map((dia) => (
                            <AccordionItem key={dia.tempId} value={dia.tempId} className="border rounded-md bg-white dark:bg-slate-800/70 shadow-sm">
                            <AccordionTrigger className="px-3 py-2 hover:no-underline text-sm group">
                                <div className="flex items-center justify-between w-full">
                                <div className="flex items-center gap-2">
                                    <GripVertical className="w-4 h-4 text-muted-foreground cursor-grab group-hover:text-primary transition-colors" />
                                    <span className="font-medium text-gray-700 dark:text-gray-200">{dia.identificadorDia}</span>
                                    {dia.nomeSubFicha && <span className="text-xs text-gray-500 dark:text-gray-400">- {dia.nomeSubFicha}</span>}
                                </div>
                                <div className="flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                                    <Button type="button" variant="ghost" size="icon" className="h-7 w-7" onClick={(e) => {e.stopPropagation(); handleEditDia(dia);}} title="Editar dia"> <Edit className="w-3.5 h-3.5"/> </Button>
                                    <Button type="button" variant="ghost" size="icon" className="h-7 w-7 text-destructive hover:text-destructive" onClick={(e) => {e.stopPropagation(); handleRemoveDia(dia.tempId);}} title="Remover dia"> <Trash2 className="w-3.5 h-3.5"/> </Button>
                                </div>
                                </div>
                            </AccordionTrigger>
                            <AccordionContent className="px-4 pb-3 pt-0 border-t border-gray-200 dark:border-slate-700/50">
                                <div className="pt-3 space-y-3">
                                    {/* Lista de exercícios dentro do dia */}
                                    {dia.exerciciosDoDia && dia.exerciciosDoDia.length > 0 ? (
                                        dia.exerciciosDoDia.map(ex => (
                                            <Card key={ex.tempIdExercicio} className="p-3 bg-slate-50 dark:bg-slate-700/50">
                                                <div className="flex justify-between items-start mb-2">
                                                    <div>
                                                        <p className="text-sm font-medium">{ex.nomeExercicio}</p>
                                                        <p className="text-xs text-muted-foreground">
                                                            {ex.grupoMuscular}{ex.categoria && ` - ${ex.categoria}`}
                                                        </p>
                                                    </div>
                                                    <Button type="button" variant="ghost" size="icon" className="h-6 w-6 text-destructive hover:text-destructive shrink-0" onClick={() => handleRemoveExercicioFromDia(dia.tempId, ex.tempIdExercicio)} title="Remover exercício do dia" > <XCircle className="w-4 h-4" /> </Button>
                                                </div>
                                                {/* Inputs para detalhes do exercício */}
                                                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-x-2 gap-y-3 items-end">
                                                    <FormItem className="flex-grow"> <FormLabel htmlFor={`${ex.tempIdExercicio}-series`} className="text-xs mb-1 block">Séries</FormLabel> <Input id={`${ex.tempIdExercicio}-series`} value={ex.series || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'series', e.target.value)} placeholder="Ex: 3" className="text-xs h-8" /> </FormItem>
                                                    <FormItem className="flex-grow"> <FormLabel htmlFor={`${ex.tempIdExercicio}-repeticoes`} className="text-xs mb-1 block">Repetições</FormLabel> <Input id={`${ex.tempIdExercicio}-repeticoes`} value={ex.repeticoes || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'repeticoes', e.target.value)} placeholder="Ex: 10-12" className="text-xs h-8" /> </FormItem>
                                                    <FormItem className="flex-grow"> <FormLabel htmlFor={`${ex.tempIdExercicio}-carga`} className="text-xs mb-1 block">Carga</FormLabel> <Input id={`${ex.tempIdExercicio}-carga`} value={ex.carga || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'carga', e.target.value)} placeholder="Ex: 20kg" className="text-xs h-8" /> </FormItem>
                                                    <FormItem className="flex-grow"> <FormLabel htmlFor={`${ex.tempIdExercicio}-descanso`} className="text-xs mb-1 block">Descanso</FormLabel> <Input id={`${ex.tempIdExercicio}-descanso`} value={ex.descanso || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'descanso', e.target.value)} placeholder="Ex: 60s" className="text-xs h-8" /> </FormItem>
                                                    <FormItem className="col-span-2 sm:col-span-3 md:col-span-5"> <FormLabel htmlFor={`${ex.tempIdExercicio}-observacoes`} className="text-xs mb-1 block">Obs.</FormLabel> <Textarea id={`${ex.tempIdExercicio}-observacoes`} value={ex.observacoes || ''} onChange={(e) => handleExercicioDetailChange(dia.tempId, ex.tempIdExercicio, 'observacoes', e.target.value)} placeholder="Ex: Cadência 2020, até a falha..." className="text-xs min-h-[32px] py-1" rows={1} /> </FormItem>
                                                </div>
                                            </Card>
                                        ))
                                    ) : ( <p className="text-xs text-muted-foreground italic text-center py-2"> Nenhum exercício adicionado a este dia. </p> )}
                                    <Button type="button" variant="outline" size="sm" className="w-full mt-2 border-dashed hover:border-solid" onClick={() => handleOpenSelectExerciseModal(dia.tempId)} > <ListPlus className="w-4 h-4 mr-2" /> Adicionar Exercício ao Dia: {dia.identificadorDia} </Button>
                                </div>
                            </AccordionContent>
                            </AccordionItem>
                        ))}
                        </Accordion>
                    )}
                </div>
            </form>
            </Form>
        </div>

        <DialogFooter className="p-4 md:p-6 pt-4 border-t bg-background z-10 shrink-0">
          <DialogClose asChild><Button variant="outline" type="button" disabled={mutation.isPending}>Cancelar</Button></DialogClose>
          <Button 
            type="submit" 
            form="rotinaFormHandler" 
            disabled={mutation.isPending || (form.getValues("tipo") === "individual" && !form.getValues("alunoId") && !isEditing )}
          >
            {mutation.isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isEditing ? "Salvar Alterações" : "Criar Rotina"}
          </Button>
        </DialogFooter>
      </DialogContent>

      {/* Modal para selecionar exercícios da biblioteca */}
      {isSelectExerciseModalOpen && diaAtivoParaAdicionarExercicio && (
        <SelectExerciseModal
            isOpen={isSelectExerciseModalOpen}
            onClose={() => { setIsSelectExerciseModalOpen(false); setDiaAtivoParaAdicionarExercicio(null); }}
            onExercisesSelect={handleExercisesSelected}
        />
      )}
    </Dialog>
  );
}

==== ./client/src/components/dialogs/VideoPlayerModal.tsx ====

import { Dialog, DialogContent } from "@/components/ui/dialog";

interface VideoPlayerModalProps {
  videoUrl: string | null;
  onClose: () => void;
}

export default function VideoPlayerModal({ videoUrl, onClose }: VideoPlayerModalProps) {
  return (
    <Dialog open={!!videoUrl} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl w-full aspect-video">
        {videoUrl && (
          <iframe
            src={videoUrl.includes("watch?v=") ? videoUrl.replace("watch?v=", "embed/") : videoUrl}
            className="w-full h-full rounded-md"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
            title="Visualizador de Vídeo"
          ></iframe>
        )}
      </DialogContent>
    </Dialog>
  );
}

==== ./client/src/components/dialogs/admin/VisualizarPersonalModal.tsx ====

// client/src/components/dialogs/admin/VisualizarPersonalModal.tsx
import React from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Badge } from '@/components/ui/badge';
import { Loader2, UserCircle, Mail, ShieldCheck, CalendarDays, Link2, Users, BarChartHorizontalBig, Info } from 'lucide-react';
// ***** CAMINHO DO IMPORT CORRIGIDO *****
import { PersonalDetalhes } from '@shared/types/personal'; 

interface VisualizarPersonalModalProps {
  isOpen: boolean;
  onClose: () => void;
  personal: PersonalDetalhes | null;
  isLoading?: boolean;
}

const formatDate = (dateString?: Date | string): string => {
  if (!dateString) return 'N/A';
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
        const parts = String(dateString).split('/');
        if (parts.length === 3) {
            // Tenta DD/MM/YYYY
            const parsedDate = new Date(`${parts[2]}-${parts[1]}-${parts[0]}`);
            if (!isNaN(parsedDate.getTime())) {
                return parsedDate.toLocaleDateString('pt-BR', {
                    day: '2-digit', month: '2-digit', year: 'numeric',
                });
            }
        }
        return 'Data inválida'; // Retorna se não conseguir parsear
    }
    return date.toLocaleDateString('pt-BR', {
      day: '2-digit', month: '2-digit', year: 'numeric',
    });
  } catch (e) {
    return String(dateString); // Fallback para a string original em caso de erro inesperado
  }
};

const InfoItem: React.FC<{ label: string; value?: string | number | React.ReactNode; isMonospace?: boolean; icon?: React.ReactNode }> = ({ label, value, isMonospace, icon }) => (
  <div className="flex flex-col sm:flex-row sm:items-start sm:justify-between py-2.5 border-b border-gray-200 dark:border-gray-700 last:border-b-0">
    <dt className="text-sm font-medium text-gray-500 dark:text-gray-400 flex items-center min-w-[160px] sm:min-w-fit mb-1 sm:mb-0">
      {icon && <span className="mr-2 shrink-0">{icon}</span>}
      {label}:
    </dt>
    <dd className={`text-sm text-gray-900 dark:text-gray-100 sm:text-right ${isMonospace ? 'font-mono text-xs break-all' : 'break-words'}`}>
      {value ?? <span className="text-gray-400 dark:text-gray-500 italic">Não informado</span>}
    </dd>
  </div>
);

export default function VisualizarPersonalModal({ isOpen, onClose, personal, isLoading }: VisualizarPersonalModalProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-lg md:max-w-xl">
        <DialogHeader>
          <DialogTitle className="flex items-center text-2xl">
            <UserCircle className="mr-3 h-7 w-7 text-primary" />
            Detalhes do Personal Trainer
          </DialogTitle>
          {personal && !isLoading && (
            <DialogDescription>
              Informações detalhadas sobre {personal.nome}.
            </DialogDescription>
          )}
        </DialogHeader>
        
        {isLoading && (
          <div className="py-12 flex flex-col justify-center items-center">
            <Loader2 className="h-10 w-10 animate-spin text-primary" />
            <span className="mt-3 text-gray-600 dark:text-gray-400">Carregando detalhes...</span>
          </div>
        )}

        {!isLoading && personal && (
          <div className="py-4 space-y-1 max-h-[65vh] overflow-y-auto pr-3 -mr-3 custom-scrollbar">
            <InfoItem label="Nome Completo" value={personal.nome} icon={<UserCircle className="h-4 w-4 text-gray-500 dark:text-gray-400"/>} />
            <InfoItem label="Email" value={personal.email} icon={<Mail className="h-4 w-4 text-gray-500 dark:text-gray-400"/>} />
            <InfoItem 
              label="Função (Role)" 
              icon={<ShieldCheck className="h-4 w-4 text-gray-500 dark:text-gray-400"/>}
              value={
                <Badge variant={personal.role === 'Admin' ? 'destructive' : 'default'}
                       className={`font-medium ${personal.role === 'Admin' ? 
                                  'bg-red-100 text-red-700 dark:bg-red-900/60 dark:text-red-300 border-red-300 dark:border-red-700' : 
                                  'bg-blue-100 text-blue-700 dark:bg-sky-900/60 dark:text-sky-300 border-blue-300 dark:border-sky-700'}`}>
                  {personal.role === 'Admin' && <ShieldCheck className="mr-1.5 h-3.5 w-3.5" />}
                  {personal.role}
                </Badge>
              }
            />
            <InfoItem label="Data de Cadastro" value={formatDate(personal.createdAt)} icon={<CalendarDays className="h-4 w-4 text-gray-500 dark:text-gray-400"/>} />
            <InfoItem label="Última Atualização" value={formatDate(personal.updatedAt)} icon={<CalendarDays className="h-4 w-4 text-gray-500 dark:text-gray-400"/>} />
            
            <h3 className="text-md font-semibold pt-4 text-gray-700 dark:text-gray-300 border-t border-gray-200 dark:border-gray-700 mt-4">Assinatura</h3>
            <InfoItem 
              label="Status" 
              icon={<Info className="h-4 w-4 text-gray-500 dark:text-gray-400"/>}
              value={
                 <Badge variant={personal.statusAssinatura === 'ativa' ? 'success' : 'secondary'}
                        className={personal.statusAssinatura === 'ativa' ? 
                                   'bg-green-100 text-green-700 dark:bg-green-900/60 dark:text-green-300 border-green-300 dark:border-green-700' :
                                   'bg-gray-100 text-gray-700 dark:bg-gray-700/60 dark:text-gray-300 border-gray-300 dark:border-gray-600'}>
                    {personal.statusAssinatura || 'Não definida'}
                 </Badge>
              }
            />
            <InfoItem label="Plano ID" value={personal.planoId} icon={<BarChartHorizontalBig className="h-4 w-4 text-gray-500 dark:text-gray-400"/>} />
            <InfoItem label="Limite de Alunos" value={personal.limiteAlunos} icon={<Users className="h-4 w-4 text-gray-500 dark:text-gray-400"/>} />
            <InfoItem label="Fim da Assinatura" value={formatDate(personal.dataFimAssinatura)} icon={<CalendarDays className="h-4 w-4 text-gray-500 dark:text-gray-400"/>} />
            
            {personal.tokenCadastroAluno && (
              <>
                <h3 className="text-md font-semibold pt-4 text-gray-700 dark:text-gray-300 border-t border-gray-200 dark:border-gray-700 mt-4">Link de Cadastro de Alunos</h3>
                <InfoItem label="Token" value={personal.tokenCadastroAluno} isMonospace icon={<Link2 className="h-4 w-4 text-gray-500 dark:text-gray-400"/>} />
              </>
            )}
          </div>
        )}

        {!isLoading && !personal && isOpen && (
             <div className="py-8 text-center text-gray-500 dark:text-gray-400">Não foi possível carregar os dados do personal.</div>
        )}

        <DialogFooter className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
          <Button variant="outline" onClick={onClose}>Fechar</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

==== ./client/src/components/layout/AlunoSidebar.tsx ====

// Caminho: ./client/src/components/layout/AlunoSidebar.tsx
import React from 'react';
import { Link, useLocation } from "wouter";
// Ícones usados: Home, ListChecks, History, LogOut
import { Home, ListChecks, History, LogOut } from "lucide-react"; 
import { useAluno, AlunoLogado } from "@/context/AlunoContext";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback } from "@/components/ui/avatar"; // Removido AvatarImage se não usada

const AlunoSidebarLinks = [
  { href: "/aluno/dashboard", label: "Meu Painel", icon: Home },
  { href: "/aluno/dashboard#minhas-fichas", label: "Minhas Fichas", icon: ListChecks },
  { href: "/aluno/historico", label: "Meu Histórico", icon: History },
];

interface AlunoSidebarProps {
  onNavigate?: () => void;
}

// <<< FUNÇÕES getAlunoDisplayName e getAlunoInitials DEFINIDAS AQUI DENTRO >>>
const getAlunoDisplayName = (currentAluno: AlunoLogado | null): string => {
  if (!currentAluno) return "Aluno";
  return currentAluno.nome || currentAluno.email || "Aluno";
};

const getAlunoInitials = (currentAluno: AlunoLogado | null): string => {
  if (!currentAluno || !currentAluno.nome) return '?';
  const names = currentAluno.nome.split(' ');
  const firstInitial = names[0]?.[0] || '';
  const lastInitial = names.length > 1 ? names[names.length - 1]?.[0] || '' : '';
  const initials = `${firstInitial}${lastInitial}`.toUpperCase();
  return initials.length > 0 ? initials : (currentAluno.email?.[0]?.toUpperCase() || '?'); // Fallback para inicial do email
};
// <<< FIM DAS FUNÇÕES HELPER >>>


export default function AlunoSidebar({ onNavigate }: AlunoSidebarProps) {
  const [location] = useLocation();
  const { aluno, logoutAluno } = useAluno();

  const handleLinkClick = () => {
    if (onNavigate) {
      onNavigate();
    }
  };

  const handleLogoutClick = () => {
    logoutAluno();
    if (onNavigate) {
      onNavigate();
    }
  };
  
  const isActive = (path: string): boolean => {
    if (path === "/aluno/dashboard" && location === "/aluno/dashboard") return true;
    if (path.includes("#")) {
        const [basePath, hash] = path.split("#");
        // Verifica se a base da URL corresponde e se o hash na janela corresponde ao hash do link
        return location === basePath && window.location.hash === `#${hash}`;
    }
    if (path !== "/aluno/dashboard" && location.startsWith(path)) return true;
    return false;
  };

  const getLinkClasses = (path: string): string => {
    return `flex items-center px-3 py-2.5 rounded-lg transition-colors duration-150 text-sm w-full text-left ${
      isActive(path)
        ? "bg-primary text-primary-foreground hover:bg-primary/90 dark:bg-primary dark:text-primary-foreground dark:hover:bg-primary/90"
        : "text-foreground/70 hover:text-foreground hover:bg-muted/50 dark:text-foreground/60 dark:hover:text-foreground dark:hover:bg-muted/30"
    }`;
  };

  if (!aluno) {
    return null; 
  }

  return (
    <aside className="flex flex-col h-full bg-card text-card-foreground border-r dark:border-border/50">
      <div className="flex flex-col items-center justify-center h-auto px-6 py-4 border-b dark:border-border/50 shrink-0">
        <img
          src="/logodyfit.png"
          alt="Logo DyFit"
          className="h-12 w-auto object-contain mb-3"
        />
        <Avatar className="h-16 w-16 mb-2 border-2 border-primary">
          <AvatarFallback className="bg-primary/10 text-primary text-xl font-semibold">
            {getAlunoInitials(aluno)} {/* Agora deve encontrar a função definida acima */}
          </AvatarFallback>
        </Avatar>
        <p className="font-medium text-md truncate">
          {getAlunoDisplayName(aluno)} {/* Agora deve encontrar a função definida acima */}
        </p>
        <p className="text-xs text-muted-foreground">
          Aluno DyFit
        </p>
      </div>

      <div className="overflow-y-auto flex-1 py-4 px-3">
        <nav className="space-y-1.5">
          {AlunoSidebarLinks.map((link) => (
            <Link key={link.label} href={link.href} onClick={handleLinkClick} className={getLinkClasses(link.href)}>
              <link.icon className="w-5 h-5 mr-3 shrink-0" />
              <span className="truncate">{link.label}</span>
            </Link>
          ))}
        </nav>
      </div>

      <div className="mt-auto p-3 border-t dark:border-border/50">
        <Button
          variant="ghost"
          onClick={handleLogoutClick}
          className="w-full justify-start text-foreground/70 hover:text-foreground hover:bg-muted/50 dark:text-foreground/60 dark:hover:text-foreground dark:hover:bg-muted/30"
        >
          <LogOut className="w-5 h-5 mr-3" />
          Sair
        </Button>
      </div>
    </aside>
  );
}
==== ./client/src/components/layout/header.tsx ====

// Caminho: ./client/src/components/layout/Header.tsx
import { useState, useContext } from "react";
import { Menu, Search, Bell, X, LogOut, User as UserIcon, ChevronDown } from "lucide-react"; // Removido Settings se não usado no dropdown
import { Input } from "@/components/ui/input";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import Sidebar from "./sidebar"; // Sidebar para Personal/Admin
import AlunoSidebar from "./AlunoSidebar"; // Sidebar para Aluno
import { UserContext } from "@/context/UserContext";
import { useAluno } from "@/context/AlunoContext";
import { Avatar, AvatarFallback } from "@/components/ui/avatar"; // Removido AvatarImage se não usado
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Link as WouterLink } from "wouter";

export default function Header() {
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const { user, logout: logoutUser } = useContext(UserContext);
  const { aluno, logoutAluno } = useAluno();

  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const closeMobileMenu = () => setIsMobileMenuOpen(false);

  const getInitials = (currentUser: { firstName?: string, lastName?: string, nome?: string } | null): string => {
    if (!currentUser) return '?';
    const firstName = currentUser.firstName || (currentUser.nome ? currentUser.nome.split(' ')[0] : '');
    const lastName = currentUser.lastName || (currentUser.nome && currentUser.nome.includes(' ') ? currentUser.nome.split(' ').pop() : '');
    const firstInitial = firstName?.[0] || '';
    const lastInitial = lastName?.[0] || '';
    const initials = `${firstInitial}${lastInitial}`.toUpperCase();
    return initials.length > 0 ? initials : (currentUser.nome?.[0]?.toUpperCase() || '?'); // Fallback para nome se iniciais vazias
  };

  const getFullName = (currentUser: { firstName?: string, lastName?: string, nome?: string, email?: string } | null): string => {
    if (!currentUser) return 'Usuário';
    if (currentUser.firstName && currentUser.lastName) return `${currentUser.firstName} ${currentUser.lastName}`.trim();
    if (currentUser.nome) return currentUser.nome.trim();
    return currentUser.email || 'Usuário';
  };
  
  const activeMobileLogoutFunction = () => {
    if (aluno) logoutAluno();
    else if (user) logoutUser();
    closeMobileMenu(); 
  };

  const MobileHeader = () => (
     <header className="md:hidden flex items-center justify-between h-16 px-4 border-b border-border bg-card text-card-foreground sticky top-0 z-20">
      <div className="flex items-center">
        <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
          <SheetTrigger asChild>
            <Button variant="ghost" size="icon">
              <Menu size={24} />
            </Button>
          </SheetTrigger>
          <SheetContent side="left" className="p-0 w-72 bg-card border-r dark:border-border/50">
            {aluno ? <AlunoSidebar onNavigate={closeMobileMenu} /> : 
             (user ? <Sidebar onNavigate={closeMobileMenu} /> : null)} {/* Assumindo que Sidebar também terá onNavigate */}
          </SheetContent>
        </Sheet>
        <img src="/logodyfit.png" alt="Logo DyFit" className="ml-4 h-8 w-auto" />
      </div>
      <div className="flex items-center space-x-2 sm:space-x-4">
        {/* Removi Pesquisa e Bell do MobileHeader para simplificar, podem ser reativados se necessário */}
         {(aluno || user) && (
            <Button variant="ghost" size="icon" onClick={activeMobileLogoutFunction} className="text-destructive hover:text-destructive/80" title="Sair">
                <LogOut size={20} />
            </Button>
         )}
      </div>
      {isSearchOpen && ( // Este bloco pode ser removido se o botão de pesquisa for removido
         <div className="absolute inset-0 bg-background z-30 p-4 flex items-center">
          <div className="relative flex-1">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input type="search" placeholder="Pesquisar..." className="pl-8 w-full" autoFocus />
          </div>
          <button type="button" className="ml-2" onClick={() => setIsSearchOpen(false)}> <X size={24} /> </button>
        </div>
      )}
    </header>
  );

  const displayUserForDesktopHeader = aluno && !user ? aluno : user;
  const logoutForDesktopHeader = () => {
    if (aluno && !user) logoutAluno();
    else if (user) logoutUser();
  };

  const DesktopHeader = () => (
    <header className="hidden md:flex items-center justify-between h-16 px-6 border-b border-border bg-card text-card-foreground sticky top-0 z-20">
      <div className="flex-1"></div>
      <div className="flex items-center space-x-4">
        {/* <div className="relative"> // Pesquisa Desktop, pode ser condicional ou removida
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
          <Input type="search" placeholder="Pesquisar..." className="w-64 pl-10 pr-4 py-2 text-sm rounded-md" />
        </div> */}
        
        {/* <Button variant="ghost" size="icon" className="relative"> <Bell size={20} /> </Button> */}

        {displayUserForDesktopHeader && (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="flex items-center gap-2 px-2 py-1 h-auto rounded-full">
                <Avatar className="h-8 w-8">
                  <AvatarFallback className="bg-primary/10 text-primary text-xs">
                    {getInitials(displayUserForDesktopHeader)}
                  </AvatarFallback>
                </Avatar>
                <span className="text-sm font-medium hidden lg:inline">
                  {getFullName(displayUserForDesktopHeader).split(' ')[0]}
                </span>
                <ChevronDown className="h-4 w-4 text-muted-foreground" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium leading-none">
                    {getFullName(displayUserForDesktopHeader)}
                  </p>
                  <p className="text-xs leading-none text-muted-foreground">
                    {displayUserForDesktopHeader.email}
                  </p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              {(user && !aluno) && (
                <WouterLink href="/perfil/editar" className="cursor-pointer">
                  <DropdownMenuItem asChild><a><UserIcon className="mr-2 h-4 w-4" /><span>Editar Perfil</span></a></DropdownMenuItem>
                </WouterLink>
              )}
              {/* Adicionar link de perfil para aluno, se existir uma página /aluno/perfil */}
              {/* {aluno && (
                <WouterLink href="/aluno/perfil" className="cursor-pointer">
                  <DropdownMenuItem asChild><a><UserIcon className="mr-2 h-4 w-4" /><span>Meu Perfil</span></a></DropdownMenuItem>
                </WouterLink>
              )} */}
              <DropdownMenuItem onClick={logoutForDesktopHeader} className="text-destructive focus:text-destructive-foreground focus:bg-destructive/80">
                <LogOut className="mr-2 h-4 w-4" />
                <span>Sair</span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        )}
      </div>
    </header>
  );

  return (
    <>
      <MobileHeader />
      <DesktopHeader />
    </>
  );
}
==== ./client/src/components/layout/main-layout.tsx ====

// Caminho: ./client/src/components/layout/main-layout.tsx
import { ReactNode, useContext } from "react";
import Sidebar from "./sidebar"; // Sidebar para Personal/Admin
import AlunoSidebar from "./AlunoSidebar"; // Importar AlunoSidebar
import Header from "./header";
import MobileNav from "./mobile-nav";
import { UserContext } from "@/context/UserContext"; // Para verificar Personal/Admin
import { useAluno } from "@/context/AlunoContext";   // Para verificar Aluno

export default function MainLayout({ children }: { children: ReactNode }) {
  const { user } = useContext(UserContext); // Se Personal/Admin está logado
  const { aluno } = useAluno();             // Se Aluno está logado

  // Determina qual sidebar usar para a visualização desktop fixa
  const DesktopSpecificSidebar = aluno && !user ? AlunoSidebar : (user ? Sidebar : null);
  // Se apenas o aluno está logado -> AlunoSidebar
  // Se user (personal/admin) está logado (mesmo que aluno também esteja, o que não deveria acontecer) -> Sidebar (Personal)
  // Se ninguém logado (não deveria chegar aqui se MainLayout é para áreas logadas) -> null

  return (
    <div className="flex h-screen bg-background text-foreground"> {/* Container Pai Flex */}
      {/* Sidebar Fixo para Desktop (oculto em mobile) */}
      {DesktopSpecificSidebar && ( // Renderiza o sidebar fixo apenas se houver um determinado
        <div className="hidden md:flex md:flex-shrink-0">
          <div className="flex flex-col w-64 lg:w-72"> {/* Largura explícita */}
            <DesktopSpecificSidebar /> {/* Renderiza o sidebar correto */}
          </div>
        </div>
      )}

      {/* Bloco do Conteúdo Principal + Header */}
      <div className="flex flex-col flex-1 w-0 overflow-hidden">
        <Header /> {/* O Header já tem lógica para mostrar AlunoSidebar ou Sidebar no Sheet mobile */}

        {/* AJUSTE: Removida a margem esquerda condicional daqui */}
        <main className="flex-1 relative overflow-y-auto focus:outline-none p-4 md:p-6 pb-16 md:pb-0">
          {children}
        </main>

        {/* Renderiza MobileNav apenas se houver um usuário ou aluno logado (para consistência com sidebars) */}
        {(user || aluno) && <MobileNav />}
      </div>
    </div>
  );
}
==== ./client/src/components/layout/mobile-nav.tsx ====

// Caminho: ./client/src/components/layout/MobileNav.tsx
import React, { useState } from 'react';
// Removido 'navigate' da importação de 'wouter'
import { Link as WouterLink, useLocation } from "wouter"; 
import { Home, Users, Dumbbell, Menu as MenuIcon, ListChecks } from "lucide-react"; // Removido BarChart2 se não usado
import { useUser } from "@/context/UserContext";
import { useAluno } from "@/context/AlunoContext";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import Sidebar from "./sidebar";
import AlunoSidebar from "./AlunoSidebar";

export default function MobileNav() {
  // useLocation retorna [currentLocation, navigateFunction]
  const [location, setLocation] = useLocation(); // <<< AJUSTE AQUI: setLocation é a função de navegação
  const { user } = useUser();
  const { aluno } = useAluno();

  const [isSheetOpen, setIsSheetOpen] = useState(false);
  const closeSheet = () => setIsSheetOpen(false);

  // A função navigate que você talvez quisesse usar seria o setLocation.
  // Exemplo de como usá-la, se necessário (não parece ser usado neste componente diretamente para navegação):
  // const navigateTo = (path: string) => setLocation(path);

  const isActive = (path: string): boolean => {
    // Para o link "Início" do aluno e do personal, verificar correspondência exata.
    if (path === "/aluno/dashboard" && location === "/aluno/dashboard") return true;
    if (path === "/" && location === "/") return true;

    // Para links com # (ex: Fichas do Aluno que aponta para /aluno/dashboard#minhas-fichas)
    if (path.includes("#")) {
        const [basePath, hash] = path.split("#");
        // Ativo se a base da URL e o hash da janela corresponderem
        return location === basePath && window.location.hash === `#${hash}`;
    }
    // Para outras rotas, verifica se o location começa com o path.
    // Evita que "/" seja ativo para todas as sub-rotas.
    return path !== "/" && path !== "/aluno/dashboard" && location.startsWith(path);
  };
  
  // Função para obter classes de links de navegação direta
  const getNavLinkClasses = (path: string): string => {
    return `flex flex-col items-center justify-center flex-1 py-2 text-xs
      ${isActive(path) ? "text-primary dark:text-primary" : "text-muted-foreground hover:text-foreground"
    }`;
  };
  
  // Função para obter classes de botões que abrem o Sheet (não devem ter estado "ativo")
  const getButtonSheetClasses = (): string => {
      return `flex flex-col items-center justify-center flex-1 py-2 text-xs text-muted-foreground hover:text-foreground`;
  };


  if (aluno) {
    return (
      <nav className="md:hidden fixed bottom-0 left-0 right-0 bg-card border-t border-border flex justify-around items-stretch h-16 z-20">
        <WouterLink href="/aluno/dashboard" className={getNavLinkClasses("/aluno/dashboard")}>
          <Home size={22} strokeWidth={isActive("/aluno/dashboard") ? 2.5 : 2} />
          <span className="mt-1">Início</span>
        </WouterLink>
        <WouterLink href="/aluno/dashboard#minhas-fichas" className={getNavLinkClasses("/aluno/dashboard#minhas-fichas")}>
          <ListChecks size={22} strokeWidth={isActive("/aluno/dashboard#minhas-fichas") ? 2.5 : 2} />
          <span className="mt-1">Fichas</span>
        </WouterLink>
        
        <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
          <SheetTrigger asChild>
            <button className={getButtonSheetClasses()}>
              <MenuIcon size={22} strokeWidth={2} />
              <span className="mt-1">Mais</span>
            </button>
          </SheetTrigger>
          <SheetContent side="left" className="p-0 w-72 bg-card border-r dark:border-border/50">
            <AlunoSidebar onNavigate={closeSheet} />
          </SheetContent>
        </Sheet>
      </nav>
    );
  } else if (user) {
    return (
      <nav className="md:hidden fixed bottom-0 left-0 right-0 bg-card border-t border-border flex justify-around items-stretch h-16 z-20">
        <WouterLink href="/" className={getNavLinkClasses("/")}>
          <Home size={22} strokeWidth={isActive("/") ? 2.5 : 2} />
          <span className="mt-1">Início</span>
        </WouterLink>
        <WouterLink href="/alunos" className={getNavLinkClasses("/alunos")}>
          <Users size={22} strokeWidth={isActive("/alunos") ? 2.5 : 2} />
          <span className="mt-1">Alunos</span>
        </WouterLink>
        <WouterLink href="/treinos" className={getNavLinkClasses("/treinos")}>
          <Dumbbell size={22} strokeWidth={isActive("/treinos") ? 2.5 : 2} />
          <span className="mt-1">Treinos</span>
        </WouterLink>
        <Sheet open={isSheetOpen} onOpenChange={setIsSheetOpen}>
          <SheetTrigger asChild>
            <button className={getButtonSheetClasses()}>
              <MenuIcon size={22} strokeWidth={2} />
              <span className="mt-1">Menu</span>
            </button>
          </SheetTrigger>
          <SheetContent side="left" className="p-0 w-72 bg-card border-r dark:border-border/50">
            {/* Assumindo que Sidebar foi ajustado para aceitar onNavigate */}
            <Sidebar onNavigate={closeSheet} /> 
          </SheetContent>
        </Sheet>
      </nav>
    );
  }

  return null;
}
==== ./client/src/components/layout/sidebar.tsx ====

// Caminho: ./client/src/components/layout/sidebar.tsx
import React from 'react';
import { Link, useLocation } from "wouter";
import { Home, Users, Dumbbell, List, LogOut, UserPlus, UserCog, Mail } from "lucide-react"; // Removidos ícones não usados aqui
import { useUser, User } from "@/context/UserContext";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

const DefaultSidebarLinks = [
  { href: "/", label: "Início", icon: Home },
  { href: "/alunos", label: "Alunos", icon: Users },
  { href: "/treinos", label: "Treinos", icon: Dumbbell },
  { href: "/exercises", label: "Exercícios", icon: List },
];
const AdminSidebarLinks = [
  { href: "/admin/criar-personal", label: "Criar Personal", icon: UserPlus },
  { href: "/admin/gerenciar-personais", label: "Gerenciar Personais", icon: UserCog },
  { href: "/admin/convites", label: "Gerenciar Convites", icon: Mail },
];

interface SidebarProps {
  onNavigate?: () => void;
}

export default function Sidebar({ onNavigate }: SidebarProps) {
  const [location] = useLocation();
  const { user, logout: logoutUser } = useUser();

  const handleLinkClick = () => {
    if (onNavigate) {
      onNavigate();
    }
  };

  const handleLogoutClick = () => {
    logoutUser();
    if (onNavigate) {
      onNavigate();
    }
  };

  const isActive = (path: string): boolean => {
    if (path === "/" && location === "/") return true;
    return path !== '/' && location.startsWith(path);
  };

  const getLinkClasses = (path: string): string => {
    return `flex items-center px-3 py-2.5 rounded-lg transition-colors duration-150 text-sm w-full text-left ${
      isActive(path)
        ? "bg-primary text-white font-medium dark:bg-sky-600 dark:text-white"
        : "text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700"
    }`;
  };
  
  const getDisplayName = (currentUser: User | null): string => {
    if (!currentUser) return "Usuário";
    return `${currentUser.firstName} ${currentUser.lastName || ''}`.trim();
  };

  const getInitials = (currentUser: User | null): string => {
    if (!currentUser) return '?';
    const first = currentUser.firstName?.[0] || '';
    const last = currentUser.lastName?.[0] || '';
    const initials = `${first}${last}`.toUpperCase();
    return initials.length > 0 ? initials : (currentUser.username?.[0]?.toUpperCase()) || '?';
  };

  const getRoleDisplay = (currentUser: User | null): string => {
    if (!currentUser) return "";
    return currentUser.role;
  }

  // Se não houver Personal/Admin logado, o Header.tsx já decide não renderizar este Sidebar
  // Portanto, podemos assumir que 'user' existe se este componente for renderizado pelo Header.
  // No entanto, para segurança em outros usos ou testes, manter uma verificação é bom.
  if (!user) {
      return null; // Retorna null se não houver usuário (Personal/Admin)
  }

  return (
    <aside className="flex flex-col h-full md:w-64 lg:w-72 border-r border-gray-200 bg-white dark:bg-gray-800 dark:border-gray-700 z-30 overflow-y-auto">
      <div className="flex flex-col items-center justify-center h-auto px-6 py-4 border-b border-gray-200 dark:border-gray-700 shrink-0">
        <Link href="/" onClick={handleLinkClick}>
            <img
              src="/logodyfit.png"
              alt="Logo DyFit"
              className="h-14 w-auto object-contain cursor-pointer"
            />
        </Link>
      </div>

      <div className="flex-1 py-4 px-3">
        {/* Informações do Usuário (Personal/Admin) */}
        <div className="mb-6">
          <div className="flex items-center space-x-3 px-3 py-2">
            <Avatar className="h-10 w-10 border-2 border-primary dark:border-sky-500 shrink-0 bg-muted text-primary dark:text-sky-400">
              <AvatarFallback className="font-semibold">
                  {getInitials(user)}
              </AvatarFallback>
            </Avatar>
            <div className="truncate">
              <p className="font-medium text-sm text-gray-900 dark:text-gray-100 truncate">
                {getDisplayName(user)}
              </p>
              <p className="text-xs text-gray-500 dark:text-gray-400 capitalize truncate">
                {getRoleDisplay(user)}
              </p>
            </div>
          </div>
        </div>

        {/* Links de navegação para Personal/Admin */}
        <nav className="space-y-1">
          {DefaultSidebarLinks.map((link) => (
            <Link key={link.label} href={link.href} onClick={handleLinkClick} className={getLinkClasses(link.href)}>
              <link.icon className="w-5 h-5 mr-3" />
              {link.label}
            </Link>
          ))}
        </nav>

        {user.role === 'Admin' && ( // Apenas se o usuário for Admin
          <>
            <div className="my-3 border-t border-gray-200 dark:border-gray-700"></div>
            <p className="px-3 pt-2 pb-1 text-xs font-semibold uppercase text-gray-500 dark:text-gray-400">
              Administração
            </p>
            <nav className="space-y-1">
              {AdminSidebarLinks.map((link) => (
                <Link key={link.label} href={link.href} onClick={handleLinkClick} className={getLinkClasses(link.href)}>
                  <link.icon className="w-5 h-5 mr-3" />
                  {link.label}
                </Link>
              ))}
            </nav>
          </>
        )}
      </div>

      {/* Botão de Sair */}
      <div className="mt-auto p-3 border-t border-gray-200 dark:border-gray-700">
        <Button
          variant="ghost"
          onClick={handleLogoutClick}
          className="w-full justify-start text-gray-600 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-700"
        >
          <LogOut className="w-5 h-5 mr-3" />
          Sair
        </Button>
      </div>
    </aside> // <<< TAG DE FECHAMENTO DO ASIDE CORRIGIDA/CONFIRMADA
  );
}
==== ./client/src/components/modalConfirmacao.tsx ====

import { motion, AnimatePresence } from "framer-motion";

interface ModalConfirmacaoProps {
  isOpen: boolean;
  onClose: () => void;
  onConfirm: () => void;
  titulo?: string;
  mensagem?: string;
  textoConfirmar?: string;
  textoCancelar?: string;
}

export function ModalConfirmacao({
  isOpen,
  onClose,
  onConfirm,
  titulo = "Confirmação",
  mensagem = "Tem certeza que deseja continuar?",
  textoConfirmar = "Confirmar",
  textoCancelar = "Cancelar",
}: ModalConfirmacaoProps) {
  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          <motion.div
            className="bg-white p-6 rounded-lg shadow-lg w-full max-w-sm"
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            transition={{ duration: 0.2 }}
          >
            <h2 className="text-lg font-semibold mb-4">{titulo}</h2>
            <p className="mb-6">{mensagem}</p>
            <div className="flex justify-end gap-4">
              <button
                className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400 transition"
                onClick={onClose}
              >
                {textoCancelar}
              </button>
              <button
                className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition"
                onClick={onConfirm}
              >
                {textoConfirmar}
              </button>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

==== ./client/src/components/ui/ActionsAluno.tsx ====

// client/src/components/ui/ActionsAluno.tsx
import React from 'react';
import { Button } from "@/components/ui/button";
import { 
    DropdownMenu, 
    DropdownMenuContent, 
    DropdownMenuItem, 
    DropdownMenuTrigger 
} from "@/components/ui/dropdown-menu";
import { Pencil, Trash2, MoreVertical } from 'lucide-react'; 

// --- INTERFACE CORRIGIDA ---
interface ActionsAlunoProps {
  onEdit: () => void;    // Função chamada ao clicar em Editar
  onDelete: () => void;  // Função chamada ao clicar em Excluir
}
// --- FIM DA CORREÇÃO ---

const ActionsAluno: React.FC<ActionsAlunoProps> = ({ onEdit, onDelete }) => {
  
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="ghost" 
          size="icon" 
          title="Mais ações"
          className="h-8 w-8" // Tamanho consistente com o botão de visualizar
        > 
          <MoreVertical className="h-4 w-4" />
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end"> 
        {/* Editar */}
        <DropdownMenuItem onClick={(e) => { e.stopPropagation(); onEdit(); }}>
          <Pencil className="mr-2 h-4 w-4" /> 
          <span>Editar</span>
        </DropdownMenuItem>
        {/* Excluir */}
        <DropdownMenuItem 
          onClick={(e) => { e.stopPropagation(); onDelete(); }}
          className="text-red-600 focus:text-red-700 focus:bg-red-50" 
        >
          <Trash2 className="mr-2 h-4 w-4" /> 
          <span>Excluir</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default ActionsAluno;
==== ./client/src/components/ui/ActionsExercicio.tsx ====

// client/src/components/ui/ActionsExercicio.tsx
// (Assumindo estrutura similar aos outros componentes com botões)
import React from 'react'; // Import React
import { Button } from "@/components/ui/button";
import { Pencil, Trash, Star } from "lucide-react";
import { useToast } from "@/hooks/use-toast"; // <<< USA O HOOK

interface ActionsExercicioProps {
  exercicioId: string;
  isFavorito?: boolean;
  isCustom?: boolean; // Para saber se pode editar/excluir
  onEdit: (id: string) => void;
  onDelete: (id: string) => void;
  onToggleFavorite: (id: string, currentState: boolean) => void;
}

export default function ActionsExercicio({
  exercicioId,
  isFavorito = false,
  isCustom = false,
  onEdit,
  onDelete,
  onToggleFavorite,
}: ActionsExercicioProps) {
  const { toast } = useToast(); // <<< USA O HOOK

  const handleEdit = () => {
    if (isCustom) {
      onEdit(exercicioId);
    } else {
      toast({ variant: "destructive", title: "Ação não permitida", description: "Exercícios do App não podem ser editados." });
    }
  };

  const handleDelete = () => {
    if (isCustom) {
      onDelete(exercicioId); // A confirmação deve estar no componente pai ou no botão de delete
    } else {
      toast({ variant: "destructive", title: "Ação não permitida", description: "Exercícios do App não podem ser excluídos." });
    }
  };

  const handleFavorite = () => {
    onToggleFavorite(exercicioId, isFavorito);
  };

  return (
    <div className="flex justify-end items-center space-x-1">
       {/* Mostrar Editar/Excluir apenas se for custom */}
       {isCustom && (
          <>
             <Button variant="ghost" size="icon" className="h-8 w-8 text-gray-500 hover:text-blue-600" title="Editar" onClick={handleEdit}>
                 <Pencil className="w-4 h-4" />
             </Button>
             {/* O botão de Delete pode ser o ExerciseDeleteButton que já usa AlertDialog */}
             {/* <ExerciseDeleteButton exercicioId={exercicioId} onDeleted={() => onDelete(exercicioId)} /> */}
             {/* Ou um botão simples que chama onDelete (pai lida com confirmação) */}
             <Button variant="ghost" size="icon" className="h-8 w-8 text-red-500 hover:text-red-700" title="Excluir" onClick={handleDelete}>
                 <Trash className="w-4 h-4" />
             </Button>
          </>
       )}
        <Button variant="ghost" size="icon" className={`h-8 w-8 ${isFavorito ? 'text-yellow-500 hover:text-yellow-600' : 'text-gray-400 hover:text-yellow-500'}`} title={isFavorito ? "Desfavoritar" : "Favoritar"} onClick={handleFavorite}>
            <Star className={`w-4 h-4 ${isFavorito ? 'fill-current' : ''}`} />
        </Button>
    </div>
  );
}
==== ./client/src/components/ui/ModalEditarAluno.tsx ====

import React, { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Loader2 } from "lucide-react"; // Import Loader2

// Interface Original para dados do Aluno (como vem da API ou é esperado no submit final)
interface AlunoEditData {
    _id?: string;
    nome?: string;
    email?: string;
    birthDate?: string;
    gender?: string;
    goal?: string;
    weight?: number | null;
    height?: number | null;
    startDate?: string;
    phone?: string;
    status?: string;
    notes?: string;
    trainerId?: number;
}

// NOVA Interface para o ESTADO do formulário (permite string para campos numéricos durante digitação)
interface AlunoFormDataState {
    _id?: string;
    nome?: string;
    email?: string;
    birthDate?: string;
    gender?: string;
    goal?: string;
    weight?: string | number | null; // Permite string
    height?: string | number | null; // Permite string
    startDate?: string;
    phone?: string;
    status?: string;
    notes?: string;
    trainerId?: string | number | null; // Permite string (se editável)
}


interface ModalEditarAlunoProps {
  isOpen: boolean;
  onClose: () => void;
  aluno: AlunoEditData | null; // Recebe o tipo original
  atualizarAlunos: () => void;
}

export function ModalEditarAluno({ isOpen, onClose, aluno, atualizarAlunos }: ModalEditarAlunoProps) {
  const { toast } = useToast();
  // Usa a NOVA interface para o estado do formulário
  const [formData, setFormData] = useState<AlunoFormDataState>({});
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (aluno && isOpen) {
        // Ao popular o estado, converte números para string para os inputs text
      setFormData({
        ...aluno,
        birthDate: aluno.birthDate ? aluno.birthDate.split('T')[0] : "",
        startDate: aluno.startDate ? aluno.startDate.split('T')[0] : "",
        // Converte para string ao carregar no estado, ou usa '' se for null/undefined
        weight: aluno.weight !== null && aluno.weight !== undefined ? String(aluno.weight) : '',
        height: aluno.height !== null && aluno.height !== undefined ? String(aluno.height) : '',
        trainerId: aluno.trainerId !== null && aluno.trainerId !== undefined ? String(aluno.trainerId) : '', // Se trainerId for editável
      });
    }
    // Não limpar o form ao fechar para não causar piscar de dados se reabrir rápido
    // else if (!isOpen) {
    //    setFormData({});
    // }
  }, [aluno, isOpen]);

  // handleChange agora está consistente com o tipo AlunoFormDataState (que permite string)
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

   // handleSelectChange também está consistente
   const handleSelectChange = (name: keyof AlunoFormDataState) => (value: string) => {
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async () => {
    if (!aluno?._id) {
        toast({ title: "ID do aluno não encontrado", variant: "destructive" });
        return;
    }
    setIsLoading(true);

    // Prepara os dados para enviar, convertendo de volta para número onde necessário
    // A lógica aqui já estava correta, pois lia do formData (que podia ser string)
    // e tentava converter para número.
    const dataToSend: AlunoEditData = { // Envia o tipo esperado pela API
        _id: formData._id, // Mantém o ID se necessário na API
        nome: formData.nome,
        email: formData.email,
        birthDate: formData.birthDate,
        gender: formData.gender,
        goal: formData.goal,
        phone: formData.phone,
        status: formData.status,
        notes: formData.notes,

        weight: formData.weight !== null && formData.weight !== undefined && String(formData.weight).trim() !== ''
                 ? parseFloat(String(formData.weight).replace(',', '.'))
                 : null,
        height: formData.height !== null && formData.height !== undefined && String(formData.height).trim() !== ''
                ? parseInt(String(formData.height), 10)
                : null,
        startDate: formData.startDate, // Garanta que esteja no formato correto se necessário

        trainerId: formData.trainerId !== null && formData.trainerId !== undefined && String(formData.trainerId).trim() !== ''
                 ? parseInt(String(formData.trainerId), 10)
                 : undefined, // Ou null
    };

    // Validação simples antes de enviar
    // Verifica se, após a conversão, o resultado é NaN (Not a Number)
    if (isNaN(dataToSend.weight ?? NaN) || isNaN(dataToSend.height ?? NaN) || (dataToSend.trainerId !== undefined && isNaN(dataToSend.trainerId))) {
       toast({ title: "Peso, Altura ou ID do Personal contém valor inválido.", variant: "destructive" });
       setIsLoading(false);
       return;
     }

    // Remover campos não editáveis ou que a API não espera no PUT
    // delete dataToSend._id; // Exemplo: remover _id do corpo

    try {
      // Use a URL correta da sua API
      const response = await fetch(`/api/students/${aluno._id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(dataToSend),
      });

      if (response.ok) {
        toast({ title: "Aluno atualizado com sucesso!" });
        atualizarAlunos();
        onClose();
      } else {
         const errorData = await response.json().catch(() => null);
        toast({
            title: "Erro ao atualizar aluno",
            description: errorData?.message || `Status: ${response.status}`,
            variant: "destructive"
        });
      }
    } catch (error) {
      console.error("Erro ao editar aluno:", error);
      toast({ title: "Erro de conexão ao salvar", variant: "destructive" });
    } finally {
        setIsLoading(false);
    }
  };

   if (!isOpen || !aluno) return null;

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      {/* Conteúdo do Dialog (mantido igual ao anterior, pois a lógica de UI não mudou) */}
      <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Editar Aluno</DialogTitle>
           <DialogDescription>Atualize as informações de {aluno?.nome || 'aluno'}.</DialogDescription>
        </DialogHeader>

        <div className="grid gap-4 py-4">
          {/* Linha 1: Nome */}
          <div className="grid grid-cols-4 items-center gap-4">
             <Label htmlFor="nome" className="text-right">Nome*</Label>
            <Input id="nome" name="nome" value={formData.nome || ""} onChange={handleChange} className="col-span-3" placeholder="Nome completo" />
          </div>
           {/* Linha 2: Email */}
           <div className="grid grid-cols-4 items-center gap-4">
             <Label htmlFor="email" className="text-right">Email*</Label>
            <Input id="email" name="email" type="email" value={formData.email || ""} onChange={handleChange} className="col-span-3" placeholder="email@exemplo.com" />
          </div>
           {/* Linha 3: Telefone */}
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="phone" className="text-right">Telefone</Label>
            <Input id="phone" name="phone" value={formData.phone || ""} onChange={handleChange} className="col-span-3" placeholder="(00) 00000-0000" />
          </div>
          {/* Linha 4: Data Nasc e Gênero */}
          <div className="grid grid-cols-2 gap-4">
             <div>
                <Label htmlFor="birthDate">Data de Nascimento*</Label>
                <Input id="birthDate" name="birthDate" type="date" value={formData.birthDate || ""} onChange={handleChange} />
             </div>
              <div>
                 <Label htmlFor="gender">Gênero*</Label>
                 <Select name="gender" value={formData.gender || ""} onValueChange={handleSelectChange('gender')}>
                     <SelectTrigger id="gender"><SelectValue placeholder="Selecione" /></SelectTrigger>
                     <SelectContent>
                         <SelectItem value="Masculino">Masculino</SelectItem>
                         <SelectItem value="Feminino">Feminino</SelectItem>
                         <SelectItem value="Outro">Outro</SelectItem>
                     </SelectContent>
                 </Select>
             </div>
          </div>
          {/* Linha 5: Peso e Altura */}
           <div className="grid grid-cols-2 gap-4">
             <div>
                 <Label htmlFor="weight">Peso (kg)</Label>
                 <Input
                    id="weight"
                    name="weight"
                    type="text"
                    inputMode="decimal"
                    // Usa o valor do estado (que pode ser string, number ou null)
                    // ?? '' garante que se for null/undefined, o input fique vazio
                    value={formData.weight ?? ''}
                    onChange={handleChange}
                    placeholder="Ex: 75,5"
                 />
             </div>
             <div>
                <Label htmlFor="height">Altura (cm)</Label>
                 <Input
                    id="height"
                    name="height"
                    type="text"
                    inputMode="numeric"
                    value={formData.height ?? ''}
                    onChange={handleChange}
                    placeholder="Ex: 178"
                 />
             </div>
           </div>
          {/* Linha 6: Objetivo */}
          <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="goal" className="text-right">Objetivo*</Label>
              <Select name="goal" value={formData.goal || ""} onValueChange={handleSelectChange('goal')} >
                 <SelectTrigger className="col-span-3"><SelectValue placeholder="Selecione o objetivo" /></SelectTrigger>
                 <SelectContent>
                    <SelectItem value="Hipertrofia">Hipertrofia</SelectItem>
                    <SelectItem value="Emagrecimento">Emagrecimento</SelectItem>
                    <SelectItem value="Reabilitação">Reabilitação</SelectItem>
                    <SelectItem value="Condicionamento físico">Condicionamento físico</SelectItem>
                    <SelectItem value="Definição muscular">Definição muscular</SelectItem>
                    <SelectItem value="Manutenção">Manutenção</SelectItem>
                    <SelectItem value="Preparação para competição">Preparação para competição</SelectItem>
                    <SelectItem value="Outros">Outros</SelectItem>
                 </SelectContent>
              </Select>
          </div>
          {/* Linha 7: Data Início e Status */}
           <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="startDate">Data de Início*</Label>
                <Input id="startDate" name="startDate" type="date" value={formData.startDate || ""} onChange={handleChange} />
              </div>
              <div>
                 <Label htmlFor="status">Status*</Label>
                 <Select name="status" value={formData.status || ""} onValueChange={handleSelectChange('status')}>
                     <SelectTrigger id="status"><SelectValue placeholder="Selecione" /></SelectTrigger>
                     <SelectContent>
                         <SelectItem value="active">Ativo</SelectItem>
                         <SelectItem value="inactive">Inativo</SelectItem>
                     </SelectContent>
                 </Select>
              </div>
           </div>
           {/* Linha 8: Notas */}
           <div className="grid grid-cols-4 items-start gap-4">
             <Label htmlFor="notes" className="text-right pt-2">Notas</Label>
             <Textarea id="notes" name="notes" value={formData.notes || ""} onChange={handleChange} placeholder="Observações adicionais..." className="col-span-3" rows={3} />
           </div>
          {/* Linha 9: Trainer ID (Comentado - descomente e ajuste se precisar editar) */}
          {/* <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="trainerId" className="text-right">ID Personal</Label>
            <Input id="trainerId" name="trainerId" type="text" inputMode="numeric" value={formData.trainerId ?? ''} onChange={handleChange} className="col-span-3" />
          </div> */}
        </div>

        {/* Botões */}
        <div className="flex justify-end gap-2 pt-4">
          <Button variant="outline" onClick={onClose} disabled={isLoading}>
            Cancelar
          </Button>
          <Button onClick={handleSubmit} disabled={isLoading}>
             {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {isLoading ? 'Salvando...' : 'Salvar Alterações'}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}