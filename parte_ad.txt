
==== ./client/src/components/ui/dashboard/FrequenciaSemanal.tsx ====


==== ./client/src/components/ui/dashboard/activity-card.tsx ====

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Check, MessageSquare, UserPlus, Dumbbell } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { formatDistanceToNow } from "date-fns";
import { ptBR } from "date-fns/locale";
import { apiRequest } from "@/lib/queryClient"; // Importar apiRequest

// Interface para os dados de atividade esperados da API
interface ActivityLog {
  id: string; // ou number, dependendo da sua API
  activityType: string;
  details: any; // Seja mais específico se possível, ex: { name: string; workoutPlanName?: string; studentName?: string; progress?: number }
  timestamp: string; // ou Date
}

interface ActivityProps {
  trainerId: string; // Alterado para string para corresponder ao user.id
}

export function ActivityCard({ trainerId }: ActivityProps) {
  const { data: activities, isLoading } = useQuery<ActivityLog[], Error>({
    queryKey: ["/api/activity-logs", { trainerId, limit: 4 }], // Chave da query mais específica
    queryFn: async () => {
      if (!trainerId) throw new Error("Trainer ID não fornecido para buscar atividades.");
      // Usando apiRequest para chamadas autenticadas
      return apiRequest<ActivityLog[]>("GET", `/api/activity-logs?trainerId=${trainerId}&limit=4`);
    },
    enabled: !!trainerId, // Só executa se trainerId existir
  });

  const getActivityIcon = (activityType: string) => {
    switch (activityType) {
      case "student-added":
        return (
          <div className="w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center text-primary">
            <UserPlus className="h-5 w-5" />
          </div>
        );
      case "workout-created":
      case "workout-updated":
      case "workout-assigned":
        return (
          <div className="w-10 h-10 rounded-full bg-secondary/10 flex items-center justify-center text-secondary">
            <Dumbbell className="h-5 w-5" />
          </div>
        );
      case "session-completed":
        return (
          <div className="w-10 h-10 rounded-full bg-green-500/10 flex items-center justify-center text-green-600"> {/* Corrigido para verde */}
            <Check className="h-5 w-5" />
          </div>
        );
      default:
        return (
          <div className="w-10 h-10 rounded-full bg-accent/10 flex items-center justify-center text-accent">
            <MessageSquare className="h-5 w-5" />
          </div>
        );
    }
  };

  const getActivityTitle = (activity: ActivityLog) => {
    switch (activity.activityType) {
      case "student-added":
        return `Novo aluno cadastrado`;
      case "workout-created":
        return `Plano de treino criado`;
      case "workout-updated":
        return `Plano de treino atualizado`;
      case "workout-assigned":
        return `Plano de treino atribuído`;
      case "workout-progress-updated":
        return `Progresso do treino atualizado`;
      case "session-scheduled":
        return `Nova sessão agendada`;
      case "session-confirmed":
        return `Sessão confirmada`;
      case "session-completed":
        return `Sessão concluída`;
      case "session-cancelled":
        return `Sessão cancelada`;
      default:
        return `Atividade registrada`;
    }
  };

  const getActivityDescription = (activity: ActivityLog) => {
    // Adicionar verificações para activity.details para evitar erros se não existir
    const details = activity.details || {};
    switch (activity.activityType) {
      case "student-added":
        return `${details.name || 'Aluno'} foi adicionado à sua lista de alunos`;
      case "workout-created":
        return `Você criou o plano de treino "${details.name || 'desconhecido'}"`;
      case "workout-updated":
        return `Você atualizou o plano de treino "${details.name || 'desconhecido'}"`;
      case "workout-assigned":
        return `Você atribuiu "${details.workoutPlanName || 'plano desconhecido'}" para ${details.studentName || 'aluno desconhecido'}`;
      case "workout-progress-updated":
        return `Progresso de ${details.studentName || 'aluno desconhecido'} no plano "${details.workoutPlanName || 'desconhecido'}" atualizado para ${details.progress || 0}%`;
      case "session-scheduled":
        return `Nova sessão agendada com ${details.studentName || 'aluno desconhecido'}`;
      case "session-confirmed":
        return `Sessão com ${details.studentName || 'aluno desconhecido'} confirmada`;
      case "session-completed":
        return `${details.studentName || 'Aluno desconhecido'} concluiu a sessão`;
      case "session-cancelled":
        return `Sessão com ${details.studentName || 'aluno desconhecido'} foi cancelada`;
      default:
        return `Detalhes da atividade não disponíveis`;
    }
  };

  const renderActivitySkeleton = () => (
    <>
      {[1, 2, 3, 4].map((i) => (
        <div key={i} className="p-4 flex items-start border-b border-gray-100 dark:border-gray-700 last:border-0">
          <div className="flex-shrink-0 mr-4">
            <div className="w-10 h-10 rounded-full bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
          </div>
          <div className="w-full">
            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 animate-pulse"></div>
            <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-full mt-2 animate-pulse"></div>
            <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mt-2 animate-pulse"></div>
          </div>
        </div>
      ))}
    </>
  );

  return (
    <Card className="border border-gray-100 dark:border-gray-800 overflow-hidden shadow-sm">
      <CardHeader className="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex flex-row items-center justify-between">
        <CardTitle className="font-semibold text-gray-900 dark:text-gray-100">Atividade Recente</CardTitle>
        {/* <button className="text-sm text-primary hover:text-primary-dark">Ver tudo</button> */}
      </CardHeader>
      <CardContent className="p-0 divide-y divide-gray-100 dark:divide-gray-700">
        {isLoading ? (
          renderActivitySkeleton()
        ) : (
          <>
            {activities && activities.length > 0 ? activities.map((activity: ActivityLog) => (
              <div key={activity.id} className="p-4 flex items-start hover:bg-muted/30 dark:hover:bg-muted/10">
                <div className="flex-shrink-0 mr-4">
                  {getActivityIcon(activity.activityType)}
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-800 dark:text-gray-200">{getActivityTitle(activity)}</p>
                  <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">{getActivityDescription(activity)}</p>
                  <p className="text-xs text-gray-400 dark:text-gray-500 mt-1">
                    {formatDistanceToNow(new Date(activity.timestamp), {
                      addSuffix: true,
                      locale: ptBR
                    })}
                  </p>
                </div>
              </div>
            )) : (
              <div className="p-6 text-center text-sm text-gray-500 dark:text-gray-400">Nenhuma atividade recente.</div>
            )}
          </>
        )}
      </CardContent>
    </Card>
  );
}

==== ./client/src/components/ui/dashboard/sessions-card.tsx ====

// client/src/components/ui/dashboard/sessions-card.tsx
import { useState, useEffect } from "react"; // Removido React, não é necessário importar explicitamente no escopo do arquivo com JSX
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { MoreVertical, Plus, CalendarClock, UserCircle, Info, Loader2, Edit3, Activity, ClipboardCheck, Dumbbell } from "lucide-react"; // Adicionado Dumbbell
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Aluno } from "@/types/aluno";
import LoadingSpinner from "@/components/LoadingSpinner";

// <<< TIPOS DUPLICADOS/ADAPTADOS PARA O FRONTEND (Idealmente viriam de uma pasta 'shared') >>>
export const TIPOS_COMPROMISSO_FRONTEND = ['avaliacao', 'checkin', 'treino_acompanhado', 'outro'] as const;
export type TipoCompromissoFrontend = typeof TIPOS_COMPROMISSO_FRONTEND[number];

// Interface para os dados de sessão/compromisso esperados da API
interface CompromissoData {
  _id: string;
  sessionDate: string; 
  tipoCompromisso: TipoCompromissoFrontend; // Usando o tipo do frontend
  notes?: string;
  status: "pending" | "confirmed" | "completed" | "cancelled";
  studentId: { _id: string; nome: string; } | string; 
  trainerId: string;
}

interface NewCompromissoState {
    sessionDate: string;
    tipoCompromisso: TipoCompromissoFrontend; // Usando o tipo do frontend
    notes: string;
    status: CompromissoData['status'];
    studentId: string;
    trainerId: string;
}
// <<< FIM DOS TIPOS DUPLICADOS >>>


interface SessionsCardProps {
  trainerId: string; 
}

export function SessionsCard({ trainerId }: SessionsCardProps) {
  const { toast } = useToast();
  const queryClientHook = useQueryClient();
  const today = new Date();
  const [isModalOpen, setIsModalOpen] = useState(false);

  const initialNewCompromissoState: NewCompromissoState = {
    sessionDate: format(new Date(), "yyyy-MM-dd'T'HH:mm"),
    tipoCompromisso: 'treino_acompanhado', 
    notes: "",
    status: "pending" as CompromissoData['status'],
    studentId: "",
    trainerId: trainerId,
  };
  const [newCompromisso, setNewCompromisso] = useState<NewCompromissoState>(initialNewCompromissoState);

  const { data: compromissos = [], isLoading: isLoadingCompromissos, error: errorCompromissos } = useQuery<CompromissoData[], Error>({
    queryKey: ["/api/sessions/today", { trainerId, date: format(today, "yyyy-MM-dd") }],
    queryFn: async () => {
      if (!trainerId) throw new Error("Trainer ID não fornecido para buscar compromissos.");
      return apiRequest<CompromissoData[]>("GET", `/api/sessions?trainerId=${trainerId}&date=${format(today, "yyyy-MM-dd")}&populateStudent=true`);
    },
    enabled: !!trainerId,
  });

  const { data: students = [], isLoading: isLoadingStudents } = useQuery<Aluno[], Error>({
    queryKey: ["/api/alunos", { forComponent: "SessionsCardModal" }],
    queryFn: async () => {
      return apiRequest<Aluno[]>("GET", `/api/alunos`);
    },
    enabled: isModalOpen, 
  });

  const updateCompromissoStatusMutation = useMutation<CompromissoData, Error, { compromissoId: string; status: string }>({
    mutationFn: ({ compromissoId, status }) => apiRequest<CompromissoData>("PUT", `/api/sessions/${compromissoId}`, { status }),
    onSuccess: (updatedCompromisso) => { 
      toast({ title: "Compromisso atualizado", description: `Status do compromisso com ${getStudentName(updatedCompromisso.studentId)} alterado para ${updatedCompromisso.status}.` });
      queryClientHook.invalidateQueries({ queryKey: ["/api/sessions/today", { trainerId, date: format(today, "yyyy-MM-dd") }] });
      queryClientHook.invalidateQueries({ queryKey: ["/api/dashboard/geral", trainerId] }); 
    },
    onError: (error) => {
      toast({ title: "Erro", description: error.message || "Falha ao atualizar o status do compromisso.", variant: "destructive" });
    },
  });

  const createCompromissoMutation = useMutation<CompromissoData, Error, NewCompromissoState>({
    mutationFn: (compromissoData) => apiRequest<CompromissoData>("POST", "/api/sessions", compromissoData),
    onSuccess: (createdCompromisso) => {
      toast({ title: "Compromisso criado!", description: `Novo compromisso (${getTipoCompromissoLabel(createdCompromisso.tipoCompromisso)}) com ${getStudentName(createdCompromisso.studentId)} agendado.` });
      queryClientHook.invalidateQueries({ queryKey: ["/api/sessions/today", { trainerId, date: format(today, "yyyy-MM-dd") }] });
      queryClientHook.invalidateQueries({ queryKey: ["/api/dashboard/geral", trainerId] }); 
      setIsModalOpen(false);
      setNewCompromisso(initialNewCompromissoState);
    },
    onError: (error) => {
      toast({ title: "Erro ao criar compromisso", description: error.message || "Não foi possível agendar o compromisso.", variant: "destructive" });
    },
  });

  const handleUpdateStatus = (compromissoId: string, status: string) => {
    updateCompromissoStatusMutation.mutate({ compromissoId, status });
  };

  const handleCreateCompromisso = () => {
    if (!newCompromisso.studentId) {
        toast({ title: "Erro de Validação", description: "Por favor, selecione um aluno.", variant: "destructive" });
        return;
    }
    if (!newCompromisso.sessionDate) {
        toast({ title: "Erro de Validação", description: "Por favor, defina a data e hora.", variant: "destructive" });
        return;
    }
    if (!newCompromisso.tipoCompromisso) {
        toast({ title: "Erro de Validação", description: "Por favor, selecione o tipo de compromisso.", variant: "destructive" });
        return;
    }
    createCompromissoMutation.mutate(newCompromisso);
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "confirmed": return <Badge variant="success" className="text-xs">Confirmada</Badge>;
      case "pending": return <Badge variant="secondary" className="bg-yellow-100 text-yellow-800 dark:bg-yellow-700/30 dark:text-yellow-300 text-xs">Pendente</Badge>;
      case "completed": return <Badge variant="default" className="bg-blue-100 text-blue-800 dark:bg-blue-700/30 dark:text-blue-300 text-xs">Concluído</Badge>;
      case "cancelled": return <Badge variant="destructive" className="text-xs">Cancelado</Badge>;
      default: return <Badge variant="outline" className="text-xs">{status}</Badge>;
    }
  };
  
  const getStudentName = (studentIdField: CompromissoData['studentId']): string => {
    if (typeof studentIdField === 'object' && studentIdField !== null && studentIdField.nome) {
        return studentIdField.nome;
    }
    const studentDetails = students.find(s => s._id === studentIdField);
    return studentDetails?.nome || "Aluno";
  };

  const getTipoCompromissoLabel = (tipo: TipoCompromissoFrontend): string => { // <<< TIPO ATUALIZADO
    switch (tipo) {
      case 'avaliacao': return 'Avaliação';
      case 'checkin': return 'Check-in';
      case 'treino_acompanhado': return 'Treino Acompanhado';
      case 'outro': return 'Outro';
      default: 
        const exhaustiveCheck: never = tipo; // Para checagem em tempo de compilação
        return exhaustiveCheck;
    }
  };
  
  const getTipoCompromissoIcon = (tipo: TipoCompromissoFrontend) => { // <<< TIPO ATUALIZADO
    switch (tipo) {
        case 'avaliacao': return <ClipboardCheck className="w-4 h-4 mr-1.5 text-blue-500" />;
        case 'checkin': return <Activity className="w-4 h-4 mr-1.5 text-green-500" />;
        case 'treino_acompanhado': return <Dumbbell className="w-4 h-4 mr-1.5 text-purple-500" />; // Ícone Dumbbell
        case 'outro': return <Info className="w-4 h-4 mr-1.5 text-gray-500" />;
        default: 
            const exhaustiveCheck: never = tipo; // Para checagem em tempo de compilação
            return null;
    }
  };

  return (
    <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
      <Card className="border border-gray-100 dark:border-gray-800 overflow-hidden shadow-sm flex flex-col h-full">
        <CardHeader className="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex flex-row items-center justify-between shrink-0">
          <CardTitle className="font-semibold text-gray-900 dark:text-gray-100 flex items-center">
            <CalendarClock className="w-5 h-5 mr-2 text-primary" />
            Agenda do Dia
          </CardTitle>
          <DialogTrigger asChild>
            <Button variant="outline" size="sm">
              <Plus className="w-4 h-4 mr-1.5" /> Adicionar
            </Button>
          </DialogTrigger>
        </CardHeader>

        <CardContent className="p-0 flex-grow overflow-y-auto">
          {isLoadingCompromissos ? (
            <div className="p-6 flex justify-center items-center h-full">
                <LoadingSpinner text="Carregando compromissos..." />
            </div>
          ) : errorCompromissos ? (
            <div className="p-6 text-center text-red-600 dark:text-red-400 text-sm">
                Erro ao carregar compromissos: {errorCompromissos.message}
            </div>
          ) : compromissos.length > 0 ? (
            <ul className="divide-y divide-gray-100 dark:divide-gray-700">
                {compromissos.map((compromisso) => (
                <li key={compromisso._id} className="p-4 hover:bg-muted/30 dark:hover:bg-muted/10">
                    <div className="flex justify-between items-start">
                      <div className="flex-grow">
                          <div className="flex items-center">
                              {getTipoCompromissoIcon(compromisso.tipoCompromisso)}
                              <p className="text-sm font-medium text-gray-800 dark:text-gray-200">
                                  {format(new Date(compromisso.sessionDate), "HH:mm", { locale: ptBR })} - {getStudentName(compromisso.studentId)}
                                  <span className="text-xs text-muted-foreground ml-1">({getTipoCompromissoLabel(compromisso.tipoCompromisso)})</span>
                              </p>
                          </div>
                          {compromisso.notes && <p className="text-xs text-gray-500 dark:text-gray-400 mt-0.5 ml-5 truncate max-w-xs">{compromisso.notes}</p>}
                      </div>
                      <div className="flex items-center gap-2 flex-shrink-0">
                          {getStatusBadge(compromisso.status)}
                          <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                              <Button variant="ghost" size="icon" className="text-gray-400 hover:text-gray-600 dark:text-gray-500 dark:hover:text-gray-300 h-8 w-8">
                              <MoreVertical className="h-4 w-4" />
                              </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                              <DropdownMenuItem onClick={() => handleUpdateStatus(compromisso._id, "confirmed")}>Confirmar</DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleUpdateStatus(compromisso._id, "completed")}>Concluir</DropdownMenuItem>
                              <DropdownMenuItem onClick={() => handleUpdateStatus(compromisso._id, "cancelled")} className="text-red-600 focus:text-red-500">Cancelar</DropdownMenuItem>
                          </DropdownMenuContent>
                          </DropdownMenu>
                      </div>
                    </div>
                </li>
                ))}
            </ul>
          ) : (
            <div className="p-6 text-center text-sm text-gray-500 dark:text-gray-400 flex flex-col items-center justify-center h-full">
                <Info className="w-10 h-10 text-gray-400 dark:text-gray-500 mb-3"/>
                <p>Nenhum compromisso agendado para hoje.</p>
                <Button variant="link" size="sm" className="mt-2" onClick={() => setIsModalOpen(true)}>Agendar primeiro compromisso</Button>
            </div>
          )}
        </CardContent>
      </Card>

      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Novo Compromisso</DialogTitle>
          <DialogDescription>
            Preencha os detalhes para agendar um novo compromisso.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="sessionDate" className="text-right">Data e Hora</Label>
            <Input
              id="sessionDate"
              type="datetime-local"
              value={newCompromisso.sessionDate}
              onChange={(e) => setNewCompromisso((prev) => ({ ...prev, sessionDate: e.target.value }))}
              className="col-span-3"
              disabled={createCompromissoMutation.isPending}
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="studentId" className="text-right">Aluno</Label>
            <Select
              onValueChange={(value) => setNewCompromisso((prev) => ({ ...prev, studentId: value }))}
              value={newCompromisso.studentId}
              disabled={createCompromissoMutation.isPending || isLoadingStudents}
            >
              <SelectTrigger id="studentId" className="col-span-3">
                <SelectValue placeholder={isLoadingStudents ? "Carregando..." : "Selecione o aluno"} />
              </SelectTrigger>
              <SelectContent>
                {isLoadingStudents ? (
                    <div className="p-2 text-sm text-muted-foreground">Carregando alunos...</div>
                ) : students.length === 0 ? (
                    <div className="p-2 text-sm text-muted-foreground">Nenhum aluno cadastrado.</div>
                ) : (
                    students.map((student) => (
                        <SelectItem key={student._id} value={student._id}>
                        {student.nome}
                        </SelectItem>
                    ))
                )}
              </SelectContent>
            </Select>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="tipoCompromisso" className="text-right">Tipo</Label>
            <Select
              onValueChange={(value) => setNewCompromisso((prev) => ({ ...prev, tipoCompromisso: value as TipoCompromissoFrontend }))}
              value={newCompromisso.tipoCompromisso}
              disabled={createCompromissoMutation.isPending}
            >
              <SelectTrigger id="tipoCompromisso" className="col-span-3">
                <SelectValue placeholder="Selecione o tipo" />
              </SelectTrigger>
              <SelectContent>
                {TIPOS_COMPROMISSO_FRONTEND.map(tipo => ( // Usando a constante do frontend
                    <SelectItem key={tipo} value={tipo}>
                        {getTipoCompromissoLabel(tipo)}
                    </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="status" className="text-right">Status</Label>
            <Select
              onValueChange={(value) => setNewCompromisso((prev) => ({ ...prev, status: value as CompromissoData['status'] }))}
              value={newCompromisso.status} // Usar value para controle completo
              disabled={createCompromissoMutation.isPending}
            >
              <SelectTrigger id="status" className="col-span-3">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="pending">Pendente</SelectItem>
                <SelectItem value="confirmed">Confirmado</SelectItem>
                <SelectItem value="completed">Concluído</SelectItem>
                <SelectItem value="cancelled">Cancelado</SelectItem>
              </SelectContent>
            </Select>
          </div>
          <div className="grid grid-cols-4 items-start gap-4"> 
            <Label htmlFor="notes" className="text-right pt-2">Observações</Label>
            <Textarea
              id="notes"
              placeholder="Alguma observação para este compromisso?"
              value={newCompromisso.notes}
              onChange={(e) => setNewCompromisso((prev) => ({ ...prev, notes: e.target.value }))}
              className="col-span-3 min-h-[80px]"
              disabled={createCompromissoMutation.isPending}
            />
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={() => { setIsModalOpen(false); setNewCompromisso(initialNewCompromissoState);}} disabled={createCompromissoMutation.isPending}>
            Cancelar
          </Button>
          <Button onClick={handleCreateCompromisso} disabled={createCompromissoMutation.isPending || !newCompromisso.studentId || !newCompromisso.sessionDate || !newCompromisso.tipoCompromisso}>
            {createCompromissoMutation.isPending && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            Agendar Compromisso
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
==== ./client/src/components/ui/dashboard/stats-card.tsx ====

// client/src/components/ui/dashboard/stats-card.tsx

import { Card } from "@/components/ui/card";
import {
  ArrowDown,
  ArrowUp,
  CalendarCheck,
  CheckCircle,
  Dumbbell,
  UsersRound,
} from "lucide-react";

interface StatsCardProps {
  title: string;
  value: string | number;
  change?: {
    value: string;
    trend: "up" | "down" | "neutral";
  };
  icon: "students" | "workouts" | "sessions" | "completion";
  isLoading?: boolean;
}

export function StatsCard({
  title,
  value,
  change,
  icon,
  isLoading = false,
}: StatsCardProps) {
  const getIcon = () => {
    switch (icon) {
      case "students":
        return <UsersRound className="w-6 h-6" />;
      case "workouts":
        return <Dumbbell className="w-6 h-6" />;
      case "sessions":
        return <CalendarCheck className="w-6 h-6" />;
      case "completion":
        return <CheckCircle className="w-6 h-6" />;
      default:
        return <UsersRound className="w-6 h-6" />;
    }
  };

  const getIconBgColor = () => {
    switch (icon) {
      case "students":
        return "bg-primary/10 text-primary";
      case "workouts":
        return "bg-secondary/10 text-secondary";
      case "sessions":
        return "bg-accent/10 text-accent";
      case "completion":
        return "bg-success/10 text-success";
      default:
        return "bg-primary/10 text-primary";
    }
  };

  const getTrendColor = () => {
    if (!change) return "";
    if (change.trend === "up") return "text-success";
    if (change.trend === "down") return "text-error";
    return "text-gray-500";
  };

  const getTrendIcon = () => {
    if (!change) return null;
    if (change.trend === "up") return <ArrowUp className="w-3 h-3 mr-1" />;
    if (change.trend === "down") return <ArrowDown className="w-3 h-3 mr-1" />;
    return null;
  };

  return (
    <Card className="p-5 border border-gray-100">
      <div className="flex justify-between items-center">
        <div>
          <p className="text-gray-500 text-sm">{title}</p>
          {isLoading ? (
            <div className="h-8 w-16 bg-gray-200 animate-pulse rounded mt-1"></div>
          ) : (
            <h3 className="text-2xl font-bold mt-1">{value}</h3>
          )}
          {change && (
            <p className={`text-xs ${getTrendColor()} mt-1 flex items-center`}>
              {getTrendIcon()}
              {change.value}
            </p>
          )}
        </div>
        <div
          className={`h-12 w-12 rounded-full flex items-center justify-center ${getIconBgColor()}`}
        >
          {getIcon()}
        </div>
      </div>
    </Card>
  );
}

==== ./client/src/components/ui/dashboard/students-table.tsx ====

// client/src/components/ui/dashboard/students-table.tsx
import { useState } from "react";
import { ModalEditarAluno } from "@/components/ui/ModalEditarAluno"; // Verifique se este modal usa apiRequest
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Eye, Loader2, Plus, Search, UserX } from "lucide-react"; 
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query"; // Adicionado useMutation e useQueryClient
import { Link, useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import ActionsAluno from "@/components/ui/ActionsAluno"; 
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient"; // Importar apiRequest
import { Aluno } from "@/types/aluno"; // Importar tipo Aluno
import { ModalConfirmacao } from "@/components/ui/modal-confirmacao"; // Para confirmação de exclusão
import { useConfirmDialog } from "@/hooks/useConfirmDialog"; // Para confirmação de exclusão
import ErrorMessage from "@/components/ErrorMessage"; // Para exibir erros
import { Input } from "@/components/ui/input"; // Para o campo de busca

interface StudentsTableProps {
  trainerId: string; // Alterado para string
}

export function StudentsTable({ trainerId }: StudentsTableProps) {
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const queryClientHook = useQueryClient(); // Hook para invalidar queries

  const [modalEditarOpen, setModalEditarOpen] = useState(false);
  const [alunoSelecionado, setAlunoSelecionado] = useState<Aluno | null>(null);
  const [alunoParaExcluir, setAlunoParaExcluir] = useState<Aluno | null>(null);
  const [searchQuery, setSearchQuery] = useState("");

  const { 
    isOpen: isConfirmDeleteOpen, 
    options: confirmDeleteOptions, 
    openConfirmDialog: openDeleteStudentDialog, 
    closeConfirmDialog: closeDeleteStudentDialog,
    confirm: confirmDeleteStudentAction
  } = useConfirmDialog();

  const { data: students = [], isLoading, error, refetch: refetchStudents } = useQuery<Aluno[], Error>({ 
    queryKey: ["/api/alunos", { trainerId, forComponent: "StudentsTableDashboard" }], // Chave mais específica
    queryFn: async (): Promise<Aluno[]> => { 
      if (!trainerId) throw new Error("Trainer ID não fornecido para buscar alunos.");
      // Usando apiRequest para chamadas autenticadas
      // A rota /api/alunos já deve filtrar pelo trainerId do usuário autenticado no backend
      return apiRequest<Aluno[]>("GET", `/api/alunos`); 
    },
    enabled: !!trainerId,
    staleTime: 1000 * 60 * 2, // Cache de 2 minutos para a tabela no dashboard
  });

  // Mutação para excluir aluno
  const deleteStudentMutation = useMutation<any, Error, string>({
    mutationFn: (alunoId: string) => {
        return apiRequest("DELETE", `/api/alunos/${alunoId}`);
    },
    onSuccess: (data, alunoId) => {
        toast({ title: "Aluno Removido", description: `${alunoParaExcluir?.nome || 'O aluno'} foi removido.` });
        queryClientHook.invalidateQueries({ queryKey: ["/api/alunos"] }); // Invalida a lista principal de alunos
        queryClientHook.invalidateQueries({ queryKey: ["/api/alunos", { trainerId, forComponent: "StudentsTableDashboard" }] }); // Invalida esta query específica
        // Invalidar também a query de estatísticas do dashboard se ela contar alunos
        queryClientHook.invalidateQueries({ queryKey: ["/api/dashboard/geral", trainerId] });
        setAlunoParaExcluir(null);
        closeDeleteStudentDialog();
    },
    onError: (error) => {
        toast({ variant: "destructive", title: "Erro ao Remover", description: error.message || "Não foi possível remover o aluno." });
        setAlunoParaExcluir(null);
        closeDeleteStudentDialog();
    },
  });


  const handleEditClick = (aluno: Aluno) => {
    setAlunoSelecionado(aluno);
    setModalEditarOpen(true); // ModalEditarAluno deve usar apiRequest internamente
  };
  
  const handleViewClick = (alunoId: string) => {
     navigate(`/alunos/${alunoId}`); 
  }

  const handleDeleteClick = (aluno: Aluno) => {
    if (!aluno._id || !aluno.nome) {
        toast({ variant: "destructive", title: "Erro", description: "ID ou nome do aluno inválido." });
        return;
    }
    setAlunoParaExcluir(aluno);
    openDeleteStudentDialog({
        titulo: "Remover Aluno",
        mensagem: `Tem certeza que deseja remover ${aluno.nome}? Esta ação não pode ser desfeita e removerá também suas fichas de treino.`,
        textoConfirmar: "Remover Aluno",
        textoCancelar: "Cancelar",
        onConfirm: () => {
            if (aluno._id) {
                deleteStudentMutation.mutate(aluno._id);
            }
        },
    });
  };

  const filteredStudents = students.filter((student) => {
    const fullName = (student.nome || "").toLowerCase();
    const email = (student.email || "").toLowerCase();
    const query = searchQuery.toLowerCase();
    return fullName.includes(query) || email.includes(query);
  }).slice(0, 5); // Limitar a 5 alunos no dashboard

  const renderStudentSkeleton = (count = 3) => (
    [...Array(count)].map((_, i) => (
        <TableRow key={`skeleton-student-${i}`}>
            <TableCell className="pl-6 py-3"><div className="flex items-center"><div className="h-9 w-9 rounded-full bg-gray-200 dark:bg-gray-700 animate-pulse mr-3"></div><div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-32 animate-pulse"></div></div></TableCell>
            <TableCell className="px-6 py-3"><div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-40 animate-pulse"></div></TableCell>
            <TableCell className="px-6 py-3"><div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-24 animate-pulse"></div></TableCell>
            <TableCell className="px-6 py-3"><div className="h-6 w-16 bg-gray-200 dark:bg-gray-700 rounded-full animate-pulse"></div></TableCell>
            <TableCell className="text-right pr-6 py-3"><div className="flex justify-end items-center gap-1"><div className="h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div><div className="h-8 w-8 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div></div></TableCell>
        </TableRow>
    ))
  );


  return (
    <>
      <Card className="border border-gray-100 dark:border-gray-800 overflow-hidden shadow-sm">
        <CardHeader className="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-2">
          <CardTitle className="font-semibold text-gray-900 dark:text-gray-100">Alunos Recentes</CardTitle>
          <div className="flex items-center space-x-2">
            <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 h-4 w-4 pointer-events-none" />
                <Input 
                    type="search" 
                    placeholder="Buscar alunos..." 
                    className="pl-9 w-full sm:w-48 h-9 text-sm bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 rounded-md" 
                    value={searchQuery} 
                    onChange={(e) => setSearchQuery(e.target.value)} 
                    aria-label="Pesquisar alunos"
                />
            </div>
            <Button size="sm" variant="outline" onClick={() => navigate("/alunos/novo")}> 
              <Plus className="mr-1.5 w-4 h-4" /> Adicionar
            </Button>
          </div>
        </CardHeader>
        <CardContent className="p-0">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader className="bg-gray-50 dark:bg-gray-800/50">
                <TableRow>
                  <TableHead className="pl-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Aluno</TableHead> 
                  <TableHead className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Email</TableHead>
                  <TableHead className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Objetivo</TableHead> 
                  <TableHead className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Status</TableHead>
                  <TableHead className="text-right pr-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Ações</TableHead> 
                </TableRow>
              </TableHeader>
              <TableBody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                {isLoading && renderStudentSkeleton(3)}
                {error && !isLoading && (
                    <TableRow><TableCell colSpan={5} className="text-center py-10"><ErrorMessage title="Erro ao Carregar Alunos" message={error.message} /></TableCell></TableRow>
                )}
                {!isLoading && !error && filteredStudents.length === 0 && ( 
                  <TableRow>
                    <TableCell colSpan={5} className="text-center py-10 text-gray-500 dark:text-gray-400"> 
                      {searchQuery ? `Nenhum aluno encontrado para "${searchQuery}".` : "Nenhum aluno cadastrado."}
                    </TableCell>
                  </TableRow>
                )}
                {!isLoading && !error && filteredStudents.map((student) => (
                    <TableRow key={student._id} className="hover:bg-slate-50 dark:hover:bg-gray-800/70"> 
                      <TableCell className="pl-6 py-3 whitespace-nowrap"> 
                        <div className="flex items-center">
                          <div className="h-9 w-9 rounded-full bg-primary/10 text-primary flex items-center justify-center mr-3 font-medium text-sm">
                            {student.nome?.split(' ').map(n => n[0]).slice(0, 2).join('').toUpperCase() || '?'}
                          </div>
                          <div className="text-sm font-medium text-gray-900 dark:text-gray-100">{student.nome || 'N/A'}</div>
                        </div>
                      </TableCell>
                      <TableCell className="px-6 py-3 whitespace-nowrap text-sm text-gray-600 dark:text-gray-400">
                         {student.email || '-'}
                      </TableCell>
                      <TableCell className="px-6 py-3 whitespace-nowrap text-sm text-gray-600 dark:text-gray-400 truncate max-w-xs">
                         {student.goal || '-'}
                      </TableCell>
                      <TableCell className="px-6 py-3 whitespace-nowrap">
                           <Badge variant={student.status === 'active' ? 'success' : 'destructive'} 
                                  className={`text-xs ${student.status === 'active' ? 'bg-green-100 text-green-800 dark:bg-green-700/30 dark:text-green-300' : 'bg-red-100 text-red-800 dark:bg-red-700/30 dark:text-red-300'}`}>
                             {student.status === 'active' ? 'Ativo' : 'Inativo'}
                           </Badge>
                      </TableCell>
                      <TableCell className="px-6 py-3 whitespace-nowrap text-right">
                        <div className="flex justify-end items-center gap-0.5"> 
                          <Button variant="ghost" size="icon" onClick={() => handleViewClick(student._id)} title="Visualizar Detalhes" className="h-8 w-8 text-blue-600 hover:text-blue-700">
                            <Eye className="h-4 w-4" />
                          </Button>
                          <ActionsAluno
                            onEdit={() => handleEditClick(student)} 
                            onDelete={() => handleDeleteClick(student)}
                          />
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
              </TableBody>
            </Table>
          </div>
           {students.length > 5 && !isLoading && (
                <div className="p-4 text-center border-t border-gray-100 dark:border-gray-800">
                    <Link href="/alunos">
                        <Button variant="link" size="sm">Ver todos os alunos</Button>
                    </Link>
                </div>
            )}
        </CardContent>
      </Card>

      {modalEditarOpen && alunoSelecionado && (
        <ModalEditarAluno
          isOpen={modalEditarOpen}
          onClose={() => { setModalEditarOpen(false); setAlunoSelecionado(null); }}
          aluno={alunoSelecionado} 
          atualizarAlunos={refetchStudents} 
        />
      )}
      <ModalConfirmacao
        isOpen={isConfirmDeleteOpen}
        onClose={closeDeleteStudentDialog}
        onConfirm={confirmDeleteStudentAction}
        titulo={confirmDeleteOptions.titulo}
        mensagem={confirmDeleteOptions.mensagem}
        textoConfirmar={confirmDeleteOptions.textoConfirmar}
        textoCancelar={confirmDeleteOptions.textoCancelar}
        isLoadingConfirm={deleteStudentMutation.isPending}
      />
    </>
  );
}

==== ./client/src/components/ui/dashboard/workout-plans-grid.tsx ====

// client/src/components/ui/dashboard/workout-plans-grid.tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Dumbbell, Users, Plus } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { Link, useLocation } from "wouter";
import { apiRequest } from "@/lib/queryClient"; // Importar apiRequest

// Interface para os dados de plano de treino esperados da API
// Esta interface deve corresponder à estrutura de uma Ficha de Treino do tipo 'modelo'
interface WorkoutPlanModelo {
  id: string; // ou _id, dependendo da sua API/modelo Treino
  _id: string;
  name: string; // Deve ser 'titulo' do modelo Treino
  titulo: string;
  status?: "active" | "draft" | "archived" | string; // 'status' do modelo Treino
  description?: string; // 'descricao' do modelo Treino
  duration?: number; // semanas - Este campo pode não existir no modelo Treino
  // Adicionar campos que você realmente tem no modelo Treino e quer exibir
  exerciseCount?: number; // Pode ser calculado a partir de ficha.exercicios.length
  assignedStudentCount?: number; // Esta informação pode não estar diretamente na ficha modelo
  studentAvatars?: string[];
  tipo?: "modelo" | "individual";
}

interface WorkoutPlansGridProps {
  trainerId: string; // Já ajustado para string
}

export function WorkoutPlansGrid({ trainerId }: WorkoutPlansGridProps) {
  const [, navigate] = useLocation();

  // Ajustado para chamar /api/treinos com filtros
  const { data: workoutPlans, isLoading } = useQuery<WorkoutPlanModelo[], Error>({
    queryKey: ["/api/treinos", { criadorId: trainerId, tipo: 'modelo', limit: 4, forComponent: "WorkoutPlansGridDashboard" }],
    queryFn: async () => {
      if (!trainerId) throw new Error("Trainer ID não fornecido para buscar planos de treino modelo.");
      // Chama /api/treinos, o backend deve filtrar por criadorId (do token) e tipo=modelo
      return apiRequest<WorkoutPlanModelo[]>("GET", `/api/treinos?tipo=modelo&limit=4`);
    },
    enabled: !!trainerId,
  });

  const getStatusBadge = (status?: string) => {
    switch (status) {
      case "ativo": // Ajustado para corresponder ao status do modelo Treino
        return <Badge className="bg-green-100 text-green-800 hover:bg-green-200 dark:bg-green-700/30 dark:text-green-300">Ativo</Badge>;
      case "rascunho":
        return <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-200 dark:bg-yellow-700/30 dark:text-yellow-300">Rascunho</Badge>;
      case "arquivado":
        return <Badge className="bg-gray-100 text-gray-800 hover:bg-gray-200 dark:bg-gray-700/30 dark:text-gray-400">Arquivado</Badge>;
      default:
        return <Badge variant="outline" className="dark:text-gray-400">{status || "Indefinido"}</Badge>;
    }
  };

  const renderWorkoutSkeleton = (count = 2) => (
    <>
      {[...Array(count)].map((_, i) => (
        <div key={i} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 shadow-sm animate-pulse">
          <div className="flex items-center justify-between mb-3">
            <div className="h-5 bg-gray-300 dark:bg-gray-600 rounded w-32"></div>
            <div className="h-6 bg-gray-300 dark:bg-gray-600 rounded w-16"></div>
          </div>
          <div className="h-4 bg-gray-300 dark:bg-gray-600 rounded w-full mb-3"></div>
          <div className="flex items-center text-xs text-gray-500 dark:text-gray-400 mb-4">
            <div className="h-3 bg-gray-300 dark:bg-gray-600 rounded w-20 mr-4"></div>
            <div className="h-3 bg-gray-300 dark:bg-gray-600 rounded w-20"></div>
          </div>
          <div className="flex justify-between items-center">
            <div className="flex -space-x-2">
              {[1,2,3].map(s => <div key={s} className="w-6 h-6 rounded-full bg-gray-400 dark:bg-gray-500 border-2 border-white dark:border-gray-800"></div>)}
            </div>
            <div className="h-8 bg-gray-300 dark:bg-gray-600 rounded w-20"></div>
          </div>
        </div>
      ))}
    </>
  );

  return (
    <Card className="border border-gray-100 dark:border-gray-800 overflow-hidden shadow-sm">
      <CardHeader className="px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex flex-row items-center justify-between">
        <CardTitle className="font-semibold text-gray-900 dark:text-gray-100">Planos de Treino Modelo</CardTitle>
        <div className="flex items-center space-x-2">
          <Link href="/treinos" className="text-sm text-primary hover:text-primary/90 dark:hover:text-primary/70">
            Ver todos
          </Link>
          <Button size="sm" variant="outline" onClick={() => navigate("/treinos")}> {/* Navega para /treinos onde pode criar novo */}
            <Plus className="w-4 h-4 mr-1.5" />
            Novo Plano
          </Button>
        </div>
      </CardHeader>
      <CardContent className="p-4 md:p-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6">
          {isLoading ? (
            renderWorkoutSkeleton()
          ) : (
            <>
              {workoutPlans && workoutPlans.length > 0 ? workoutPlans.map((plan) => (
                <div key={plan._id} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4 hover:shadow-md transition-shadow duration-150 flex flex-col justify-between">
                  <div>
                    <div className="flex items-start justify-between mb-2">
                      <h4 className="font-medium text-gray-800 dark:text-gray-200 truncate" title={plan.titulo}>{plan.titulo}</h4>
                      {getStatusBadge(plan.status)}
                    </div>
                    <p className="text-sm text-gray-500 dark:text-gray-400 mb-3 line-clamp-2" title={plan.description}>
                      {plan.description || (plan.duration ? `Programa de ${plan.duration} semanas` : "Sem descrição")}
                    </p>
                    <div className="flex items-center text-xs text-gray-500 dark:text-gray-400 mb-4 space-x-3">
                      {plan.exerciseCount !== undefined && (
                        <span className="flex items-center">
                          <Dumbbell className="w-3 h-3 mr-1" /> {plan.exerciseCount} exercícios
                        </span>
                      )}
                      {/* assignedStudentCount e studentAvatars podem não vir diretamente do modelo Treino tipo 'modelo' */}
                      {/* Você pode precisar de outra lógica se quiser exibir isso */}
                    </div>
                  </div>
                  <div className="flex justify-between items-center mt-auto pt-3 border-t border-gray-100 dark:border-gray-700">
                    <div className="flex -space-x-2 overflow-hidden">
                      {/* Lógica para avatares de alunos, se aplicável a planos modelo */}
                    </div>
                    <Button 
                      variant="link" 
                      size="sm" 
                      className="text-primary hover:text-primary/90 dark:hover:text-primary/70 font-medium p-0 h-auto"
                      onClick={() => navigate(`/treinos`)} // Idealmente, navegar para o detalhe do plano/ficha: /treinos/${plan._id}
                    >
                      Ver Detalhes
                    </Button>
                  </div>
                </div>
              )) : (
                <div className="md:col-span-2 text-center py-8 text-sm text-gray-500 dark:text-gray-400">
                  Nenhum plano de treino modelo encontrado. <Link href="/treinos" className="text-primary hover:underline">Crie seu primeiro plano!</Link>
                </div>
              )}
            </>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

==== ./client/src/components/ui/dialog.tsx ====

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

==== ./client/src/components/ui/drawer.tsx ====

"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

==== ./client/src/components/ui/dropdown-menu.tsx ====

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

==== ./client/src/components/ui/form.tsx ====

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

==== ./client/src/components/ui/hover-card.tsx ====

"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

==== ./client/src/components/ui/input-otp.tsx ====

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

==== ./client/src/components/ui/input.tsx ====

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

==== ./client/src/components/ui/label.tsx ====

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
